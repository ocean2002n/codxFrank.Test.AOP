<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CityState.Common</name>
    </assembly>
    <members>
        <member name="T:CommonUtilities.Assertion">
            <summary>
            Assert utility.
            </summary>
            <summary>
            Assert utility.
            </summary>
        </member>
        <member name="M:CommonUtilities.Assertion.AssertObjectNotNull``1(``0,System.String)">
             <summary>
             斷言傳入的物件一定具有instance.
             </summary>
            <typeparam name="T">被斷言型別</typeparam>
            <param name="target">被斷言物件參照</param>
            <param name="argumentName">該物件名稱. 該欄位不允許null or empty. 否則將收到一個<see cref="T:System.ArgumentNullException"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> or <paramref name="argumentName"/> is null reference.</exception>
        </member>
        <member name="M:CommonUtilities.Assertion.AssertObjectNotNull``1(``0,System.String,System.String)">
            <summary>
            斷言傳入的物件一定具有instance.
            </summary>
            <typeparam name="T">被斷言型別</typeparam>
            <param name="target">被斷言物件參照</param>
            <param name="argumentName">該物件名稱. 該欄位不允許null or empty. 否則將收到一個<see cref="T:System.ArgumentNullException"/></param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> or <paramref name="argumentName"/> is null reference.</exception>
        </member>
        <member name="M:CommonUtilities.Assertion.NotNull``1(``0,System.String,System.String)">
            <summary>
            斷言傳入的物件一定具有instance.
            </summary>
            <typeparam name="T">被斷言型別</typeparam>
            <param name="target">被斷言物件參照</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target" /> is null.</exception>
        </member>
        <member name="M:CommonUtilities.Assertion.NotNull``1(``0,System.String)">
            <summary>
            斷言傳入的物件一定具有instance.
            </summary>
            <typeparam name="T">被斷言型別</typeparam>
            <param name="target">被斷言物件參照</param>
            <param name="argumentName">Name of the argument.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target" /> is null.</exception>
        </member>
        <member name="M:CommonUtilities.Assertion.NoDefault``1(``0,System.String,System.String)">
            <summary>
            斷言傳入的物件一定具有instance.
            </summary>
            <typeparam name="T">被斷言型別</typeparam>
            <param name="target">被斷言物件參照</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
        </member>
        <member name="M:CommonUtilities.Assertion.NotDefault``1(``0,System.String)">
            <summary>
            Nots the default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="argumentName">Name of the argument.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:CommonUtilities.Assertion.InRange``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String,System.String)">
            <summary>
            斷言指定的<paramref name="index"/>存在於<paramref name="collection"/>中.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="index">The index.</param>
            <param name="collectionName">Name of the collection.</param>
            <param name="indexName">Name of the index.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            </exception>
        </member>
        <member name="M:CommonUtilities.Assertion.IsTrue(System.Boolean,System.String)">
            <summary>
            Determines whether the specified condition is true.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="argumentName">Name of the argument.</param>
            <exception cref="T:System.ArgumentException">
            The argumentName cannot be null, empty or white space
            or
            </exception>
        </member>
        <member name="M:CommonUtilities.Assertion.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Determines whether the specified condition is true.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:CommonUtilities.Assertion.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Assert string not the null, empty or white space.
            </summary>
            <param name="target">The target.</param>
            <param name="argumentName">Name of the argument.</param>
        </member>
        <member name="M:CommonUtilities.Assertion.AssertNotNull``1(``0,System.String,System.String)">
            <summary>
            Asserts the not null.
            </summary>
            <param name="argument">The object.</param>
            <param name="argumentName">Name of the parameter.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:CommonUtilities.Assertion.AssertNotNull``1(``0,System.String)">
            <summary>
            Asserts the not null.
            </summary>
            <param name="argument">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CommonUtilities.Assertion.AssertNotDefault``1(``0,System.String,System.String)">
            <summary>
            Asserts the not default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argument">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:CommonUtilities.Assertion.AssertNotDefault``1(``0,System.String)">
            <summary>
            Asserts the not default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argument">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:CommonUtilities.Assertion.AssertTrue(System.Boolean,System.String,System.String)">
            <summary>
            Asserts the true.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:CommonUtilities.Assertion.AssertTrue(System.Boolean,System.String)">
            <summary>
            Asserts the true.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="errorMessage">The error message.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:CommonUtilities.Assertion.AssertInRange``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String,System.String)">
            <summary>
            斷言指定的<paramref name="index"/>存在於<paramref name="collection"/>中.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="index">The index.</param>
            <param name="collectionName">Name of the collection.</param>
            <param name="indexName">Name of the index.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            </exception>
        </member>
        <member name="M:CommonUtilities.Assertion.AssertNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Assert string not the null, empty or white space.
            </summary>
            <param name="value">The value.</param>
            <param name="argumentName">Name of the argument.</param>
            <exception cref="T:System.ArgumentException">
            The argumentName cannot be null, empty or white space
            or
            The argument cannot be null, empty or white space.
            </exception>
        </member>
        <member name="T:CommonUtilities.QueryableRepositoryContract`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:CommonUtilities.QueryableRepositoryContract`2.Create(`0)">
            <summary>
            Create the domain object in the repository.
            </summary>
            <param name="obj">領域物件</param>
            <returns>
            建立在貯藏庫後被賦予的Key值
            </returns>
        </member>
        <member name="M:CommonUtilities.QueryableRepositoryContract`2.FindBy(`1)">
            <summary>
            Find the domain object by the specified key value.
            </summary>
            <param name="id">物件Key值</param>
            <returns>
            領域物件
            </returns>
        </member>
        <member name="M:CommonUtilities.QueryableRepositoryContract`2.Update(`0)">
            <summary>
            Update the domain object in the repository.
            </summary>
            <param name="entity">欲更新的領域物件</param>
        </member>
        <member name="M:CommonUtilities.QueryableRepositoryContract`2.Delete(`1)">
            <summary>
            Delete the domain object in the repository by specified key value.
            </summary>
            <param name="id">物件Key值</param>
        </member>
        <member name="M:CommonUtilities.QueryableRepositoryContract`2.DeleteAll">
            <summary>
            Delete the domain object in the repository by specified key value.
            </summary>
        </member>
        <member name="M:CommonUtilities.QueryableRepositoryContract`2.FetchAll">
            <summary>
            Fetch all of domain objects in the repository.
            </summary>
            <returns>
            領域物件集合
            </returns>
        </member>
        <member name="M:CommonUtilities.QueryableRepositoryContract`2.FetchAll(System.Int32,System.Int32)">
            <summary>
            Fetch all of domain objects in the repository.
            </summary>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns>
            領域物件集合
            </returns>
        </member>
        <member name="M:CommonUtilities.QueryableRepositoryContract`2.FetchAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Fetch all of domain objects in the repository.
            </summary>
            <param name="expression"></param>
            <returns>
            領域物件集合
            </returns>
        </member>
        <member name="M:CommonUtilities.QueryableRepositoryContract`2.FetchAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32)">
            <summary>
            Fetch all of domain objects in the repository.
            </summary>
            <typeparam name="TColumn"></typeparam>
            <param name="expression"></param>
            <param name="keySelector"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns>
            領域物件集合
            </returns>
        </member>
        <member name="M:CommonUtilities.QueryableRepositoryContract`2.Exist(`1)">
            <summary>
            The domain object has contain in repository.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.QueryableRepositoryContract`2.CreateAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates all.
            </summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="M:CommonUtilities.QueryableRepositoryContract`2.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Update the domain object in the repository.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:CommonUtilities.QueryableRepositoryContract`2.DeleteAll(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Deletes all.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:CommonUtilities.QueryableRepositoryContract`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CommonUtilities.QueryableRepositoryContract`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:CommonUtilities.QueryableRepositoryContract`2.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable" /> is executed.
            </summary>
        </member>
        <member name="P:CommonUtilities.QueryableRepositoryContract`2.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable" />.
            </summary>
        </member>
        <member name="P:CommonUtilities.QueryableRepositoryContract`2.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
        </member>
        <member name="T:CommonUtilities.PropertyExpressionUtilities">
            <summary>
            Compile and return property getter and setter.
            </summary>
        </member>
        <member name="M:CommonUtilities.PropertyExpressionUtilities.GetPropGetter``2(System.String)">
            <summary>
            Returns property getter delegate
            </summary>
            <typeparam name="TObject">目標物件的型別</typeparam>
            <typeparam name="TProperty">目標屬性的型別</typeparam>
            <param name="propertyName">屬性名稱</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.PropertyExpressionUtilities.GetPropSetter``2(System.String)">
            <summary>
            Returns property setter delegate
            </summary>
            <typeparam name="TObject">目標物件的型別</typeparam>
            <typeparam name="TProperty">目標屬性的型別</typeparam>
            <param name="propertyName">屬性名稱</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.StringExtension.TakeString(System.String,System.Int32)">
            <summary>
            Take String. If <paramref name="value"/>  is null the method will return null. 
            If the <paramref name="count"/> is less than zero, it will be deemed to be zero.
            if value length less than count, method will return original value.
            </summary>
            <param name="value"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.StringExtension.TakeString(System.String,System.Int32,System.Boolean)">
            <summary>
            Take String. 
            </summary>
            <param name="value"></param>
            <param name="count"></param>
            <param name="throwExceptionIfNotInvalid">
            if true, when value or count are invalid, method will throw <see cref="T:System.ArgumentException"/> or <see cref="T:System.ArgumentOutOfRangeException"/>. Default is false.
            </param>
            <returns></returns>
            <remarks>
            When <paramref name="throwExceptionIfNotInvalid"/> is false, value is null, the method will return null. when count less then zero, will setting to zero. if value length less than count, will return value.
            </remarks>
        </member>
        <member name="T:CommonUtilities.IFindable`1">
            <summary>
            可被查找的資料來源
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:CommonUtilities.IFindable`1.FetchAllItems">
            <summary>
            Fetch all data from data source
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.IFindable`1.FindItemBy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Find data by expression from data source
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:CommonUtilities.IQueryableRepository`2">
            <summary>
            The generic interface for data repository with <seealso cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="TEntity">儲存的物件型別</typeparam>
            <typeparam name="TKey">物件的唯一識別碼型別</typeparam>
            <remarks>The interface combine <see cref="T:CommonUtilities.IRepository`2"/> and <see cref="T:System.Linq.IQueryable`1"/>.</remarks>
        </member>
        <member name="T:CommonUtilities.CacheBase`1">
            <summary>
            Provide a container to do cache.
            </summary>
            <typeparam name="TCacheItem">The type of the cache item.</typeparam>
        </member>
        <member name="P:CommonUtilities.CacheBase`1.CachePriority">
            <summary>
            Gets the cache priority.
            </summary>
            <value>
            The cache priority.
            </value>
        </member>
        <member name="M:CommonUtilities.CacheBase`1.ClearCache(System.String)">
            <summary>
            Clears the cache.
            </summary>
            <param name="regionName">Name of the region.</param>
        </member>
        <member name="M:CommonUtilities.ObjectToDictionaryRegistry.Convert(System.Object)">
            <summary>
            Loads the values of an object's properties into a <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="dataObject">The data object.</param>
            <returns>If <paramref name="dataObject"/> implements <see cref="T:System.Collections.Generic.IDictionary`2"/>, 
            the object is cast to <see cref="T:System.Collections.Generic.IDictionary`2"/> and returned.
            Otherwise the object returned is a <see cref="T:System.Collections.Hashtable"/> with all public non-static properties and their respective values
            as key-value pairs.
            </returns>
        </member>
        <member name="M:CommonUtilities.ObjectToDictionaryRegistry.getObjectToDictionaryConverter(System.Object)">
            <summary>
            Handles caching.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.RepositoryException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:CommonUtilities.IRepositoryBase`1">
            <summary>
            Provide create, search and delete methods for repository.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:CommonUtilities.IRepositoryBase`1.Create(`0)">
            <summary>
            Create data into repository
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:CommonUtilities.IRepositoryBase`1.CreateAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create multiple data into repository
            </summary>
            <param name="objectsToCreate"></param>
        </member>
        <member name="M:CommonUtilities.IRepositoryBase`1.FetchAll">
            <summary>
            Fetch all of domain objects in the repository.
            </summary>
            <returns>領域物件集合</returns>
        </member>
        <member name="M:CommonUtilities.IRepositoryBase`1.FetchAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Find data by expression
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.IRepositoryBase`1.Delete(`0)">
            <summary>
            Delete entity from repository
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:CommonUtilities.IRepositoryBase`1.DeleteAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Delete all data from repository
            </summary>
            <param name="objectsToDelete"></param>
        </member>
        <member name="T:CommonUtilities.EnumerationResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Constellation_Aquarius">
            <summary>
              Looks up a localized string similar to 水瓶.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Constellation_Aries">
            <summary>
              Looks up a localized string similar to 牧羊.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Constellation_Cancer">
            <summary>
              Looks up a localized string similar to 巨蟹.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Constellation_Capricorn">
            <summary>
              Looks up a localized string similar to 魔羯.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Constellation_Gemini">
            <summary>
              Looks up a localized string similar to 雙子.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Constellation_Leo">
            <summary>
              Looks up a localized string similar to 獅子.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Constellation_Libra">
            <summary>
              Looks up a localized string similar to 天秤.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Constellation_None">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Constellation_Pisces">
            <summary>
              Looks up a localized string similar to 雙魚.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Constellation_Sagittarius">
            <summary>
              Looks up a localized string similar to 射手.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Constellation_Scorpio">
            <summary>
              Looks up a localized string similar to 天蠍.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Constellation_Taurus">
            <summary>
              Looks up a localized string similar to 金牛.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Constellation_Virgo">
            <summary>
              Looks up a localized string similar to 處女.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Gender_Female">
            <summary>
              Looks up a localized string similar to 女.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Gender_Male">
            <summary>
              Looks up a localized string similar to 男.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Gender_None">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.MaritalStatus_Married">
            <summary>
              Looks up a localized string similar to 已婚.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.MaritalStatus_Other">
            <summary>
              Looks up a localized string similar to 其它.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.MaritalStatus_Separation">
            <summary>
              Looks up a localized string similar to 分居.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.MaritalStatus_Single">
            <summary>
              Looks up a localized string similar to 單身.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Month_April">
            <summary>
              Looks up a localized string similar to 四月.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Month_August">
            <summary>
              Looks up a localized string similar to 八月.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Month_December">
            <summary>
              Looks up a localized string similar to 十二月.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Month_February">
            <summary>
              Looks up a localized string similar to 二月.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Month_January">
            <summary>
              Looks up a localized string similar to 一月.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Month_July">
            <summary>
              Looks up a localized string similar to 七月.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Month_June">
            <summary>
              Looks up a localized string similar to 六月.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Month_March">
            <summary>
              Looks up a localized string similar to 三月.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Month_May">
            <summary>
              Looks up a localized string similar to 五月.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Month_November">
            <summary>
              Looks up a localized string similar to 十一月.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Month_October">
            <summary>
              Looks up a localized string similar to 十月.
            </summary>
        </member>
        <member name="P:CommonUtilities.EnumerationResource.Month_September">
            <summary>
              Looks up a localized string similar to 九月.
            </summary>
        </member>
        <member name="T:CommonUtilities.RepositoryContract`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:CommonUtilities.RepositoryContract`2.Create(`0)">
            <summary>
            Create the domain object in the repository.
            </summary>
            <param name="obj">領域物件</param>
            <returns>
            建立在貯藏庫後被賦予的Key值
            </returns>
        </member>
        <member name="M:CommonUtilities.RepositoryContract`2.FindBy(`1)">
            <summary>
            Find the domain object by the specified key value.
            </summary>
            <param name="id">物件Key值</param>
            <returns>
            領域物件
            </returns>
        </member>
        <member name="M:CommonUtilities.RepositoryContract`2.Update(`0)">
            <summary>
            Update the domain object in the repository.
            </summary>
            <param name="entity">欲更新的領域物件</param>
        </member>
        <member name="M:CommonUtilities.RepositoryContract`2.Delete(`1)">
            <summary>
            Delete the domain object in the repository by specified key value.
            </summary>
            <param name="id">物件Key值</param>
        </member>
        <member name="M:CommonUtilities.RepositoryContract`2.DeleteAll">
            <summary>
            Delete the domain object in the repository by specified key value.
            </summary>
        </member>
        <member name="M:CommonUtilities.RepositoryContract`2.FetchAll">
            <summary>
            Fetch all of domain objects in the repository.
            </summary>
            <returns>
            領域物件集合
            </returns>
        </member>
        <member name="M:CommonUtilities.RepositoryContract`2.FetchAll(System.Int32,System.Int32)">
            <summary>
            Fetch all of domain objects in the repository.
            </summary>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns>
            領域物件集合
            </returns>
        </member>
        <member name="M:CommonUtilities.RepositoryContract`2.FetchAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Fetch all of domain objects in the repository.
            </summary>
            <param name="expression"></param>
            <returns>
            領域物件集合
            </returns>
        </member>
        <member name="M:CommonUtilities.RepositoryContract`2.FetchAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32)">
            <summary>
            Fetch all of domain objects in the repository.
            </summary>
            <typeparam name="TColumn"></typeparam>
            <param name="expression"></param>
            <param name="keySelector"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns>
            領域物件集合
            </returns>
        </member>
        <member name="M:CommonUtilities.RepositoryContract`2.Exist(`1)">
            <summary>
            The domain object has contain in repository.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.RepositoryContract`2.CreateAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates all.
            </summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="M:CommonUtilities.RepositoryContract`2.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Update the domain object in the repository.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:CommonUtilities.RepositoryContract`2.DeleteAll(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Deletes all.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="T:CommonUtilities.IncreaseCollection`1">
            <summary>
            The collection only allow Increase item.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:CommonUtilities.IncreaseCollection`1.CollectionIncreased">
            <summary>
            Occurs when [collection increased].
            </summary>
        </member>
        <member name="F:CommonUtilities.IncreaseCollection`1.list">
            <summary>
            The list
            </summary>
        </member>
        <member name="M:CommonUtilities.IncreaseCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:CommonUtilities.IncreaseCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range.
            </summary>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">items</exception>
        </member>
        <member name="M:CommonUtilities.IncreaseCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="P:CommonUtilities.IncreaseCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:CommonUtilities.IncreaseCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:CommonUtilities.IncreaseCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CommonUtilities.IncreaseCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CommonUtilities.IncreaseCollection`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:CommonUtilities.IncreaseCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:CommonUtilities.IncreaseCollection`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:CommonUtilities.IncreaseCollection`1.invokeCollectionChange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Invokes the collection change.
            </summary>
            <param name="changeItems">The change items.</param>
        </member>
        <member name="T:CommonUtilities.IncreaseItemsEventArgs`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CommonUtilities.IncreaseItemsEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtilities.IncreaseItemsEventArgs`1"/> class.
            </summary>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">items</exception>
        </member>
        <member name="P:CommonUtilities.IncreaseItemsEventArgs`1.Items">
            <summary>
            Gets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="F:CommonUtilities.IncreaseItemsEventArgs`1.items">
            <summary>
            The items
            </summary>
        </member>
        <member name="T:CommonUtilities.CombGuidGenerator">
            <summary>
            Sequential Guid Generator.
            </summary>
        </member>
        <member name="M:CommonUtilities.CombGuidGenerator.Generate">
            <summary>
            Generates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.CombGuidGenerator.Range(System.Int32)">
            <summary>
            Ranges <seealso cref="T:System.Guid"/> the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="T:CommonUtilities.ComparableExtension">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonUtilities.ComparableExtension.GreaterThan``1(``0,``0)">
            <summary>
            Greaters the than.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.ComparableExtension.LessThan``1(``0,``0)">
            <summary>
            Lesses the than.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.ComparableExtension.EqualThan``1(``0,``0)">
            <summary>
            Equals the than.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.ComparableExtension.GreaterOrEqualThan``1(``0,``0)">
            <summary>
            Greaters the or equal than.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.ComparableExtension.LessOrEqualThan``1(``0,``0)">
            <summary>
            Lesses the or equal than.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.ComparableExtension.Min``1(``0,``0)">
            <summary>
            取較大物件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.ComparableExtension.Max``1(``0,``0)">
            <summary>
            取較小物件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:CommonUtilities.EnumerationExtension">
            <summary>
            Provides a set of static ( Shared in Visual Basic) methods for querying objects that implement <seealso cref="!:IEnumerable(Of T)" />.
            </summary>
        </member>
        <member name="M:CommonUtilities.EnumerationExtension.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a <seealso cref="!:HashSet(Of T)" /> from an <seealso cref="!:IEnumerable(Of T)" />.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The <seealso cref="!:IEnumerable(Of T)" /> to create a <seealso cref="!:HashSet(Of T)" /> from.</param>
            <returns>
            A <seealso cref="!:HashSet(Of T)" /> that contains elements from the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">source is <c>null</c>.</exception>
            <remarks>
            The <c>ToSet(Of TSource)(IEnumerable(Of TSource))</c> method forces immediate query evaluation and returns a <seealso cref="!:HashSet(Of T)" /> that contains the query results.
            You can append this method to your query in order to obtain a cached copy of the query results.
            If collection contains duplicates, the set will contain one of each unique element.
            No exception will be thrown. Therefore, the size of the resulting set is not identical to the size of collection.
            </remarks>
        </member>
        <member name="M:CommonUtilities.EnumerationExtension.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether [is n ull or empty] [the specified source].
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <returns>true is null or empty, otherwise false.</returns>
        </member>
        <member name="M:CommonUtilities.EnumerationExtension.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified source is empty.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:CommonUtilities.EnumerationExtension.Traverse``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            遍灠<seealso cref="!:IEnumerable`1&lt;TSource&gt;" />
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="fnRecurse">The function recurse.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.EnumerationExtension.ContainsDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Determines whether a sequence contains duplicates target.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TSelector"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.EnumerationExtension.ContainsDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Determines whether a sequence contains duplicates target.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TSelector">The type of the selector.</typeparam>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.EnumerationExtension.DuplicateElements``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Duplicates the elements.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.EnumerationExtension.DuplicateElements``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Duplicates the elements.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="T:CommonUtilities.EnumerationExtensionForHierarchy">
            <summary>
            Enumeration extension for hierarchy.
            </summary>
        </member>
        <member name="M:CommonUtilities.EnumerationExtensionForHierarchy.ToHierarchyStructureCollection``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
            將<seealso cref="!:IEnumerable(Of TEntity)" />轉換為<seealso cref="!:HierarchyStructureCollection(Of TEntity)" />
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="parentKeySelector">The parent key selector.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source is <c>null</c>.</exception>
        </member>
        <member name="M:CommonUtilities.EnumerationExtensionForHierarchy.ToHierarchyStructure``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
            將<paramref name="source" />轉換為<seealso cref="!:IEnumerable(Of HierarchyStructure(Of TEntity))" />
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="parentKeySelector">The parent key selector.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source is <c>null</c>.</exception>
        </member>
        <member name="M:CommonUtilities.EnumerationExtensionForHierarchy.ToHierarchy``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            將<paramref name="source"/>重新組織為有階層的物件結構<typeparamref name="TEntity"/>
            </summary>
            <typeparam name="TEntity">必須為<seealso cref="T:CommonUtilities.IHierarchy`1"/>型別</typeparam>
            <param name="source"></param>
            <returns></returns>
            <remarks>特別注意, 若原物件本身已有Hierarchy結構, 則有可能會有重覆加載的問題. 若想避免此問題, 請參考<see cref="T:CommonUtilities.LoadHierarchyOptional"/></remarks>
            <exception cref="T:System.ArgumentNullException">source is <c>null</c>.</exception>
        </member>
        <member name="M:CommonUtilities.EnumerationExtensionForHierarchy.ToHierarchy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
            將<paramref name="source"/>重新組織為有階層的物件結構<typeparamref name="TEntity"/>
            </summary>
            <typeparam name="TEntity">必須為<seealso cref="T:CommonUtilities.IHierarchy`1"/>型別</typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="parentKeySelector"></param>
            <returns></returns>
            <remarks>特別注意, 若原物件本身已有Hierarchy結構, 則有可能會有重覆加載的問題. 
            若想避免此問題, 請參考<see cref="T:CommonUtilities.LoadHierarchyOptional"/>
            </remarks>
            <exception cref="T:System.ArgumentNullException">source is <c>null</c>.</exception>
        </member>
        <member name="M:CommonUtilities.EnumerationExtensionForHierarchy.ToHierarchy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Func{``0,System.String})">
            <summary>
            將<paramref name="source"/>重新組織為有階層的物件結構<typeparamref name="TEntity"/>
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="parentKeySelector"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.EnumerationExtensionForHierarchy.ToHierarchy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            To the hierarchy.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="parentKeySelector">The parent key selector.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.EnumerationExtensionForHierarchy.ToHierarchy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},CommonUtilities.LoadHierarchyOptional)">
            <summary>
            將<paramref name="source"/>重新組織為有階層的物件結構<typeparamref name="TEntity"/>
            </summary>
            <typeparam name="TEntity">必須為<seealso cref="T:CommonUtilities.IHierarchy`1"/>型別</typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="parentKeySelector"></param>
            <param name="loadOptional">載入選項. <seealso cref="T:CommonUtilities.LoadHierarchyOptional"/></param>
            <returns></returns>
            <remarks>
            特別注意, 若原物件本身已有Hierarchy結構, 將會被清空, 重新載入, 以避免重覆加載.
            若想避免此問題, 請參考<see cref="T:CommonUtilities.LoadHierarchyOptional"/>
            </remarks>
            <exception cref="T:System.ArgumentNullException">source is <c>null</c>.</exception>
        </member>
        <member name="M:CommonUtilities.EnumerationExtensionForHierarchy.ToHierarchy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},CommonUtilities.LoadHierarchyOptional,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="parentKeySelector"></param>
            <param name="loadOptional"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CommonUtilities.EnumerationExtensionForHierarchy.toHierarchyStructure``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},``0)" -->
        <member name="M:CommonUtilities.EnumerationExtensionForHierarchy.compileToHierarchy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},CommonUtilities.LoadHierarchyOptional,System.Collections.Generic.IEqualityComparer{``1},``0)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="allItems"></param>
            <param name="keySelector"></param>
            <param name="parentKeySelector"></param>
            <param name="comparer"></param>
            <param name="loadOptional"></param>
            <param name="parentItem"></param>
            <returns></returns>
        </member>
        <member name="T:CommonUtilities.LoadHierarchyOptional">
            <summary>
            載入階層結構選擇
            </summary>
            <remarks>
            該選擇與如何實作<seealso cref="T:CommonUtilities.IHierarchy`1"/>有緊密的關係.
            若實作體在Parent的Set中有會將實體加入對象(Parent)物件的Child時，則可選LoadToParent;
            若實作體在Add及AddRange時會將對象物件的Parent設為實體本身時，則可選LoadToChildren;
            若實作體都不會有Cascade時, 可用LoadToBoth或LoadToChildren進行
            </remarks>
        </member>
        <member name="F:CommonUtilities.LoadHierarchyOptional.LoadToParent">
            <summary>
            載入至父項
            </summary>
        </member>
        <member name="F:CommonUtilities.LoadHierarchyOptional.LoadToChildren">
            <summary>
            載入至子項
            </summary>
        </member>
        <member name="F:CommonUtilities.LoadHierarchyOptional.LoadToBoth">
            <summary>
            兩者皆載入
            </summary>
        </member>
        <member name="F:CommonUtilities.LoadHierarchyOptional.LoadToChildrenBeforeClear">
            <summary>
            載入至子項前先清空.
            選此項目可避免重覆加載, 但若Children清空會Cascade Parent且parentKeySelector又是<see cref="P:CommonUtilities.IHierarchy`1.Parent"/>時, 則會引發清空ParentKey的後果.
            </summary>
        </member>
        <member name="F:CommonUtilities.LoadHierarchyOptional.LoadToBothBeforeClear">
            <summary>
            兩者皆載入前先清空
            選此項目可避免重覆加載, 但若Children清空會Cascade Parent且parentKeySelector又是<see cref="P:CommonUtilities.IHierarchy`1.Parent"/>時, 則會引發清空ParentKey的後果.
            </summary>
        </member>
        <member name="T:CommonUtilities.ListExtension">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonUtilities.ListExtension.MoveItemNext``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            將某個List節點移動至下一個
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="list"></param>
            <param name="item"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">list is <c>null</c>.</exception>
        </member>
        <member name="M:CommonUtilities.ListExtension.MoveItemPrevious``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            將某個List節點移動至上一個
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="list"></param>
            <param name="item"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">list is <c>null</c>.</exception>
        </member>
        <member name="M:CommonUtilities.ListExtension.SwapElement``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swaps the element.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="list">The list.</param>
            <param name="index1">The index1.</param>
            <param name="index2">The index2.</param>
            <exception cref="T:System.ArgumentNullException">list</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index1;index1 or index2 must greater than zero.</exception>
            <exception cref="T:System.ArgumentException">index must less than list length.</exception>
        </member>
        <member name="T:CommonUtilities.GeneralIdentificationSchema`1">
            <summary>
            
            </summary>
            <typeparam name="TIdentifier">The type of the identifier.</typeparam>
        </member>
        <member name="F:CommonUtilities.GeneralIdentificationSchema`1.regex">
            <summary>
            The regex
            </summary>
        </member>
        <member name="M:CommonUtilities.GeneralIdentificationSchema`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtilities.GeneralIdentificationSchema`1"/> class.
            </summary>
            <param name="schema">The schema.</param>
        </member>
        <member name="P:CommonUtilities.GeneralIdentificationSchema`1.Schema">
            <summary>
            Gets the schema.
            </summary>
            <value>
            The schema.
            </value>
        </member>
        <member name="F:CommonUtilities.GeneralIdentificationSchema`1.schema">
            <summary>
            The schema
            </summary>
        </member>
        <member name="M:CommonUtilities.GeneralIdentificationSchema`1.IsValid(`0)">
            <summary>
            Determines whether the specified target is valid.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.GeneralIdentificationSchema`1.IsValid(System.String)">
            <summary>
            Determines whether the specified target is valid.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CommonUtilities.GroupingBase`2" -->
        <member name="M:CommonUtilities.GroupingBase`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtilities.GroupingBase`2"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="elements">The elements.</param>
            <exception cref="T:System.ArgumentNullException">key or elements any null reference.</exception>
        </member>
        <member name="M:CommonUtilities.GroupingBase`2.#ctor(System.Linq.IGrouping{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtilities.GroupingBase`2"/> class.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="P:CommonUtilities.GroupingBase`2.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="M:CommonUtilities.GroupingBase`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CommonUtilities.GroupingBase`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:CommonUtilities.GuidUtilities">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonUtilities.GuidUtilities.IsGuid(System.Object)">
            <summary>
            判斷是否為GUID格式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.GuidUtilities.IsNoDashGuid(System.Object)">
            <summary>
            判斷是否為GUID格式
            </summary>
            <param name="value"></param>
            <returns></returns>
            <remarks>無Dash格式的Guid</remarks>
        </member>
        <member name="M:CommonUtilities.GuidUtilities.TryParse(System.String,System.Guid@)">
            <summary>
            嘗試轉型為Guid物件
            </summary>
            <param name="value"></param>
            <param name="guid"></param>
            <returns>true 轉型成功, 反之則否</returns>
            <remarks>若轉型失敗, 則<paramref name="guid"/>將會回傳<see cref="F:System.Guid.Empty"/></remarks>
        </member>
        <member name="T:CommonUtilities.HierarchyStructure`1">
            <summary>
            提供給沒無實作<seealso cref="T:CommonUtilities.IHierarchy`1" />卻為階層結構做為承載之用
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:CommonUtilities.HierarchyStructure`1.#ctor(`0)">
            <summary>
            建構式
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:CommonUtilities.HierarchyStructure`1.Item">
            <summary>
            標的物
            </summary>
            <value>
            The item.
            </value>
        </member>
        <member name="P:CommonUtilities.HierarchyStructure`1.Parent">
            <summary>
            Represent target's parent object.
            </summary>
        </member>
        <member name="F:CommonUtilities.HierarchyStructure`1.parent">
            <summary>
            The parent
            </summary>
        </member>
        <member name="P:CommonUtilities.HierarchyStructure`1.Children">
            <summary>
            represent target's children object.
            </summary>
        </member>
        <member name="F:CommonUtilities.HierarchyStructure`1.collectionForChild">
            <summary>
            The collection for child
            </summary>
        </member>
        <member name="M:CommonUtilities.HierarchyStructure`1.Add(CommonUtilities.HierarchyStructure{`0})">
            <summary>
            Add a child object.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:CommonUtilities.HierarchyStructure`1.AddRange(System.Collections.Generic.IEnumerable{CommonUtilities.HierarchyStructure{`0}})">
            <summary>
            Add children objects.
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:CommonUtilities.HierarchyStructure`1.Remove(CommonUtilities.HierarchyStructure{`0})">
            <summary>
            Remove a child object.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.HierarchyStructure`1.RemoveAll(System.Collections.Generic.IEnumerable{CommonUtilities.HierarchyStructure{`0}})">
            <summary>
            Remove all specific children objects.
            </summary>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="P:CommonUtilities.HierarchyStructure`1.HasChildren">
            <summary>
            The object has children.
            </summary>
        </member>
        <member name="M:CommonUtilities.HierarchyStructure`1.Clear">
            <summary>
            Clear all children.
            </summary>
        </member>
        <member name="P:CommonUtilities.HierarchyStructure`1.Root">
            <summary>
            傳回最高階層(根節點)
            </summary>
            <value>
            The root.
            </value>
        </member>
        <member name="P:CommonUtilities.HierarchyStructure`1.Depth">
            <summary>
            傳回物件本身的階層位置
            </summary>
            <remarks>
            Root為0階
            </remarks>
        </member>
        <member name="M:CommonUtilities.HierarchyStructure`1.Find``1(System.Func{CommonUtilities.HierarchyStructure{`0},``0},``0)">
            <summary>
            Find element in the <see cref="T:CommonUtilities.HierarchyStructure`1" />.
            </summary>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="item">Target for find.</param>
            <returns>
            The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySelector" /> or <paramref name="item" /> is a null reference.</exception>
        </member>
        <member name="M:CommonUtilities.HierarchyStructure`1.Find(System.Predicate{CommonUtilities.HierarchyStructure{`0}})">
            <summary>
            Find element in the <see cref="T:CommonUtilities.HierarchyStructure`1" />.
            </summary>
            <param name="match"></param>
            <returns>
            The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match" /> is a null reference.</exception>
        </member>
        <member name="M:CommonUtilities.HierarchyStructure`1.Contains(CommonUtilities.HierarchyStructure{`0})">
            <summary>
            Determines whether an element is in the <see cref="T:CommonUtilities.IHierarchy`1" />.
            </summary>
            <param name="item">The object to locate in the hierarchy.</param>
            <returns>
              <c>true</c> if item is found in the <see cref="T:CommonUtilities.IHierarchy`1" />; otherwise, false.
            </returns>
            <remarks>
            implementation must include all subordinate results.
            </remarks>
        </member>
        <member name="M:CommonUtilities.HierarchyStructure`1.depthCalculate">
            <summary>
            計算<see cref="T:CommonUtilities.IHierarchy`1" />層次
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.HierarchyStructure`1.NavigateDescendant">
            <summary>
            瀏覽所有的後裔.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.HierarchyStructure`1.assertValidParent(CommonUtilities.HierarchyStructure{`0})">
            <summary>
            Asserts the valid parent.
            </summary>
            <param name="arg">The argument.</param>
            <exception cref="T:System.ArgumentException">The argument of ancestors must contains current object(this).;arg</exception>
        </member>
        <member name="F:CommonUtilities.HierarchyStructure`1.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="M:CommonUtilities.HierarchyStructure`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CommonUtilities.HierarchyStructure`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:CommonUtilities.HierarchyStructure`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:CommonUtilities.HierarchyStructure`1" /> class.
            </summary>
        </member>
        <member name="P:CommonUtilities.HierarchyStructure`1.Ancestors">
            <summary>
            直系袓先
            </summary>
        </member>
        <member name="P:CommonUtilities.HierarchyStructure`1.Siblings">
            <summary>
            旁系兄弟
            </summary>
        </member>
        <member name="T:CommonUtilities.HierarchyStructureCollection`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:CommonUtilities.HierarchyStructureCollection`1.#ctor(CommonUtilities.HierarchyStructure{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtilities.HierarchyStructureCollection`1"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="F:CommonUtilities.HierarchyStructureCollection`1.list">
            <summary>
            The list
            </summary>
        </member>
        <member name="M:CommonUtilities.HierarchyStructureCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CommonUtilities.HierarchyStructureCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:CommonUtilities.HierarchyExtension">
            <summary>
            提供階層式結構物件相關工具
            </summary>
        </member>
        <member name="M:CommonUtilities.HierarchyExtension.ReverseHierarchy``1(``0)">
            <summary>
            反轉階層式結構物件為<see cref="T:System.Collections.Generic.IEnumerable`1"/>物件.
            </summary>
            <typeparam name="TEntity"><see cref="T:CommonUtilities.IHierarchy`1"/></typeparam>
            <param name="source"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source is <c>null</c>.</exception>
            <remarks>有執行序不安全的可能性</remarks>
        </member>
        <member name="M:CommonUtilities.HierarchyExtension.DepthCalculate``1(``0)">
            <summary>
            計算<see cref="T:CommonUtilities.IHierarchy`1"/>層次
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="source"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source is <c>null</c>.</exception>
            <remarks>有序列不安全的可能性</remarks>
        </member>
        <member name="T:CommonUtilities.Identifier`1">
            <summary>
            Identifier.
            </summary>
            <typeparam name="TIdType">Id type. </typeparam>
        </member>
        <member name="M:CommonUtilities.Identifier`1.#ctor(`0)">
            <summary>
            Constructor
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:CommonUtilities.Identifier`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:CommonUtilities.Identifier`1.Id">
            <summary>
            識別項
            </summary>
        </member>
        <member name="M:CommonUtilities.Identifier`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize suport.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CommonUtilities.Identifier`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="!:Identifier(Of TIdType)" /> is equal to the current <see cref="!:Identifier(Of TIdType)" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CommonUtilities.Identifier`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.Identifier`1.ToString">
            <summary>
            Returns a string for Id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.Identifier`1.op_Equality(CommonUtilities.Identifier{`0},CommonUtilities.Identifier{`0})">
            <summary>
            Determines whether two specified <see cref="!:Identifier(Of TIdType)"/> objects have the same value.
            </summary>
            <param name="id1"></param>
            <param name="id2"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.Identifier`1.op_Inequality(CommonUtilities.Identifier{`0},CommonUtilities.Identifier{`0})">
            <summary>
            Determines whether two specified <see cref="!:Identifier(Of TIdType)"/> objects have different values. 
            </summary>
            <param name="id1"></param>
            <param name="id2"></param>
            <returns></returns>
        </member>
        <member name="T:CommonUtilities.Identifier">
            <summary>
            Identifier for <c>String</c>.
            </summary>
        </member>
        <member name="M:CommonUtilities.Identifier.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:CommonUtilities.Identifier.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CommonUtilities.Identifier.Equals(CommonUtilities.Identifier)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:CommonUtilities.Identifier.CommonUtilities#IIdentifier{System#String}#Id">
            <summary>
            識別項
            </summary>
        </member>
        <member name="M:CommonUtilities.Identifier.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize suport.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CommonUtilities.Identifier.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:CommonUtilities.Identifier"/> is equal to the current <see cref="T:CommonUtilities.Identifier"/>. 
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.Identifier.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.Identifier.ToString">
            <summary>
            Returns a string for Id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.Identifier.op_Equality(CommonUtilities.Identifier,CommonUtilities.Identifier)">
            <summary>
            Determines whether two specified <see cref="T:CommonUtilities.Identifier"/> objects have the same value.
            </summary>
            <param name="id1"></param>
            <param name="id2"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.Identifier.op_Inequality(CommonUtilities.Identifier,CommonUtilities.Identifier)">
            <summary>
            Determines whether two specified <see cref="T:CommonUtilities.Identifier"/> objects have different values. 
            </summary>
            <param name="id1"></param>
            <param name="id2"></param>
            <returns></returns>
        </member>
        <member name="T:CommonUtilities.ICache`2">
            <summary>
            快取
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TId">The type of the identifier.</typeparam>
        </member>
        <member name="M:CommonUtilities.ICache`2.GetBy(`1)">
            <summary>
            Gets the specified identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="P:CommonUtilities.ICache`2.GetAll">
            <summary>
            Gets all.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CommonUtilities.ICache`2.Source">
            <summary>
            Gets the source. (資料來源)
            </summary>
        </member>
        <member name="M:CommonUtilities.ICache`2.Clear">
            <summary>
            Clears cache.
            </summary>
        </member>
        <member name="E:CommonUtilities.ICache`2.CacheChangedNotify">
            <summary>
            Occurs when [cache changed notify].
            </summary>
        </member>
        <member name="T:CommonUtilities.CacheChangedNotifyEventArgs">
            <summary>
            Cahce change notify event argument class.
            </summary>
        </member>
        <member name="T:CommonUtilities.DataSource`1">
            <summary>
            資料來源
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:CommonUtilities.ICategory">
            <summary>
            
            </summary>
        </member>
        <member name="P:CommonUtilities.ICategory.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:CommonUtilities.ICategory.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:CommonUtilities.ICategory.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is enabled.
            </summary>
            <value>
            <c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonUtilities.ICategory.Path">
            <summary>
            Gets the path.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="T:CommonUtilities.ICloneable`1">
            <summary>
            Supports cloning, which creates a new instance of a class with the same value
            as an existing instance.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CommonUtilities.ICloneable`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:CommonUtilities.ICommand">
            <summary>
            命令執行器
            </summary>
        </member>
        <member name="M:CommonUtilities.ICommand.Execute">
            <summary>
            執行命令
            </summary>
        </member>
        <member name="T:CommonUtilities.IExecuteCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonUtilities.IExecuteCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="T:CommonUtilities.IExecuteCommand`1">
            <summary>
            命令執行器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CommonUtilities.IExecuteCommand`1.Execute(`0)">
            <summary>
            執行命令
            </summary>
        </member>
        <member name="T:CommonUtilities.IIdentificationSchema`2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="T:CommonUtilities.IIdentifier`1">
            <summary>
            識別界面
            </summary>
            <typeparam name="TIdType"></typeparam>
        </member>
        <member name="P:CommonUtilities.IIdentifier`1.Id">
            <summary>
            識別項
            </summary>
        </member>
        <member name="T:CommonUtilities.IHierarchy`1">
            <summary>
            The interface provider hierarchy struct.
            </summary>
            <typeparam name="T">The type of elements in the hierarchy.</typeparam>
        </member>
        <member name="P:CommonUtilities.IHierarchy`1.Parent">
            <summary>
            Return itself's parent object.
            </summary>
        </member>
        <member name="P:CommonUtilities.IHierarchy`1.Children">
            <summary>
            Return children self.
            </summary>
        </member>
        <member name="M:CommonUtilities.IHierarchy`1.Find``1(System.Func{`0,``0},``0)">
            <summary>
            Find element in the <see cref="T:CommonUtilities.IHierarchy`1"/>.
            </summary>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector">A function to extract a key from each element. </param>
            <param name="item">Target for find.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.</returns>
        </member>
        <member name="M:CommonUtilities.IHierarchy`1.Find(System.Predicate{`0})">
            <summary>
            Find element in the <see cref="T:CommonUtilities.IHierarchy`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.</returns>
        </member>
        <member name="M:CommonUtilities.IHierarchy`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:CommonUtilities.IHierarchy`1"/>.
            </summary>
            <param name="item">The object to locate in the hierarchy.</param>
            <returns><c>true</c> if item is found in the <see cref="T:CommonUtilities.IHierarchy`1"/>; otherwise, false. </returns>
            <remarks>implementation must include all subordinate results.</remarks>
        </member>
        <member name="M:CommonUtilities.IHierarchy`1.Add(`0)">
            <summary>
            Add a child object to self.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:CommonUtilities.IHierarchy`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add children to self.
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:CommonUtilities.IHierarchy`1.Remove(`0)">
            <summary>
            Remove child.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.IHierarchy`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove children.
            </summary>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="P:CommonUtilities.IHierarchy`1.HasChildren">
            <summary>
            The object has children.
            </summary>
        </member>
        <member name="M:CommonUtilities.IHierarchy`1.Clear">
            <summary>
            Clear all children.
            </summary>
        </member>
        <member name="P:CommonUtilities.IHierarchy`1.Depth">
            <summary>
            Gets the depth of the instance. 
            </summary>
            <returns>The depth of the node.</returns>
            <remarks>
            Use the Depth property to determine the depth of the instance. The depth represents the number of levels of 
            hierarchy between a node and the root instance. For example, a root instance has a depth of zero. 
            A child of the root node has a depth of one, and so on. 
            </remarks>
        </member>
        <member name="P:CommonUtilities.IHierarchy`1.Ancestors">
            <summary>
            直系袓先
            </summary>
        </member>
        <member name="P:CommonUtilities.IHierarchy`1.Siblings">
            <summary>
            旁系兄弟
            </summary>
        </member>
        <member name="M:CommonUtilities.IHierarchy`1.NavigateDescendant">
            <summary>
            瀏覽所有的後裔.
            </summary>
        </member>
        <member name="T:CommonUtilities.INaming">
            <summary>
            具名界面
            </summary>
        </member>
        <member name="P:CommonUtilities.INaming.Name">
            <summary>
            物件名稱
            </summary>
        </member>
        <member name="T:CommonUtilities.IRepository`2">
            <summary>
            The generic interface for data repository.
            </summary>
            <typeparam name="TEntity">儲存的物件型別</typeparam>
            <typeparam name="TKey">物件的唯一識別碼型別</typeparam>
            <remarks>The interface without <see cref="T:System.Linq.IQueryable`1"/>, 
            if you need with <see cref="T:System.Linq.IQueryable`1"/> you can use <see cref="T:CommonUtilities.IQueryableRepository`2"/> .</remarks>
        </member>
        <member name="M:CommonUtilities.IRepository`2.Create(`0)">
            <summary>        
            Create the domain object in the repository. 
            </summary>
            <param name="obj">領域物件</param>
            <returns>建立在貯藏庫後被賦予的Key值</returns>
        </member>
        <member name="M:CommonUtilities.IRepository`2.FindBy(`1)">
            <summary>
            Find the domain object by the specified key value. 
            </summary>
            <param name="id">物件Key值</param>
            <returns>領域物件</returns>
        </member>
        <member name="M:CommonUtilities.IRepository`2.FetchAll(System.Int32,System.Int32)">
            <summary>
            Fetch all of domain objects in the repository.
            </summary>
            <param name="startIndex">查詢起始筆數</param>
            <param name="count">一次查詢筆數</param>
            <returns>
            領域物件集合
            </returns>
        </member>
        <member name="M:CommonUtilities.IRepository`2.FetchAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32)">
            <summary>
            Fetches all.
            </summary>
            <typeparam name="TColumn">The type of the column.</typeparam>
            <param name="expression">The expression.</param>
            <param name="keySelector">The key selector.</param>
            <param name="startIndex">The start index.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.IRepository`2.Exist(`1)">
            <summary>
            The domain object has contain in repository.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.IRepository`2.Update(`0)">
            <summary>
            Update the domain object in the repository. 
            </summary>
            <param name="entity">欲更新的領域物件</param>
        </member>
        <member name="M:CommonUtilities.IRepository`2.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates the specified entities.
            </summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="M:CommonUtilities.IRepository`2.Delete(`1)">
            <summary>
            Delete the domain object in the repository by specified key value.
            </summary>
            <param name="id">物件Key值</param>
        </member>
        <member name="M:CommonUtilities.IRepository`2.DeleteAll(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Deletes all.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:CommonUtilities.IRepository`2.DeleteAll">
            <summary>
            Delete the domain object in the repository by specified key value.
            </summary>
        </member>
        <member name="T:CommonUtilities.LargeObjectCache`2">
            <summary>
            
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:CommonUtilities.LargeObjectCache`2.cache">
            <summary>
            The cache
            </summary>
        </member>
        <member name="M:CommonUtilities.LargeObjectCache`2.transforToWeakRef(`1)">
            <summary>
            建立弱關連元件
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.LargeObjectCache`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:CommonUtilities.LargeObjectCache`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="P:CommonUtilities.LargeObjectCache`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CommonUtilities.LargeObjectCache`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CommonUtilities.LargeObjectCache`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:CommonUtilities.LargeObjectCache`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:CommonUtilities.LargeObjectCache`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CommonUtilities.LargeObjectCache`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CommonUtilities.LargeObjectCache`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CommonUtilities.LargeObjectCache`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CommonUtilities.LargeObjectCache`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:CommonUtilities.LargeObjectCache`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:CommonUtilities.LargeObjectCache`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CommonUtilities.LargeObjectCache`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CommonUtilities.LargeObjectCache`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CommonUtilities.LargeObjectCache`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:CommonUtilities.ListSerializeForDataContract`1">
            <summary>
            提供裝載DataContract使用的集合物件序列/反序列化
            </summary>
            <typeparam name="T">集合物件的目標型別</typeparam>
        </member>
        <member name="M:CommonUtilities.ListSerializeForDataContract`1.SerializeToString(`0)">
            <summary>
            將<see cref="T:IList`1"/>集合物件序列化為字串
            </summary>
            <param name="list"></param>
            <returns></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><typeparamref name="T"/>為非序列化物件</exception>
        </member>
        <member name="M:CommonUtilities.ListSerializeForDataContract`1.DeserializeFrom(System.String)">
            <summary>
            將承載DataContract物件的集合物件所產生的序列化xml字串反序列化為集合物件.
            </summary>
            <param name="xmlList">The XML list.</param>
            <returns></returns>
        </member>
        <member name="T:CommonUtilities.ListSerializeForDataContract">
            <summary>
            提供裝載DataContract使用的集合物件序列/反序列化
            </summary>
        </member>
        <member name="M:CommonUtilities.ListSerializeForDataContract.SerializeToString``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            將<see cref="T:IList`1"/>集合物件序列化為字串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><typeparamref name="T"/>為非序列化物件</exception>
        </member>
        <member name="M:CommonUtilities.ListSerializeForDataContract.DeserializeFrom``1(System.String,System.Collections.Generic.ICollection{``0})">
            <summary>
            將承載DataContract物件的集合物件所產生的序列化xml字串反序列化為集合物件.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlList"></param>
            <param name="deserializeTo"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CommonUtilities.MailUtilities.Configurations.MailTemplateElementBase" -->
        <member name="P:CommonUtilities.MailUtilities.Configurations.MailTemplateElementBase.CC">
            <summary>
            Gets the carbon copy.
            </summary>
            <value>
            The cc.
            </value>
            <remarks>The attrubite name in element is 'CarbonCopy'</remarks>
        </member>
        <member name="P:CommonUtilities.MailUtilities.Configurations.MailTemplateElementBase.Mailto">
            <summary>
            Gets the mailto.
            </summary>
            <value>
            The mailto.
            </value>
        </member>
        <member name="P:CommonUtilities.MailUtilities.Configurations.MailTemplateElementBase.MailFrom">
            <summary>
            Gets the mail from.
            </summary>
            <value>
            The mail from.
            </value>
        </member>
        <member name="P:CommonUtilities.MailUtilities.Configurations.MailTemplateElementBase.Priority">
            <summary>
            Gets the priority.
            </summary>
            <value>
            The priority.
            </value>
        </member>
        <member name="P:CommonUtilities.MailUtilities.Configurations.MailTemplateElementBase.IsBodyHtml">
            <summary>
            Gets the is body HTML.
            </summary>
            <value>
            The is body HTML.
            </value>
        </member>
        <member name="M:CommonUtilities.MailUtilities.Configurations.MailTemplateElementBase.GetAttributeValue(System.String)">
            <summary>
            Gets the attribute value.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.MailUtilities.Configurations.MailTemplateElementBase.GetAttributeValue``1(System.String)">
            <summary>
            Gets the attribute value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="attributeName">Name of the attribute.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CommonUtilities.MailUtilities.Configurations.MailTemplateElement" -->
        <member name="P:CommonUtilities.MailUtilities.Configurations.MailTemplateElement.TemplatePath">
            <summary>
            Gets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:CommonUtilities.MailUtilities.Configurations.MailTemplateElement.Subject">
            <summary>
            Gets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:CommonUtilities.MailUtilities.Configurations.MailTemplateElement.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:CommonUtilities.MailUtilities.Configurations.MailTemplateElementCollection">
            <summary>
            Mail template element(<seealso cref="T:CommonUtilities.MailUtilities.Configurations.MailTemplateElement" />&gt;) collections
            </summary>
        </member>
        <member name="M:CommonUtilities.MailUtilities.Configurations.MailTemplateElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtilities.MailUtilities.Configurations.MailTemplateElementCollection"/> class.
            </summary>
        </member>
        <member name="P:CommonUtilities.MailUtilities.Configurations.MailTemplateElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:CommonUtilities.MailUtilities.Configurations.MailTemplateElement" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:CommonUtilities.MailUtilities.Configurations.MailTemplateElement" />.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.MailUtilities.Configurations.MailTemplateElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="M:CommonUtilities.MailUtilities.Configurations.MailTemplateElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="M:CommonUtilities.MailUtilities.Configurations.MailTemplateElementCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:CommonUtilities.MailUtilities.Configurations.MailTemplateSection">
            <summary>
            樣板文件名稱
            </summary>
            <remarks>
            get Section 'MailTemplateSection' in 'configuration\configSections' section.
            </remarks>
        </member>
        <member name="P:CommonUtilities.MailUtilities.Configurations.MailTemplateSection.Instance">
            <summary>
            Get MailTemplateSetting Instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:CommonUtilities.MailUtilities.Configurations.MailTemplateSection.MailTemplateElementCollection">
            <summary>
            Gets the file format information.
            </summary>
            <value>
            The file format information.
            </value>
        </member>
        <member name="P:CommonUtilities.MailUtilities.Configurations.MailTemplateSection.MailTemplateDefaultElement">
            <summary>
            Gets the carbon copy.
            </summary>
            <value>
            The cc.
            </value>
            <remarks>The attrubite name in element is 'CarbonCopy'</remarks>
        </member>
        <member name="M:CommonUtilities.MailUtilities.Configurations.MailTemplateSection.GetMailTemplate(System.String)">
            <summary>
            Get MappingInfo Collection
            </summary>
        </member>
        <member name="T:CommonUtilities.MessageResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CommonUtilities.MessageResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CommonUtilities.MessageResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CommonUtilities.MessageResource.ArgumentIsNull">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; can&apos;t be null..
            </summary>
        </member>
        <member name="P:CommonUtilities.MessageResource.ArgumentMustBeTrue">
            <summary>
              Looks up a localized string similar to The condition for argument &apos;{0}&apos; must be true..
            </summary>
        </member>
        <member name="P:CommonUtilities.MessageResource.ArgumentNameIsNullOrEmpty">
            <summary>
              Looks up a localized string similar to The argument name can&apos;t be null or empty..
            </summary>
        </member>
        <member name="P:CommonUtilities.MessageResource.ArgumentNotSameTypeExecption">
            <summary>
              Looks up a localized string similar to The argument is not the same type as this instance..
            </summary>
        </member>
        <member name="P:CommonUtilities.MessageResource.ArgumentNotSameUnitPropertyException">
            <summary>
              Looks up a localized string similar to The argument`s unit is not same type as this..
            </summary>
        </member>
        <member name="P:CommonUtilities.MessageResource.CompositeKey">
            <summary>
              Looks up a localized string similar to Cannot take value one composite key.
            </summary>
        </member>
        <member name="P:CommonUtilities.MessageResource.NullKey">
            <summary>
              Looks up a localized string similar to Cannot have a null key..
            </summary>
        </member>
        <member name="P:CommonUtilities.MessageResource.NumberFormatInfoException">
            <summary>
              Looks up a localized string similar to Only support NumberFormatInfo or ICustomFormatter..
            </summary>
        </member>
        <member name="P:CommonUtilities.MessageResource.ResoveAllFailMessage">
            <summary>
              Looks up a localized string similar to Resolve instances error occured while trying to get all instances of type {0}.
            </summary>
        </member>
        <member name="P:CommonUtilities.MessageResource.ResoveFailMessage">
            <summary>
              Looks up a localized string similar to Resolve instance error occured while trying to get instance of type {0}, key &quot;{1}&quot;.
            </summary>
        </member>
        <member name="T:CommonUtilities.MethodExecutionTimer">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonUtilities.MethodExecutionTimer.CreateInstance(System.Reflection.MethodBase)">
            <summary>
            Creates the instance.
            </summary>
            <param name="info">The information.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.MethodExecutionTimer.TimeStart">
            <summary>
            Times the start.
            </summary>
        </member>
        <member name="M:CommonUtilities.MethodExecutionTimer.TimeEnd">
            <summary>
            Times the end.
            </summary>
        </member>
        <member name="T:CommonUtilities.PagingAssist`1">
            <summary>
            Assist tool for paging query result.
            </summary>
            <typeparam name="T">The type of the elements in the query result.</typeparam>
        </member>
        <member name="M:CommonUtilities.PagingAssist`1.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Construct
            </summary>
            <param name="currentIndex">Current Page Index</param>
            <param name="pageSize">Page Size</param>
            <param name="recordsCount">Total Records</param>
            <param name="target">DataSource</param>
            <exception cref="T:System.ArgumentException">Throw when target count more then page size.</exception>
            <exception cref="T:System.ArgumentException">Throw when pageSize less then zero.</exception>
        </member>
        <member name="P:CommonUtilities.PagingAssist`1.RecordsCount">
            <summary>
            Total Records
            </summary>
        </member>
        <member name="P:CommonUtilities.PagingAssist`1.PageCount">
            <summary>
            Gets page count.
            </summary>
        </member>
        <member name="P:CommonUtilities.PagingAssist`1.CurrentIndex">
            <summary>
            Gets current record index.
            </summary>
        </member>
        <member name="P:CommonUtilities.PagingAssist`1.CurrentPageIndex">
            <summary>
            Gets current page index.
            </summary>
            <remarks>Begin Page is 0</remarks>
        </member>
        <member name="P:CommonUtilities.PagingAssist`1.PageSize">
            <summary>
            Gets page size.
            </summary>
        </member>
        <member name="P:CommonUtilities.PagingAssist`1.Target">
            <summary>
            Gets the data source of query result.
            </summary>
        </member>
        <member name="T:CommonUtilities.PagingAssist">
            <summary>
            Paging assist
            </summary>
        </member>
        <member name="M:CommonUtilities.PagingAssist.Empty``1">
            <summary>
            取得空值
            </summary>
        </member>
        <member name="T:CommonUtilities.Security.Permission">
            <summary>
            許可,  表示一個允許程式碼存取的權限
            </summary>
        </member>
        <member name="P:CommonUtilities.Security.Permission.Name">
            <summary>
            許可名稱
            </summary>
        </member>
        <member name="P:CommonUtilities.Security.Permission.Description">
            <summary>
            說明
            </summary>
        </member>
        <member name="M:CommonUtilities.Security.Permission.Equals(System.Object)">
            <summary>
            Equals. Override by Object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.Security.Permission.Equals(CommonUtilities.Security.Permission)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:CommonUtilities.Security.PermissionAttribute">
            <summary>
            許可特徵屬性
            </summary>
        </member>
        <member name="M:CommonUtilities.Security.PermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
            <summary>
            
            </summary>
        </member>
        <member name="P:CommonUtilities.Security.PermissionAttribute.Name">
            <summary>
            許可名
            </summary>
        </member>
        <member name="P:CommonUtilities.Security.PermissionAttribute.Description">
            <summary>
            許可說明
            </summary>
        </member>
        <member name="M:CommonUtilities.Security.PermissionAttribute.CreateFeaturePermission">
            <summary>
            建立許可
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonUtilities.Security.RolePermission">
            <summary>
            角色許可
            </summary>
        </member>
        <member name="P:CommonUtilities.Security.RolePermission.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:CommonUtilities.Security.RolePermission.Permission">
            <summary>
            許可<seealso cref="P:CommonUtilities.Security.RolePermission.Permission"/>
            </summary>
        </member>
        <member name="M:CommonUtilities.Security.RolePermission.Equals(CommonUtilities.Security.RolePermission)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:CommonUtilities.Security.RolePermissionsProviderBase">
            <summary>
            角色許可提供基礎
            </summary>
        </member>
        <member name="M:CommonUtilities.Security.RolePermissionsProviderBase.FetchPermissions(System.String)">
            <summary>
            取得符合<paramref name="role"/>的許可<see cref="T:CommonUtilities.Security.Permission"/>
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.Security.RolePermissionsProviderBase.RolesInPermission(CommonUtilities.Security.Permission)">
            <summary>
            取得符合<paramref name="permission"/>的角色
            </summary>
            <param name="permission">欲查詢的許可</param>
            <returns>許可的角色</returns>
        </member>
        <member name="M:CommonUtilities.Security.RolePermissionsProviderBase.FetchRolePermissionsBy(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            查詢角色許可<seealso cref="T:CommonUtilities.Security.RolePermission"/>
            </summary>
            <param name="roles"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.Security.RolePermissionsProviderBase.FetchRolePermissionsBy(System.Collections.Generic.IEnumerable{CommonUtilities.Security.Permission})">
            <summary>
            查詢角色許可<seealso cref="T:CommonUtilities.Security.RolePermission"/>
            </summary>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.Security.RolePermissionsProviderBase.FindAllRolePermissionBy(System.Predicate{CommonUtilities.Security.Permission})">
            <summary>
            查詢符可條件的角色許可<seealso cref="T:CommonUtilities.Security.RolePermission"/>
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.Security.RolePermissionsProviderBase.MatchRolePermissionBy(System.String)">
            <summary>
            查詢符可條件許可部份字串的角色許可<seealso cref="T:CommonUtilities.Security.RolePermission"/>
            </summary>
            <param name="partialPermissionName"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.Security.RolePermissionsProviderBase.FindAllPermission(System.Predicate{CommonUtilities.Security.Permission})">
            <summary>
            查詢符可條件許可部份字串的許可<seealso cref="T:CommonUtilities.Security.Permission"/>
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:CommonUtilities.EasyDataContractSerializer`1">
            <summary>
            將DataContract物件序列/反序列化
            </summary>
            <typeparam name="T">物件型別</typeparam>
            <remarks>
            設計為<c>internal</c>目的是為了符合CA1000避免公開界面上的泛型型別有靜態方法的設計, 而造成使用者不易閱讀
            </remarks>
        </member>
        <member name="F:CommonUtilities.EasyDataContractSerializer`1.serializer">
            <summary>
            The serializer
            </summary>
        </member>
        <member name="M:CommonUtilities.EasyDataContractSerializer`1.Serialize(System.Xml.XmlWriter,`0)">
            <summary>
            將物件序列化為串流
            </summary>
            <param name="writer">The writer.</param>
            <param name="entity">要序列化的物件</param>
        </member>
        <member name="M:CommonUtilities.EasyDataContractSerializer`1.SerializeToString(`0)">
            <summary>
            將<see cref="!:T" />物件序列化為字串
            </summary>
            <param name="entity">要序列化的物件</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.EasyDataContractSerializer`1.SerializeToFile(`0,System.String)">
            <summary>
            物件序列化為XML檔案
            </summary>
            <param name="entity">The entity.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:CommonUtilities.EasyDataContractSerializer`1.Deserialize(System.String)">
            <summary>
            將DataContract物件所產生的序列化xml字串反序列化為物件.
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.EasyDataContractSerializer`1.DeserializeFromFile(System.String)">
            <summary>
            將DataContract物件所產生的xml檔案反序列化為物件.
            </summary>
            <param name="xmlFilePath">xml檔案路徑</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.EasyDataContractSerializer`1.Deserialize(System.Xml.XmlReader)">
            <summary>
            將DataContract物件所產生的串流反序列化為物件.
            </summary>
            <param name="reader">反序列化的串流</param>
            <returns></returns>
        </member>
        <member name="T:CommonUtilities.SerializerForDataContract">
            <summary>
            將DataContract物件序列/反序列化
            </summary>
        </member>
        <member name="M:CommonUtilities.SerializerForDataContract.Serialize``1(System.Xml.XmlWriter,``0)">
            <summary>
            將物件序列化為串流
            </summary>
            <typeparam name="T"></typeparam>
            <param name="writer">The writer.</param>
            <param name="entity">要序列化的物件</param>
        </member>
        <member name="M:CommonUtilities.SerializerForDataContract.SerializeToString``1(``0)">
            <summary>
            將<see cref="!:T" />物件序列化為字串
            </summary>
            <typeparam name="T">物件型別</typeparam>
            <param name="entity">要序列化的物件</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.SerializerForDataContract.SerializeToFile``1(``0,System.String)">
            <summary>
            物件序列化為XML檔案
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:CommonUtilities.SerializerForDataContract.Deserialize``1(System.String)">
            <summary>
            將DataContract物件所產生的序列化xml字串反序列化為物件.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml">The XML.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The argument cannot be null, empty or wite space</exception>
        </member>
        <member name="M:CommonUtilities.SerializerForDataContract.DeserializeFromFile``1(System.String)">
            <summary>
            將DataContract物件所產生的xml檔案反序列化為物件.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlFilePath">xml檔案路徑</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The argument cannot be null, empty or wite space</exception>
        </member>
        <member name="M:CommonUtilities.SerializerForDataContract.Deserialize``1(System.Xml.XmlReader)">
            <summary>
            將DataContract物件所產生的串流反序列化為物件.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">反序列化的串流</param>
            <returns></returns>
        </member>
        <member name="T:CommonUtilities.EasyXmlSerializer`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CommonUtilities.EasyXmlSerializer`1.Serialize(System.Xml.XmlWriter,`0)">
            <summary>
            將物件序列化為串流
            </summary>
            <param name="writer">The writer.</param>
            <param name="entity">要序列化的物件</param>
        </member>
        <member name="M:CommonUtilities.EasyXmlSerializer`1.SerializeToString(`0)">
            <summary>
            將<see cref="!:T" />物件序列化為字串
            </summary>
            <param name="entity">要序列化的物件</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.EasyXmlSerializer`1.SerializeToFile(`0,System.String)">
            <summary>
            物件序列化為XML檔案
            </summary>
            <param name="entity">The entity.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:CommonUtilities.EasyXmlSerializer`1.Deserialize(System.String)">
            <summary>
            將DataContract物件所產生的序列化xml字串反序列化為物件.
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.EasyXmlSerializer`1.DeserializeFromFile(System.String)">
            <summary>
            將DataContract物件所產生的xml檔案反序列化為物件.
            </summary>
            <param name="xmlFilePath">xml檔案路徑</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtilities.EasyXmlSerializer`1.Deserialize(System.Xml.XmlReader)">
            <summary>
            將DataContract物件所產生的串流反序列化為物件.
            </summary>
            <param name="reader">反序列化的串流</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CommonUtilities.AsyncHelpers.RunSync(System.Func{System.Threading.Tasks.Task})" -->
        <!-- Badly formed XML comment ignored for member "M:CommonUtilities.AsyncHelpers.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})" -->
        <member name="T:Common.Cryptography.StringGenerateRule">
            <summary>
            String generator rule
            </summary>
        </member>
        <member name="M:Common.Cryptography.StringGenerateRule.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            String generate rule constructor.
            </summary>
            <param name="max"></param>
            <param name="min"></param>
            <param name="digit"></param>
            <param name="upperCase"></param>
            <param name="lowerCase"></param>
            <param name="symbol"></param>
        </member>
        <member name="M:Common.Cryptography.StringGenerateRule.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            String generate rule constructor.
            </summary>
            <param name="max"></param>
            <param name="min"></param>
            <param name="digit"></param>
            <param name="upperCase"></param>
            <param name="lowerCase"></param>
            <param name="symbol"></param>
            <param name="exclude"></param>
        </member>
        <member name="F:Common.Cryptography.StringGenerateRule.OftenExcludedCharacters">
            <summary>
            '0', 'o', 'O', 'I', '1', 'l', 'U', 'u', 'V', 'v'
            </summary>
        </member>
        <member name="P:Common.Cryptography.StringGenerateRule.MaximumLength">
            <summary>
            Maximum length
            </summary>
        </member>
        <member name="P:Common.Cryptography.StringGenerateRule.MinimumLength">
            <summary>
            Gets or sets the minimum required password length.
            </summary>
        </member>
        <member name="P:Common.Cryptography.StringGenerateRule.IncludeDigit">
            <summary>
            Gets or sets whether the password requires a numeric digit ('0' - '9').
            Default is true.
            </summary>
        </member>
        <member name="P:Common.Cryptography.StringGenerateRule.IncludeLowercase">
            <summary>
            Gets or sets whether the password requires a lower case letter ('a' - 'z').
            Default is true.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Common.Cryptography.StringGenerateRule.IncludeSymbol" -->
        <member name="P:Common.Cryptography.StringGenerateRule.IncludeUppercase">
            <summary>
            Gets or sets whether the password requires an upper case letter ('A' - 'Z'). 
            Default is true.
            </summary>
        </member>
        <member name="P:Common.Cryptography.StringGenerateRule.ExcludeCharacters">
            <summary>
            Exclude characters.
            </summary>
        </member>
        <member name="M:Common.Cryptography.StringGenerateRule.MaxAndMinLengthAreSame">
            <summary>
            MaximumLength and MinimumLength are same;
            </summary>
            <returns></returns>
        </member>
        <member name="T:Common.Cryptography.StringGenerator">
            <summary>
            String generator
            </summary>
        </member>
        <member name="M:Common.Cryptography.StringGenerator.#ctor(Common.Cryptography.StringGenerateRule)">
            <summary>
            
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:Common.Cryptography.StringGenerator.Generate">
            <summary>
            Generate string by <seealso cref="T:Common.Cryptography.StringGenerateRule"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Cryptography.StringGenerator.Generate(Common.Cryptography.StringGenerateRule)">
            <summary>
            Generate string by <seealso cref="T:Common.Cryptography.StringGenerateRule"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Cryptography.StringGenerator.GenerateStringForInternet(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Generate string for internet sending
            </summary>
            <param name="maxLength"></param>
            <param name="minLength"></param>
            <returns></returns>
            <remarks>
            Those characters for generate will all in base64 characters;
            But not base64 standard.
            </remarks>
        </member>
        <member name="T:Common.Cryptography.NormalDistributionRandom">
            <summary>
            Normal distribution random utilities.
            </summary>
        </member>
        <member name="P:Common.Cryptography.NormalDistributionRandom.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="M:Common.Cryptography.NormalDistributionRandom.GetBytes(System.Int32)">
            <summary>
            Get non-zero bytes by specify length.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Cryptography.NormalDistributionRandom.GetNonzeroBytes(System.Int32)">
            <summary>
            Generate non-zero bytes
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Cryptography.NormalDistributionRandom.GetNumber">
            <summary>
            Returns a non-negative random integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Cryptography.NormalDistributionRandom.GetNumber(System.Int32)">
            <summary>
            Returns a non-negative random integer that is less than the specified maximum.
            </summary>
            <param name="max"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The value less than zero</exception>
        </member>
        <member name="M:Common.Cryptography.NormalDistributionRandom.GetNumber(System.Int32,System.Int32)">
            <summary>
            Returns a random integer that is within a specified range. (Include negative value)
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
            <remarks>The GetNumber(Int32, Int32) overload returns RandomUtilities that range from minValue to maxValue – 1. 
            However, if maxValue equals minValue, the method returns minValue.
            Unlike the other overloads of the GetNumber method, which return only non-negative values, this method can return a negative random integer.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">minValue is greater than maxValue. or maxValue </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value less than zero</exception>
        </member>
        <member name="T:Common.BinaryGenerator">
            <summary>
            二進位
            </summary>
        </member>
        <member name="M:Common.BinaryGenerator.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            建構式
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Common.Utilities.ByteArrayExtension">
            <summary>
            Byte array Extnesion
            </summary>
            <remarks>
            {8 hex code}{3 chars for split}{47 hex code for data}{3 chars for split}{16 (bytes) per line to ascii text}
            </remarks>
        </member>
        <member name="M:Common.Utilities.ByteArrayExtension.ToHexString(System.Byte[])">
            <summary>
            Convert bytes to hex code.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Utilities.ByteArrayExtension.FromHexString(System.String)">
            <summary>
            Convert hex code to bytes.
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Utilities.ByteArrayExtension.PrettyFormat(System.Byte[])">
            <summary>
            byte array pretty format
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Utilities.ByteArrayExtension.PrettyFormat(System.Byte[],System.Int32,System.Int32)">
            <summary>
            byte array pretty format
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Utilities.ByteArrayExtension.EqualTo(System.Byte[],System.Byte[])">
            <summary>
            Compare to two values are equal.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="T:Common.utilities.PeriodicTaskFactory">
            <summary>
            Factory class to create a periodic Task to simulate a <see cref="T:System.Threading.Timer"/> using <see cref="T:System.Threading.Tasks.Task">Tasks.</see>
            </summary>
        </member>
        <member name="M:Common.utilities.PeriodicTaskFactory.Start(System.Action,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Starts the periodic task.
            </summary>
            <param name="action">The action.</param>
            <param name="intervalInMilliseconds">The interval in milliseconds.</param>
            <param name="delayInMilliseconds">The delay in milliseconds, i.e. how long it waits to kick off the timer.</param>
            <param name="duration">The duration.
            <example>If the duration is set to 10 seconds, the maximum time this task is allowed to run is 10 seconds.</example></param>
            <param name="maxIterations">The max iterations.</param>
            <param name="synchronous">if set to <c>true</c> executes each period in a blocking fashion and each periodic execution of the task
            is included in the total duration of the Task.</param>
            <param name="cancelToken">The cancel token.</param>
            <param name="periodicTaskCreationOptions"><see cref="T:System.Threading.Tasks.TaskCreationOptions"/> used to create the task for executing the <see cref="T:System.Action"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/></returns>
            <remarks>
            Exceptions that occur in the <paramref name="action"/> need to be handled in the action itself. These exceptions will not be 
            bubbled up to the periodic task.
            </remarks>
        </member>
        <member name="M:Common.utilities.PeriodicTaskFactory.performPeriodicTaskAction(System.Int32,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken,System.Diagnostics.Stopwatch,System.Boolean,System.Action,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Mains the periodic task action.
            </summary>
            <param name="intervalInMilliseconds">The interval in milliseconds.</param>
            <param name="delayInMilliseconds">The delay in milliseconds.</param>
            <param name="duration">The duration.</param>
            <param name="maxIterations">The max iterations.</param>
            <param name="cancelToken">The cancel token.</param>
            <param name="stopWatch">The stop watch.</param>
            <param name="synchronous">if set to <c>true</c> executes each period in a blocking fashion and each periodic execution of the task
            is included in the total duration of the Task.</param>
            <param name="wrapperAction">The wrapper action.</param>
            <param name="periodicTaskCreationOptions"><see cref="T:System.Threading.Tasks.TaskCreationOptions"/> used to create a sub task for executing the <see cref="T:System.Action"/>.</param>
        </member>
        <member name="M:Common.utilities.PeriodicTaskFactory.checkIfCancelled(System.Threading.CancellationToken)">
            <summary>
            Checks if cancelled.
            </summary>
            <param name="cancelToken">The cancel token.</param>
        </member>
        <member name="T:CommonDomain.TimePeriod">
            <summary>
            時間區間結構(struct), 提供一段時間的起迄, 並可判斷指定的時間是否落於此區間.
            若一TimePeriod無指定起迄日期時，表示該區間為無限大; 
            若僅指定起始日期時間, 而未指定終止日期時間(null)時, 該區期則表示從指定的日期時間之後所有的時間(即after);
            若僅指定終止日期時間, 而未指定起始日期時間(null)時, 該區期則表示為指定的日期時間之前的所有時間(即before).
            </summary>
            <remarks>
            <c>特別注意：</c>
            在<see cref="T:CommonDomain.TimePeriod"/>中, Begin以及End皆包含Date(日期) 與 Time(時間), 故在生活中常見的一年為2014/1/1 ~ 2014/12/31, 在使用時必須是：
            <code>TimePeriod period new TimePeriod(new DateTime(2014, 1, 1), new DateTime(2014, 12, 31, 23, 59, 59, 999));</code>
            或著是：
            <code>TimePeriod period new TimePeriod(new DateTime(2014, 1, 1), new DateTime(2015, 1, 1));</code>
            而非
            <code>TimePeriod period new TimePeriod(new DateTime(2014, 1, 1), new DateTime(2014, 12, 31));</code>
            這是因為new DateTime(2014, 12, 31)在.Net Framework預設上是2014年12月31日0時0分0秒, 如此一來, 則該<see cref="T:CommonDomain.TimePeriod"/>不包含該日(即2014/12/31). 
            更多相關資訊, 請參閱<seealso cref="M:CommonDomain.TimePeriod.HasWithin(CommonDomain.TimePeriod)"/>.
            </remarks>
        </member>
        <member name="F:CommonDomain.TimePeriod._begin">
            <summary>
            Begin datetime<seealso cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:CommonDomain.TimePeriod._end">
            <summary>
            End datetime<seealso cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:CommonDomain.TimePeriod.CreateSomeDateBefore(System.DateTime)">
            <summary>
            建立並回傳一個日期區間, 該區間含蓋了指定的日期之前所有的區間.
            </summary>
            <param name="someDate">指定日期<seealso cref="T:System.DateTime"/></param>
            <returns>一個特定日期之前的日期區間<see cref="T:CommonDomain.TimePeriod"/></returns>
            <remarks>
            例如指定日期(someDate)為2006/12/31, 則該區間則表示2006/12/31日之前
            </remarks>
        </member>
        <member name="M:CommonDomain.TimePeriod.CreateSomeDateAfter(System.DateTime)">
            <summary>
            建立並回傳一個日期區間, 該區間含蓋了指定的日期之後所有的區間
            </summary>
            <param name="someDate">指定日期<seealso cref="T:System.DateTime"/></param>
            <returns>一個特定日期之前的日期區間<see cref="T:CommonDomain.TimePeriod"/></returns>
            <remarks>
            例如指定日期(someDate)為2006/1/1, 則該區間則表示2006/1/1日起至其後的所有日期
            </remarks>
        </member>
        <member name="M:CommonDomain.TimePeriod.#ctor(System.DateTime,System.DateTime)">
            <summary>
            建構式, 可輸入以DateTime<seealso cref="T:System.DateTime"/>為格式做為起迄區間.
            </summary>
            <param name="begin">Begin time in the period.<seealso cref="T:System.DateTime"/></param>
            <param name="end">End time in the period.<seealso cref="T:System.DateTime"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Throw when start time after then end time.</exception>
        </member>
        <member name="M:CommonDomain.TimePeriod.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            建構式, 可輸入以DateTime<seealso cref="T:System.DateTime"/>為格式做為起迄區間.
            </summary>
            <param name="begin">Begin time in the period. If the value is null, that mean the period is end date before.</param>
            <param name="end">End time in the period. If the value is null, that mean is period is date to end.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Throw when start time after then end time.</exception>
        </member>
        <member name="P:CommonDomain.TimePeriod.Begin">
            <summary>
            時間區間的起始設定.
            </summary>
        </member>
        <member name="P:CommonDomain.TimePeriod.End">
            <summary>
            時間區間的終止設定.
            </summary>
        </member>
        <member name="P:CommonDomain.TimePeriod.IsNull">
            <summary>
            判斷是否為空物件(即無限期間Begin及End皆為null.)
            </summary>
        </member>
        <member name="P:CommonDomain.TimePeriod.IsInfinitePeriod">
            <summary>
            是否為無限的期間(即Begin或End欄位有一個以上為Null)
            </summary>
        </member>
        <member name="P:CommonDomain.TimePeriod.IsFinitePeriod">
            <summary>
            是否為有限的期間
            </summary>
        </member>
        <member name="P:CommonDomain.TimePeriod.Days">
            <summary>
            回傳起迄區間的天數
            </summary>
            <remarks>
            若區間不可量化, 則會拋出一個NotFiniteNumberException.
            </remarks>	    
        </member>
        <member name="P:CommonDomain.TimePeriod.TotalDays">
            <summary>
            回傳起迄區間的精準天數
            </summary>	    
            <remarks>
            若區間不可量化, 則會拋出一個NotFiniteNumberException.
            </remarks>	    
        </member>
        <member name="P:CommonDomain.TimePeriod.Months">
            <summary>
            回傳起迄區間的月數.
            </summary>
            <remarks>
            若區間不可量化, 則會拋出一個NotFiniteNumberException.
            </remarks>	    
        </member>
        <member name="P:CommonDomain.TimePeriod.Years">
            <summary>
            回傳起迄區間的年數
            </summary>
            <remarks>
            若區間不可量化, 則會拋出一個NotFiniteNumberException.
            </remarks>
        </member>
        <member name="P:CommonDomain.TimePeriod.MonthModuloAnYear">
            <summary>
            回傳起迄日期之間的月數, 並扣除年份. 即期間總月數求12(months)的餘數
            </summary>
            <remarks>
            例如: 起為2004/10/1 迄為2006/5/1, 回傳為7.
            本方法可用於年資.
            若區間不可量化, 則會拋出一個NotFiniteNumberException.
            </remarks>
        </member>
        <member name="P:CommonDomain.TimePeriod.Duration">
            <summary>
            回傳起迄日期間的TimeSpan
            </summary>
            若區間不可量化, 則會拋出一個NotFiniteNumberException.
        </member>
        <member name="P:CommonDomain.TimePeriod.IsValidCalculate">
            <summary>
            傳回該區間是否為一合法可量化的數字
            </summary>
        </member>
        <member name="P:CommonDomain.TimePeriod.IsSomeDateBefore">
            <summary>
            是否為某日之前. 即有終止日, 但無起始日
            </summary>
        </member>
        <member name="P:CommonDomain.TimePeriod.IsSomeDateAfter">
            <summary>
            是否為某日之後. 即有起始日, 但無終止日
            </summary>
        </member>
        <member name="P:CommonDomain.TimePeriod.InitialNullTimePeriod">
            <summary>
            生成空物件時間區間
            </summary>
        </member>
        <member name="M:CommonDomain.TimePeriod.IsNullObject(CommonDomain.TimePeriod)">
            <summary>
            
            </summary>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.TimePeriod.CompareTo(System.Object)">
             <summary>
             Compares this instance to a specified object and returns an indication of their relative values.
             </summary>
             <param name="obj">An object to comparer, or a null reference.</param>
             <returns>A signed number indicating the relative values of this instance and target.</returns>
             <remarks>
             	<list type="bullet">
            		<listheader>
            			<term>Return Value</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>The value of this instance is less than the value of target.</description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>The value of this instance is equal to the value of target.</description>
            		</item>	
            		<item>
            			<term>Greater than zero</term>
            			<description>The value of this instance is greater than the value of target. -or-
            				target is a null reference 
            			</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="M:CommonDomain.TimePeriod.CompareTo(System.DateTime)">
            <summary>
            比較指定的物件是否比目前物件
            </summary>
            <param name="dt">指定做為比較對象的DateTime.</param>
            <returns>回傳一個整數</returns>
            <remarks>
            	<list type="bullet">
            	<listheader>
            		<term>Return Value</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>Less than zero</term>
            		<description>The value of this instance is less than the value of target.</description>
            	</item>
            	<item>
            		<term>Zero</term>
            		<description>
                        The value of this instance is overlap to the value of target.(That could be not equal.)
                    </description>
            	</item>	
            	<item>
            		<term>Greater than zero</term>
            		<description>The value of this instance is greater than the value of target. -or-
            			target is a null reference 
            		</description>
            	</item>
            </list>
            當回傳0是並非代表兩個相等, 僅代表兩者有overlap. 即HasOverlap為true.
            </remarks>
        </member>
        <member name="M:CommonDomain.TimePeriod.CompareTo(CommonDomain.TimePeriod)">
             <summary>
             
             </summary>
             <param name="another">指定做為比較對象的TimePeriod.</param>
             <returns>回傳一個整數</returns>
             <remarks>
             	<list type="bullet">
            		<listheader>
            			<term>Return Value</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>The value of this instance is less than the value of target.</description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                         The value of this instance is overlap to the value of target.(That could be not equal.)
                     </description>
            		</item>	
            		<item>
            			<term>Greater than zero</term>
            			<description>The value of this instance is greater than the value of target. -or-
            				target is a null reference 
            			</description>
            		</item>
            	</list>
             當回傳0是並非代表兩個相等, 僅代表兩者有overlap(即HasOverlap為true), 並不代表兩者相等(IsEqual為true).
            </remarks>
        </member>
        <member name="M:CommonDomain.TimePeriod.HasOverlap(System.Object)">
            <summary>
            回傳一個布林值, 判斷指定的物件是否於目前的TimePeriod有重疊(交集).
            </summary>
            <param name="value">指定做為比較對象的object.</param>
            <returns>
            回傳true表示有重疊. 若回傳false則無重疊. 
            </returns>
        </member>
        <member name="M:CommonDomain.TimePeriod.HasOverlap(CommonDomain.TimePeriod)">
            <summary>
            回傳一個布林值, 判斷指定的物件是否於目前的TimePeriod有重疊(交集).
            </summary>
            <param name="another">指定做為比較對象的TimePeriod.</param>
            <returns>回傳true表示有重疊. 若回傳false則無重疊.</returns>
        </member>
        <member name="M:CommonDomain.TimePeriod.HasLessThen(CommonDomain.TimePeriod)">
            <summary>
            Compares the current instance less then another value object.
            </summary>
            <param name="another">指定做為被比較的對象</param>
            <returns>True is means the TimePeriod object less then another.</returns>
            <remarks>
            比較方式為物件本身的終止日期是否小於被比較物件(another)的起始日期. 依各情形之比較結果見下列表格.
                <list type="table">
                    <listheader>
                        <term>項目</term>
                        <description>說明</description>
                    </listheader>
                    <item>
                        <term>1.</term>
                        <description>
                            若物件本身的終止日期小於被比較的物件(another)之起始日期, 則傳回True. 否則傳回False.
                        </description>
                    </item>
                    <item>
                        <term>2.</term>
                        <description>
                            若物件本身的終止日期與被比較的物件(another)之起始日期皆為null值, 則回傳false.該情形屬於Overlap.
                        </description>
                    </item>
                    <item>
                        <term>3.</term>
                        <description>
                            若物件本身的終止日期為null, 被比較的物件(another)之起始日期為一般日期(即不為null值), 則回傳false.該情形屬於Overlap.
                        </description>
                    </item>
                    <item>
                        <term>4.</term>
                        <description>
                            若物件本身的終止日期為一般日期(即不為null值), 被比較的物件(another)之起始日期為null, 則回傳false.該情形屬於Overlap.
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:CommonDomain.TimePeriod.HasLessThen(System.DateTime)">
            <summary>
            Overload. 判斷該區間是否小於所指定的日期, 當Instance小於時，則不可能會有overlap情形.
            </summary>
            <param name="dt">指定被比較的日期<see cref="T:System.DateTime"/></param>
            <returns>true表是小於指定的日期, false則否.</returns>
            <remarks>
            比較方法為Instance的終止日期要大於指定日期.
            </remarks>
        </member>
        <member name="M:CommonDomain.TimePeriod.HasMoreThen(System.DateTime)">
            <summary>
            判斷本區間是否大於所指定的日期, 當Instance大於時，則不可能會有overlap情形.
            </summary>
            <param name="dt"></param>
            <returns>true表示大於指定的日期, 若回傳flase則否.(可能小於或等於)</returns>
            <remarks>
            比較方法為Instance的起始日期要小於指定日期
            </remarks>
        </member>
        <member name="M:CommonDomain.TimePeriod.HasMoreThen(CommonDomain.TimePeriod)">
            <summary>
            Compares the current instance more then another value object.
            </summary>
            <param name="another">指定做為被比較的對象</param>
            <returns>True is means the TimePeriod object more then another.</returns>
            <remarks>
            比較方式為物件本身的起始日期是否大於被比較物件(another)的終止日期. 依各情形之比較結果見下列表格.
                <list type="table">
                    <listheader>
                        <term>項目</term>
                        <description>說明</description>
                    </listheader>
                    <item>
                        <term>1.</term>
                        <description>
                            若物件本身的起始日期大於被比較的物件(another)之終止日期, 則傳回True. 否則傳回False.
                        </description>
                    </item>
                    <item>
                        <term>2.</term>
                        <description>
                            若物件本身的起始日期與被比較的物件(another)之終止日期皆為null值, 則回傳false.該情形屬於Overlap.
                        </description>
                    </item>
                    <item>
                        <term>3.</term>
                        <description>
                            若物件本身的起始日期為null, 被比較的物件(another)之終止日期為一般日期(即不為null), 則回傳false.該情形屬於Overlap.
                        </description>
                    </item>
                    <item>
                        <term>4.</term>
                        <description>
                            若物件本身的起始日期為為一般日期(即不為null), 被比較的物件(another)之終止日期為null值, 則回傳false.該情形屬於Overlap.
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:CommonDomain.TimePeriod.HasWithin(CommonDomain.TimePeriod)">
            <summary>
            Compares the current instance within another value object of the same type.
            </summary>
            <param name="another">指定做為比較對象的TimePeriod.</param>
            <returns>True 為指定的TimePeriod被包含於目前的TimePeriod中; 若為false, 則不完全被包含.</returns>
            <remarks>
            被比較物件(another)是否完全包含在本物件中. 
            比較方式為本物件的起始日期小於或等於another物件的起始日期, 同時本物件的終止日期大於或等於another物件的終止日期.
            若物件本身的起迄日期皆為null, 則不論所傳入的區間為何, 皆固定傳回true.
            當another被完全包含在本物件時, 兩個<seealso cref="T:CommonDomain.TimePeriod"/> 物件間必然有重疊(HasOverlap == true);
            但兩物件有重疊時, 未必代表another被完全地包含於本物件中.
            </remarks>
        </member>
        <member name="M:CommonDomain.TimePeriod.HasWithin(System.DateTime)">
            <summary>
            判斷指定的DateTime是否完全被包含於目前的DateTime中.
            </summary>
            <param name="dt">指定做為比較對象的DateTime.</param>
            <returns>True 為指定的DateTime被包含於目前的TimePeriod中; 若為false, 則不完全被包含.</returns>
            <remarks>
            被比較物件<seealso cref="T:System.DateTime"/>(dt)是否被完全包含在本物件中, 
            比較方式為dt大於或等於本物件的起於日期, 同時dt要小於但不等於本物件的終止日期.
            True 為指定的DateTime被包含於目前的TimePeriod中; 若為false, 則不完全被包含.完全包含.
            若物件本身的起始或終止日期其中有一個或兩者皆為null, 則dt必定被包含於本物件中(即傳回<see cref="T:System.Boolean">true</see>.
            </remarks>
            <example>
            以日期2014/08/12為例，該日做為起始日2014/08/12 00:00:000，期間為一天，那終止日即為2014/08/13 00:00:000.
            那傳入2014/08/12 00:00:000, 將回傳true. 傳入2014/08/13 00:00:000將回傳false.
            <code>
            DateTime begin = new DateTime(2014,8,12,0,0,0);
            DateTime end = begin.AddDays(1);
            var period = new TimePeriod(begin, end);
            Assert.True(period.HasWithin(begin));
            Assert.False(period.HasWithin(end));
            Assert.True(period.HasWithin(begin.AddMinutes(30)));
            Assert.True(period.HasWithin(end.AddMilliseconds(-1)));
            Assert.False(period.HasWithin(begin.AddMilliseconds(-1)));
            </code>
            </example>
        </member>
        <member name="M:CommonDomain.TimePeriod.Equals(CommonDomain.TimePeriod)">
            <summary>
            Determines whether two TimePeriod instances are equal. 
            </summary>
            <param name="other">The Object to comparer with the current Object.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:CommonDomain.TimePeriod.IntersectWith(CommonDomain.TimePeriod)">
            <summary>
            取得交集區間
            </summary>
            <param name="other"></param>
            <returns>若有交集, 則回傳交集區間; 反之, 回傳一空<see cref="P:CommonDomain.TimePeriod.InitialNullTimePeriod"/></returns>
        </member>
        <member name="M:CommonDomain.TimePeriod.assertFinitePeriod">
            <summary>
            斷言起迄區間為有限的區間
            </summary>
        </member>
        <member name="M:CommonDomain.TimePeriod.Equals(System.Object)">
            <summary>
            Determines whether two Object instances are equal. 
            </summary>
            <param name="obj">The Object to comparer with the current Object.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:CommonDomain.TimePeriod.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:CommonDomain.TimePeriod.op_Inequality(CommonDomain.TimePeriod,CommonDomain.TimePeriod)">
            <summary>
            判斷兩個時間區間是否不相等
            </summary>
            <param name="arg1">時間區間1</param>
            <param name="arg2">時間區間2</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.TimePeriod.op_Equality(CommonDomain.TimePeriod,CommonDomain.TimePeriod)">
            <summary>
            判斷兩個時間區間完全相等
            </summary>
            <param name="arg1">時間區間1</param>
            <param name="arg2">時間區間2</param>
            <returns>
            </returns>
        </member>
        <member name="M:CommonDomain.TimePeriod.op_LessThan(CommonDomain.TimePeriod,CommonDomain.TimePeriod)">
            <summary>
            比較時間區間是否小於另一個時間於間
            </summary>
            <param name="arg1">時間區間1</param>
            <param name="arg2">時間區間2</param>
            <returns>True 表示小於, 反之則大於</returns>
        </member>
        <member name="M:CommonDomain.TimePeriod.op_GreaterThan(CommonDomain.TimePeriod,CommonDomain.TimePeriod)">
            <summary>
            比較時間區間是否大於另一個時間於間
            </summary>
            <param name="arg1">時間區間1</param>
            <param name="arg2">時間區間2</param>
            <returns>True 表示大於, 反之則小於</returns>
        </member>
        <member name="T:CommonDomain.AbstractDomain`1">
            <summary>
            If the domain class belong to reference type, and use the property 'Id' to be the object identifier,
            please inherit this abstract class.
            </summary>
            <remarks>注意：假如兩個物件都沒有被賦予Id, 則會被視為相同的物件。</remarks>
        </member>
        <member name="M:CommonDomain.AbstractDomain`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonDomain.AbstractDomain`1"/> class.
            </summary>
        </member>
        <member name="M:CommonDomain.AbstractDomain`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonDomain.AbstractDomain`1"/> class.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="P:CommonDomain.AbstractDomain`1.Id">
            <summary>
            識別
            </summary>
        </member>
        <member name="M:CommonDomain.AbstractDomain`1.Equals(CommonDomain.AbstractDomain{`0})">
            <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.AbstractDomain`1.Equals(System.Object)">
            <summary>
            Overrided. Determines whether the specified Object is equal to the current Object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.AbstractDomain`1.GetHashCode">
            <summary>
            Overrided. Serves as a hash function for a particular type. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.AbstractDomain`1.ToString">
            <summary>
            Overrided. Returns a string that represents the current object Id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.AbstractDomain`1.op_Equality(CommonDomain.AbstractDomain{`0},CommonDomain.AbstractDomain{`0})">
            <summary>
            For predefined value types, the equality operator (==) returns true if the values of its operands are equal, false otherwise.
            </summary>
            <param name="domain1">比較識別1</param>
            <param name="domain2">比較識別2</param>
            <returns>Returns true if the values of its operands are equal, false otherwise.</returns>
        </member>
        <member name="M:CommonDomain.AbstractDomain`1.op_Inequality(CommonDomain.AbstractDomain{`0},CommonDomain.AbstractDomain{`0})">
            <summary>
            
            </summary>
            <param name="domain1"></param>
            <param name="domain2"></param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.AbstractDomain">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonDomain.Accountability`1">
            <summary>
            責任關係務件,提供兩個<see cref="!:IParty"/>關的任主從關係
            </summary>
        </member>
        <member name="M:CommonDomain.Accountability`1.#ctor(CommonDomain.IParty{`0},CommonDomain.IParty{`0})">
            <summary>
            建構式
            </summary>
            <param name="commissioner"></param>
            <param name="responsible"></param>
        </member>
        <member name="M:CommonDomain.Accountability`1.#ctor(CommonDomain.IParty{`0},CommonDomain.IParty{`0},CommonDomain.AccountabilityType,CommonDomain.TimePeriod)">
            <summary>
            建構式
            </summary>
            <param name="commissioner"></param>
            <param name="responsible"></param>
            <param name="type"></param>
            <param name="period"></param>
        </member>
        <member name="P:CommonDomain.Accountability`1.Type">
            <summary>
            責任類型
            </summary>
        </member>
        <member name="P:CommonDomain.Accountability`1.Period">
            <summary>
            時間區間
            </summary>
        </member>
        <member name="P:CommonDomain.Accountability`1.Commissioner">
            <summary>
            委託方
            </summary>
        </member>
        <member name="P:CommonDomain.Accountability`1.Responsible">
            <summary>
            責任方
            </summary>
        </member>
        <member name="T:CommonDomain.Accountability`3">
            <summary>
            責任關係務件,提供兩個<see cref="!:Party`1&lt;TID&gt;" />關的任主從關係
            </summary>
            <typeparam name="TCommissioner">The type of the commissioner.</typeparam>
            <typeparam name="TResponsible">The type of the responsible.</typeparam>
            <typeparam name="TId">The type of the identifier.</typeparam>
        </member>
        <member name="P:CommonDomain.Accountability`3.Type">
            <summary>
            責任類型
            </summary>
        </member>
        <member name="P:CommonDomain.Accountability`3.Period">
            <summary>
            時間區間
            </summary>
        </member>
        <member name="P:CommonDomain.Accountability`3.Commissioner">
            <summary>
            委託方
            </summary>
        </member>
        <member name="P:CommonDomain.Accountability`3.Responsible">
            <summary>
            責任方
            </summary>
        </member>
        <member name="T:CommonDomain.Address">
            <summary>
            提供位置、地址等表示物件
            </summary>
        </member>
        <member name="M:CommonDomain.Address.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonDomain.Address"/> class.
            </summary>
            <param name="country">The country.</param>
            <param name="state">The state.</param>
            <param name="city">The city.</param>
            <param name="town">The town.</param>
            <param name="street">The street.</param>
            <param name="houseNumbering">The house numbering.</param>
            <param name="postalCode">The postal code.</param>
        </member>
        <member name="M:CommonDomain.Address.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonDomain.Address"/> struct.
            </summary>
            <param name="city">The city.</param>
            <param name="town">The town.</param>
            <param name="street">The street.</param>
            <param name="houseNumbering">The house numbering.</param>
        </member>
        <member name="P:CommonDomain.Address.Country">
            <summary>
            國家名
            </summary>
        </member>
        <member name="P:CommonDomain.Address.State">
            <summary>
            洲名
            </summary>
        </member>
        <member name="P:CommonDomain.Address.PostalCode">
            <summary>
            郵遞區號 (Zip Code)
            </summary>
        </member>
        <member name="P:CommonDomain.Address.City">
            <summary>
            城市名稱.
            </summary>
        </member>
        <member name="P:CommonDomain.Address.Town">
            <summary>
            郡名稱存取
            </summary>
            <remarks>鄉、市、鎮、區</remarks>
        </member>
        <member name="P:CommonDomain.Address.Street">
            <summary>
            路、街
            </summary>
            <remarks>
            <c>相容性議題</c>：
            為了與中華郵政系統相容，路或街以上的住址須依相對映的欄位填入, 其於則填入<see cref="P:CommonDomain.Address.HouseNumbering">門牌號碼</see>.
            </remarks>
        </member>
        <member name="P:CommonDomain.Address.HouseNumbering">
            <summary>
            門牌號碼
            </summary>
            <remarks>
            <c>相容性議題</c>：
            為了與中華郵政系統相容，路或街以上的住址須依相對映的欄位填入, 其於則填入<see cref="P:CommonDomain.Address.HouseNumbering">門牌號碼</see>.
            </remarks>
        </member>
        <member name="M:CommonDomain.Address.ToString">
            <summary>
            Overrided. 傳回由門牌號碼(HouseNumbering), 街道(Street, 鄉市鎮(Town), 城市(City) 郵遞區號(PostalCode), 國家(Country)組成的字串.
            </summary>
            <returns></returns>
            <remarks>
            <c>傳回格式如下</c>：
            <c>HouseNumbering</c>, <c>Street</c>, <c>HouseNumbering</c>, <c>Town</c>, <c>City</c> <c>PostalCode</c>, <c>Country</c>.
            </remarks>
        </member>
        <member name="M:CommonDomain.Address.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CommonDomain.Address.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CommonDomain.Address.ToStringWithoutCountry">
            <summary>
            傳回由城市(City)、鄉市鎮(Town)及路或街(Street)及門牌號碼(HouseHumbering)組成的字串
            </summary>
            <returns></returns>
            <remarks>中文格式, 縣市、鄉鎮市區、路或街以及門牌號碼和郵遞區號</remarks>
        </member>
        <member name="M:CommonDomain.Address.Equals(CommonDomain.Address)">
            <summary>
            Overloaded.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Address.ToStringWithChineseFormat(System.Boolean,System.Boolean,System.String)">
            <summary>
            傳回由城市(City)、鄉市鎮(Town)及路或街(Street)及門牌號碼(HouseHumbering)組成的字串
            </summary>
            <param name="withPostalCode">是否加入郵遞區號</param>
            <param name="withCountry">是否加入國別</param>
            <returns></returns>
            <remarks>
            <c>傳回格式如下</c>：
            國家12345城市鄉市鎮路或街門牌號碼
            </remarks>
        </member>
        <member name="M:CommonDomain.Address.build(System.Boolean,System.Boolean,System.String)">
            <summary>
            傳回由城市(City)、鄉市鎮(Town)及路或街(Street)及門牌號碼(HouseHumbering)組成的字串
            </summary>
            <param name="withPostalCode">是否加入郵遞區號</param>
            <param name="withCountry">是否加入國別</param>
            <returns></returns>
            <remarks>
            <c>傳回格式如下</c>：
            <c>HouseNumbering</c>, <c>Street</c>, <c>HouseNumbering</c>, <c>Town</c>, <c>City</c> <c>PostalCode</c>, <c>Country</c>.
            </remarks>
        </member>
        <member name="M:CommonDomain.Address.ToString(System.String)">
            <summary>
            <c>Simple Format</c>:
            Co<c>U</c>ntry, St<c>A</c>te, <c>P</c>ostalCode, <c>C</c>ity, <c>T</c>own, <c>S</c>treet, <c>H</c>ouseNumbering.
            - Or -
            Chi<c>N</c>eseFormat, <c>G</c>eneral and <c>F</c>ull.
            </summary>
            <param name="format"></param>
            <returns></returns>
            <example>
            <c>Format String</c> include: "<c>U</c>", <c>A</c>","<c>P</c>", "<c>C</c>", "<c>T</c>", "<c>S</c>", "<c>H</c>", "<c>N</c>", "<c>G</c>",
            " ", "<c>,</c>", "<c>-</c>", "<c>.</c>", "<c>(</c>", "<c>)</c>", "<c>_</c>"
                <code>
                    Address address = Address.CreateInstance("台灣", String.Empty, "台北市", "士林區", "前港街", "10號1樓", "11170");
                    Assert.AreEqual("10號1樓, 前港街, 士林區, 台北市 11170", address.ToString("G"));
                    Assert.AreEqual("台灣", address.ToString("U"));
                    Assert.AreEqual(String.Empty, address.ToString("A"));
                    Assert.AreEqual("11170", address.ToString("P"));
                    Assert.AreEqual("台北市", address.ToString("C"));
                    Assert.AreEqual("士林區", address.ToString("T"));
                    Assert.AreEqual("前港街", address.ToString("S"));
                    Assert.AreEqual("10號1樓", address.ToString("H"));
                    Assert.AreEqual("台灣11170台北市士林區前港街10號1樓", address.ToString("N"));
                    Assert.AreEqual("10號1樓, 前港街, 士林區, 台北市 11170, 台灣", address.ToString("F"));
                    Assert.AreEqual("11170台北市 士林區 前港街 10號1樓", address.ToString("PC T S H"));
            </code>
            You also can do it:
            <code>
                    Assert.AreEqual("[11170]台北市 士林區前港街10號1樓", String.Format("[{0:P}]{0:C} {0:T}{0:S}{0:H}", address));
            </code>
            </example>
            <remarks>
            特別注意, <c>G</c>eneral與<see cref="M:CommonDomain.Address.ToString"/>不同, General不會傳回國家別.
            </remarks>
        </member>
        <member name="M:CommonDomain.Address.op_Equality(CommonDomain.Address,CommonDomain.Address)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="address1">The address1.</param>
            <param name="address2">The address2.</param>
            <returns>
            The validResult of the operator.
            </returns>
        </member>
        <member name="M:CommonDomain.Address.op_Inequality(CommonDomain.Address,CommonDomain.Address)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="address1">The address1.</param>
            <param name="address2">The address2.</param>
            <returns>
            The validResult of the operator.
            </returns>
        </member>
        <member name="P:CommonDomain.Category.DisplayOrder">
            <summary>
            顯示順序
            </summary>
        </member>
        <member name="P:CommonDomain.Category.Path">
            <summary>
            由Root到
            </summary>
        </member>
        <member name="P:CommonDomain.Category.Parent">
            <summary>
            父類別
            </summary>        
        </member>
        <member name="P:CommonDomain.Category.Children">
            <summary>
            取得所有子類別
            </summary>
        </member>
        <member name="M:CommonDomain.Category.Add(CommonDomain.Category)">
            <summary>
            加入子類別
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:CommonDomain.Category.AddRange(System.Collections.Generic.IEnumerable{CommonDomain.Category})">
            <summary>
            一次加入多個子類別
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:CommonDomain.Category.Remove(CommonDomain.Category)">
            <summary>
            移除子類別
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Category.RemoveAll(System.Collections.Generic.IEnumerable{CommonDomain.Category})">
            <summary>
            一次移除多個子類別
            </summary>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Category.RemoveAll(System.Predicate{CommonDomain.Category})">
            <summary>
            移除符合條件子類別
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Category.Find``1(System.Func{CommonDomain.Category,``0},``0)">
            <summary>
            Find element in the <see cref="T:CommonDomain.Category"/>.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keySelector"></param>
            <param name="item"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySelector"/> or <paramref name="item"/> is a null reference.</exception>
        </member>
        <member name="M:CommonDomain.Category.Find(System.Predicate{CommonDomain.Category})">
            <summary>
            Find element in the <see cref="T:CommonDomain.Category"/>.
            </summary>
            <param name="match"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is a null reference.</exception>
        </member>
        <member name="P:CommonDomain.Category.Ancestors">
            <summary>
            直系袓先
            </summary>
        </member>
        <member name="P:CommonDomain.Category.Siblings">
            <summary>
            旁系兄弟
            </summary>
        </member>
        <member name="M:CommonDomain.Category.Compare(CommonDomain.Category,CommonDomain.Category)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
        </member>
        <member name="M:CommonDomain.Category.CompareTo(CommonDomain.Category)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:CommonDomain.GeneralCommandHandler.HandleFactory">
            <summary>
            Gets or sets the handle factory.
            </summary>
            <value>
            The handle factory.
            </value>
        </member>
        <member name="M:CommonDomain.GeneralCommandHandler.Execute``1(``0)">
            <summary>
            Executes the specified command.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="command">The command.</param>
        </member>
        <member name="T:CommonDomain.ICommand">
            <summary>
            命令
            </summary>
        </member>
        <member name="T:CommonDomain.ICommandHandler">
            <summary>
            命令處理器 (Command handler interface.)
            </summary>
        </member>
        <member name="M:CommonDomain.ICommandHandler.Execute">
            <summary>
            Executes the specified Command.
            </summary>
        </member>
        <member name="T:CommonDomain.ICommandHandler`1">
            <summary>
            命令處理器界面
            </summary>
            <typeparam name="TCommand">The type of the Command.</typeparam>
        </member>
        <member name="P:CommonDomain.ICommandHandler`1.Command">
            <summary>
            Gets or sets the Command.
            </summary>
            <value>
            The Command.
            </value>
        </member>
        <member name="T:CommonDomain.ICommandHandlerFactory">
            <summary>
            Command handler factory interface
            </summary>
        </member>
        <member name="M:CommonDomain.ICommandHandlerFactory.GetCommandHandler(CommonDomain.ICommand)">
            <summary>
            Gets the command handler.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.Company">
            <summary>
            公司
            </summary>
        </member>
        <member name="P:CommonDomain.Company.UnifiedBusinessNo">
            <summary>
            統一編號
            </summary>
        </member>
        <member name="P:CommonDomain.Company.StartDate">
            <summary>
            建立日期
            </summary>
        </member>
        <member name="T:CommonDomain.Contact">
            <summary>
            聯絡資訊
            </summary>
        </member>
        <member name="P:CommonDomain.Contact.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:CommonDomain.Contact.Addresses">
            <summary>
            所有的住址
            </summary>
        </member>
        <member name="P:CommonDomain.Contact.Phones">
            <summary>
            所有的電話
            </summary>
        </member>
        <member name="P:CommonDomain.Contact.Email">
            <summary>
            所有的電子郵件
            </summary>
        </member>
        <member name="P:CommonDomain.Contact.InstantMessagingAccounts">
            <summary>
            所有的即時通帳號
            </summary>
        </member>
        <member name="P:CommonDomain.Contact.Activities">
            <summary>
            活動(紀念日)
            </summary>
        </member>
        <member name="P:CommonDomain.Contact.IPPhones">
            <summary>
            網路電話
            </summary>
        </member>
        <member name="P:CommonDomain.Contact.PersonalWebSite">
            <summary>
            個人網站(部落格)
            </summary>        
        </member>
        <member name="P:CommonDomain.Contact.Note">
            <summary>
            備註
            </summary>
        </member>
        <member name="M:CommonDomain.Contact.AddPhoneNumber(CommonDomain.PhoneOptions,CommonDomain.PhoneNumber)">
            <summary>
            加入一組電話號碼
            </summary>
            <param name="option"></param>
            <param name="number"></param>
        </member>
        <member name="M:CommonDomain.Contact.SetPhoneNumber(CommonDomain.PhoneOptions,CommonDomain.PhoneNumber)">
            <summary>
            對原有的電話選項，設定其對應的電話號碼
            </summary>
            <param name="option"></param>
            <param name="number"></param>
        </member>
        <member name="M:CommonDomain.Contact.RemovePhoneNumber(CommonDomain.PhoneOptions)">
            <summary>
            移除電話號碼
            </summary>
            <param name="option"></param>
            <returns>是否成功</returns>
        </member>
        <member name="M:CommonDomain.Contact.AddEmail(System.String,System.String)">
            <summary>
            在聯絡人資訊中增加一筆電子郵件地址
            </summary>
            <param name="key"></param>
            <param name="emailAddress">電子郵件地址</param>
        </member>
        <member name="M:CommonDomain.Contact.RemoveEmail(System.String)">
            <summary>
            移除掉指定Key所對應的電子郵件地址
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Contact.AddInstantMessagingAccount(System.String,System.String)">
            <summary>
            在聯絡人資訊中增加一筆即時通帳號
            </summary>
            <param name="systemName"></param>
            <param name="account"></param>
        </member>
        <member name="M:CommonDomain.Contact.RemoveInstantMessagingAccount(System.String)">
            <summary>
            移除掉指定系統名稱所對應的即時通帳號
            </summary>
            <param name="systemName"></param>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.AddressForMapper.Country">
            <summary>
            國家名
            </summary>
        </member>
        <member name="P:CommonDomain.AddressForMapper.PostalCode">
            <summary>
            郵遞區號 (Zip Code)
            </summary>
        </member>
        <member name="P:CommonDomain.AddressForMapper.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:CommonDomain.AddressForMapper.City">
            <summary>
            城市名稱.
            </summary>
        </member>
        <member name="P:CommonDomain.AddressForMapper.Town">
            <summary>
            郡名稱存取
            </summary>
            <remarks>鄉、市、鎮、區</remarks>
        </member>
        <member name="P:CommonDomain.AddressForMapper.Street">
            <summary>
            路、街
            </summary>
            <remarks>
            <c>相容性議題</c>：
            為了與中華郵政系統相容，路或街以上的住址須依相對映的欄位填入, 其於則填入<see cref="P:CommonDomain.Address.HouseNumbering">門牌號碼</see>.
            </remarks>
        </member>
        <member name="P:CommonDomain.AddressForMapper.HouseNumbering">
            <summary>
            門牌號碼
            </summary>
            <remarks>
            <c>相容性議題</c>：
            為了與中華郵政系統相容，路或街以上的住址須依相對映的欄位填入, 其於則填入<see cref="P:CommonDomain.Address.HouseNumbering">門牌號碼</see>.
            </remarks>
        </member>
        <member name="P:CommonDomain.PhoneNumberForMapper.Area">
            <summary>
            存取電話區碼
            </summary>
        </member>
        <member name="P:CommonDomain.PhoneNumberForMapper.Phone">
            <summary>
            存取電話號碼, 不含區碼及分機
            </summary>
        </member>
        <member name="P:CommonDomain.PhoneNumberForMapper.Extension">
            <summary>
            存取電話分機碼
            </summary>
        </member>
        <member name="P:CommonDomain.PhoneNumberForMapper.RegionCode">
            <summary>
            國際/行政區碼
            </summary>
        </member>
        <member name="T:CommonDomain.ConversionRate">
            <summary>
            轉換匯率
            </summary>
        </member>
        <member name="P:CommonDomain.ConversionRate.Type">
            <summary>
            類型
            </summary>
        </member>
        <member name="P:CommonDomain.ConversionRate.Rate">
            <summary>
            轉換率
            </summary>
        </member>
        <member name="P:CommonDomain.ConversionRate.Discount">
            <summary>
            折扣
            </summary>
        </member>
        <member name="P:CommonDomain.ConversionRate.Period">
            <summary>
            時間區間
            </summary>
        </member>
        <member name="M:CommonDomain.ConversionRate.GetRate(System.Boolean)">
            <summary>
            取得匯率
            </summary>
            <param name="haveDiscount"></param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.Currencies">
            <summary>
            提供貨幣集合
            </summary>
        </member>
        <member name="M:CommonDomain.Currencies.FindAll(System.Predicate{CommonDomain.Currency})">
            <summary>
            查詢多筆符合條件的<seealso cref="T:CommonDomain.Currency"/>.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Currencies.GetCultures(CommonDomain.Currency)">
            <summary>
            查詢使用貨幣<paramref name="currency"/>的CultureInfo
            </summary>
            <param name="currency">貨幣</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Currencies.GetRegions(CommonDomain.Currency)">
            <summary>
            查詢使用貨幣<paramref name="currency"/>的RegionInfo
            </summary>
            <param name="currency">貨幣</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Currencies.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Currencies.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.Currency">
            <summary>
            貨幣
            </summary>
            <remarks>此物件僅能透過<see cref="T:CommonDomain.Currencies"/>物件產生.</remarks>
        </member>
        <member name="P:CommonDomain.Currency.EnglishName">
            <summary>
            英文名子
            </summary>
        </member>
        <member name="P:CommonDomain.Currency.Symbol">
            <summary>
            單位符號
            </summary>
        </member>
        <member name="P:CommonDomain.Currency.IsoSymbol">
            <summary>
            ISO貨幣代碼
            </summary>
        </member>
        <member name="P:CommonDomain.Currency.FractionDigits">
            <summary>
            小數點計算精度
            </summary>
        </member>
        <member name="P:CommonDomain.Currency.GetDefaultFractionDigits">
            <summary>
            取得預設計算精度
            </summary>
        </member>
        <member name="M:CommonDomain.Currency.ToString">
            <summary>
            Return IsoSymbol.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Currency.Equals(CommonDomain.Currency)">
            <summary>
            比較兩個幣別<see cref="T:CommonDomain.Currency"/>物件是否一致.
            </summary>
            <param name="other"></param>
            <returns></returns>
            <remarks>Ignore case.</remarks>
        </member>
        <member name="T:CommonDomain.CurrencyConversion">
            <summary>
            幣別轉換
            </summary>
        </member>
        <member name="P:CommonDomain.CurrencyConversion.BaseCurrency">
            <summary>
            原貨幣
            </summary>
        </member>
        <member name="P:CommonDomain.CurrencyConversion.TargetCurrency">
            <summary>
            轉換的目標貨幣
            </summary>
        </member>
        <member name="M:CommonDomain.CurrencyConversion.GetCurrentRate(CommonDomain.ConversionRateType)">
            <summary>
            取得目前的匯率
            </summary>
            <param name="type">匯率轉換類型</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.CurrencyConversion.GetRecentlyRate(CommonDomain.ConversionRateType,System.Int32)">
            <summary>
            取得近幾筆的匯率
            </summary>
            <param name="type">匯率轉換類型</param>
            <param name="recentlyNumber">近<paramref name="recentlyNumber"/>筆匯率</param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.Customer">
            <summary>
            顧客
            </summary>
        </member>
        <member name="P:CommonDomain.Customer.Mobile">
            <summary>
            行動電話
            </summary>
        </member>
        <member name="F:CommonDomain.Customer.mobilePhoneNumber">
            <summary>
            行動電話
            </summary>
        </member>
        <member name="T:CommonDomain.DateEvent">
            <summary>
            Date event in calendar.
            </summary>
        </member>
        <member name="M:CommonDomain.DateEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonDomain.DateEvent"/> class.
            </summary>
        </member>
        <member name="M:CommonDomain.DateEvent.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonDomain.DateEvent"/> class.
            </summary>
            <param name="dateTime">The date time.</param>
        </member>
        <member name="M:CommonDomain.DateEvent.#ctor(System.Guid,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonDomain.DateEvent"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="dateTime">The date time.</param>
        </member>
        <member name="P:CommonDomain.DateEvent.IsHoliday">
            <summary>
            Gets or sets a value indicating whether this instance is holiday.
            </summary>
            <value>
            <c>true</c> if this instance is holiday; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonDomain.DateEvent.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:CommonDomain.DateEvent.Note">
            <summary>
            Gets or sets the note.
            </summary>
            <value>
            The note.
            </value>
        </member>
        <member name="P:CommonDomain.DateEvent.DateTime">
            <summary>
            Gets the date time.
            </summary>
            <value>
            The date time.
            </value>
        </member>
        <member name="M:CommonDomain.DateEvent.Equals(CommonDomain.DateEvent)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:CommonDomain.DateEventWithCalendar">
            <summary>
            Date event information.
            </summary>
        </member>
        <member name="M:CommonDomain.DateEventWithCalendar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonDomain.DateEvent"/> class.
            </summary>
        </member>
        <member name="M:CommonDomain.DateEventWithCalendar.#ctor(System.Nullable{System.Int32},System.Int32,System.Int32,System.Globalization.Calendar)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonDomain.DateEventWithCalendar"/> class.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <param name="calendar">The calendar.</param>
        </member>
        <member name="M:CommonDomain.DateEventWithCalendar.#ctor(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonDomain.DateEventWithCalendar"/> class.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
        </member>
        <member name="M:CommonDomain.DateEventWithCalendar.#ctor(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonDomain.DateEventWithCalendar"/> class.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
            <param name="calendar">The calendar.</param>
        </member>
        <member name="M:CommonDomain.DateEventWithCalendar.#ctor(System.Guid,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonDomain.DateEventWithCalendar"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
        </member>
        <member name="M:CommonDomain.DateEventWithCalendar.#ctor(System.Guid,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonDomain.DateEvent"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <param name="hour">hour</param>
            <param name="minute">minute</param>
            <param name="second">second</param>
            <param name="calendar">The calendar.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            time is less than System.Globalization.Calendar.MinSupportedDateTime or greater
            than System.Globalization.Calendar.MaxSupportedDateTime. -or- 
            if GregorianCalendar, will follow below rules:
            year is less than 1 or greater than 9999.-or- month is less than 1 or greater than 12.-or- 
            day is less than 1 or greater than the number of days in month.-or- hour is less than 0 or greater than 23.-or- 
            minute is less than 0 or greater than 59.-or- second is less than 0 or greater than 59.
            </exception>
        </member>
        <member name="P:CommonDomain.DateEventWithCalendar.IsHoliday">
            <summary>
            Gets or sets a value indicating whether this instance is holiday.
            </summary>
            <value>
            <c>true</c> if this instance is holiday; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonDomain.DateEventWithCalendar.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:CommonDomain.DateEventWithCalendar.Note">
            <summary>
            Gets or sets the note.
            </summary>
            <value>
            The note.
            </value>
        </member>
        <member name="P:CommonDomain.DateEventWithCalendar.Calendar">
            <summary>
            Gets or sets the calendar.
            </summary>
            <value>
            The calendar.
            </value>
        </member>
        <member name="P:CommonDomain.DateEventWithCalendar.Year">
            <summary>
            Gets the year.
            </summary>
            <value>
            The year.
            </value>
        </member>
        <member name="P:CommonDomain.DateEventWithCalendar.Month">
            <summary>
            Gets the month.
            </summary>
            <value>
            The month.
            </value>
        </member>
        <member name="P:CommonDomain.DateEventWithCalendar.Day">
            <summary>
            Gets the day.
            </summary>
            <value>
            The day.
            </value>
        </member>
        <member name="P:CommonDomain.DateEventWithCalendar.Hour">
            <summary>
            Gets the hour.
            </summary>
            <value>
            The hour.
            </value>
        </member>
        <member name="P:CommonDomain.DateEventWithCalendar.Minute">
            <summary>
            Gets the minute.
            </summary>
            <value>
            The minute.
            </value>
        </member>
        <member name="P:CommonDomain.DateEventWithCalendar.Second">
            <summary>
            Gets the second.
            </summary>
            <value>
            The second.
            </value>
        </member>
        <member name="P:CommonDomain.DateEventWithCalendar.DateTime">
            <summary>
            To the date time form <seealso cref="!:DateEventWithCalendar.Date" /> transfer to <seealso cref="P:CommonDomain.DateEventWithCalendar.Calendar" /> DateTime.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.DateEventWithCalendar.Equals(CommonDomain.DateEventWithCalendar)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:CommonDomain.DateEventWithCalendar.CompareTo(CommonDomain.DateEventWithCalendar)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />.
            </returns>
        </member>
        <member name="M:CommonDomain.DateEventWithCalendar.initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:CommonDomain.DateEventWithCalendar.onDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Ons the deserializing.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:CommonDomain.DateEventWithCalendar.OnSerializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Ons the serializing.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:CommonDomain.CreateAccountability`1">
            <summary>
            責任工廠代理
            </summary>
            <typeparam name="TId"></typeparam>
            <param name="commissioner"></param>
            <param name="responsible"></param>
            <param name="acountabilityType"></param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.CreateAccountability`3">
            <summary>
            責任工廠代理
            </summary>
            <typeparam name="TCommissioner"></typeparam>
            <typeparam name="TResponsible"></typeparam>
            <typeparam name="TId"></typeparam>
            <param name="commissioner"></param>
            <param name="responsible"></param>
            <param name="acountabilityType"></param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.Department">
            <summary>
            部門
            </summary>
        </member>
        <member name="P:CommonDomain.Department.Parent">
            <summary>
            父節點
            </summary>
        </member>
        <member name="P:CommonDomain.Department.Children">
            <summary>
            子節點
            </summary>
        </member>
        <member name="M:CommonDomain.Department.Add(CommonDomain.Department)">
            <summary>
            新增<paramref name="child"/>節點
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:CommonDomain.Department.AddRange(System.Collections.Generic.IEnumerable{CommonDomain.Department})">
            <summary>
            新增所有<paramref name="children"/>節點
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:CommonDomain.Department.Remove(CommonDomain.Department)">
            <summary>
            移除<paramref name="child"/>節點
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Department.RemoveAll(System.Collections.Generic.IEnumerable{CommonDomain.Department})">
            <summary>
            移除所有<paramref name="children"/>節點
            </summary>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Department.Clear">
            <summary>
            清除所有子節點
            </summary>
        </member>
        <member name="M:CommonDomain.Department.Contains(CommonDomain.Department)">
            <summary>
            是否包含<paramref name="item"/>節點
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.Department.HasChildren">
            <summary>
            是否有子節點
            </summary>
        </member>
        <member name="M:CommonDomain.Department.Find(System.Predicate{CommonDomain.Department})">
            <summary>
            查詢
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.Department.Ancestors">
            <summary>
            直系袓先
            </summary>
        </member>
        <member name="P:CommonDomain.Department.Siblings">
            <summary>
            旁系兄弟
            </summary>
        </member>
        <member name="T:CommonDomain.Utils.EasyMoney">
            <summary>
            Summary description for Money.
            Value object is data should be readonly or const. As the Money, amount can't change.
            If some client(e.g. Product) use this Money, and call Add method or Multiply, it sholud retrun new money
            not replace product's amount.
            </summary>
        </member>
        <member name="M:CommonDomain.Utils.EasyMoney.ConvertTo(CommonDomain.Utils.EasyMoney)">
            <summary>
            The money convert to the other currency.
            </summary>
            <param name="money"></param>
            <returns>New money type. The money amount change are original currency to new currency.  </returns>
        </member>
        <member name="M:CommonDomain.Utils.EasyMoney.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns>Return zero mean is the instance are equal to obj, return less than zero mean is instance are less than obj, 
            return greater than zero mean is instance are greater than obj </returns>
            <exception cref="T:System.ArithmeticException">money currency math mismatch</exception>
        </member>
        <member name="M:CommonDomain.Utils.EasyMoney.newMoney(System.Int64)">
            <summary>
            Factory pattern inside, create a money instance without constact.
            amount don't multiple centFactor.
            </summary>
            <param name="amount"></param>
            <param name="currency"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Utils.EasyMoney.Allocate(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Utils.EasyMoney.Allocate(System.Int64[])">
            <summary>
            Allocate Money to many part.
            </summary>
            <example>If there have 500 dollars, and to part 3/5 and 2/5.
             The ratios can type [3,2] and get two money object.
             One is 300, the other is 200.
             </example>
            <param name="ratios">The Ratios determine the money allocate to how many part.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Utils.EasyMoney.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Utils.EasyMoney.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:CommonDomain.Employee">
            <summary>
            員工
            </summary>
        </member>
        <member name="P:CommonDomain.Employee.OfficePhoneNumber">
            <summary>
            公司電話
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:CommonDomain.Employee.Height">
            <summary>
            身高
            </summary>
        </member>
        <member name="P:CommonDomain.Employee.Weight">
            <summary>
            體重
            </summary>
        </member>
        <member name="T:CommonDomain.AccountabilityType">
            <summary>
            責任類型
            </summary>
        </member>
        <member name="F:CommonDomain.AccountabilityType.Employment">
            <summary>
            雇用
            </summary>
        </member>
        <member name="F:CommonDomain.AccountabilityType.Parent">
            <summary>
            親子
            </summary>
        </member>
        <member name="F:CommonDomain.AccountabilityType.Supervise">
            <summary>
            指導
            </summary>
        </member>
        <member name="T:CommonDomain.AddressOptions">
            <summary>
            住址選項
            </summary>
        </member>
        <member name="F:CommonDomain.AddressOptions.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonDomain.AddressOptions.Home">
            <summary>
            住宅地址
            </summary>
        </member>
        <member name="F:CommonDomain.AddressOptions.Register">
            <summary>
            登記地址
            </summary>
        </member>
        <member name="F:CommonDomain.AddressOptions.Company">
            <summary>
            公司地址
            </summary>
        </member>
        <member name="F:CommonDomain.AddressOptions.Office">
            <summary>
            辦公室地址
            </summary>
        </member>
        <member name="F:CommonDomain.AddressOptions.Mail">
            <summary>
            郵寄地址
            </summary>
        </member>
        <member name="F:CommonDomain.AddressOptions.Other">
            <summary>
            其它
            </summary>
        </member>
        <member name="T:CommonDomain.Constellation">
            <summary>
            星座
            </summary>
        </member>
        <member name="F:CommonDomain.Constellation.None">
            <summary>
            無
            </summary>
        </member>
        <member name="F:CommonDomain.Constellation.Capricorn">
            <summary>
            魔羯
            </summary>
        </member>
        <member name="F:CommonDomain.Constellation.Aquarius">
            <summary>
            水瓶
            </summary>
        </member>
        <member name="F:CommonDomain.Constellation.Pisces">
            <summary>
            雙魚
            </summary>
        </member>
        <member name="F:CommonDomain.Constellation.Aries">
            <summary>
            牧羊
            </summary>
        </member>
        <member name="F:CommonDomain.Constellation.Taurus">
            <summary>
            金牛
            </summary>
        </member>
        <member name="F:CommonDomain.Constellation.Gemini">
            <summary>
            雙子
            </summary>
        </member>
        <member name="F:CommonDomain.Constellation.Cancer">
            <summary>
            巨蟹
            </summary>
        </member>
        <member name="F:CommonDomain.Constellation.Leo">
            <summary>
            獅子
            </summary>
        </member>
        <member name="F:CommonDomain.Constellation.Virgo">
            <summary>
            處女
            </summary>
        </member>
        <member name="F:CommonDomain.Constellation.Libra">
            <summary>
            天秤
            </summary>
        </member>
        <member name="F:CommonDomain.Constellation.Scorpio">
            <summary>
            天蠍
            </summary>
        </member>
        <member name="F:CommonDomain.Constellation.Sagittarius">
            <summary>
            射手
            </summary>
        </member>
        <member name="T:CommonDomain.ConversionRateType">
            <summary>
            匯率轉換類型
            </summary>
        </member>
        <member name="F:CommonDomain.ConversionRateType.None">
            <summary>
            預設值
            </summary>
        </member>
        <member name="F:CommonDomain.ConversionRateType.Buy">
            <summary>
            買價
            </summary>
        </member>
        <member name="F:CommonDomain.ConversionRateType.CashBuy">
            <summary>
            現金買價
            </summary>
        </member>
        <member name="F:CommonDomain.ConversionRateType.Sell">
            <summary>
            賣價
            </summary>
        </member>
        <member name="F:CommonDomain.ConversionRateType.CashSell">
            <summary>
            現金賣價
            </summary>
        </member>
        <member name="T:CommonDomain.Gender">
            <summary>
            性別
            </summary>
        </member>
        <member name="F:CommonDomain.Gender.None">
            <summary>
            無
            </summary>
        </member>
        <member name="F:CommonDomain.Gender.Male">
            <summary>
            男性
            </summary>
        </member>
        <member name="F:CommonDomain.Gender.Female">
            <summary>
            女性
            </summary>
        </member>
        <member name="T:CommonDomain.MaritalStatus">
            <summary>
            婚姻狀態
            </summary>
        </member>
        <member name="F:CommonDomain.MaritalStatus.Married">
            <summary>
            已婚
            </summary>
        </member>
        <member name="F:CommonDomain.MaritalStatus.Single">
            <summary>
            單身
            </summary>
        </member>
        <member name="F:CommonDomain.MaritalStatus.Separation">
            <summary>
            分居
            </summary>
        </member>
        <member name="F:CommonDomain.MaritalStatus.Other">
            <summary>
            其它
            </summary>
        </member>
        <member name="F:CommonDomain.Month.January">
            <summary>
            一月
            </summary>
        </member>
        <member name="F:CommonDomain.Month.February">
            <summary>
            二月
            </summary>
        </member>
        <member name="F:CommonDomain.Month.March">
            <summary>
            三月
            </summary>
        </member>
        <member name="F:CommonDomain.Month.April">
            <summary>
            四月
            </summary>
        </member>
        <member name="F:CommonDomain.Month.May">
            <summary>
            五月
            </summary>
        </member>
        <member name="F:CommonDomain.Month.June">
            <summary>
            六月
            </summary>
        </member>
        <member name="F:CommonDomain.Month.July">
            <summary>
            七月
            </summary>
        </member>
        <member name="F:CommonDomain.Month.August">
            <summary>
            八月
            </summary>
        </member>
        <member name="F:CommonDomain.Month.September">
            <summary>
            九月
            </summary>
        </member>
        <member name="F:CommonDomain.Month.October">
            <summary>
            十月
            </summary>
        </member>
        <member name="F:CommonDomain.Month.November">
            <summary>
            十一月
            </summary>
        </member>
        <member name="F:CommonDomain.Month.December">
            <summary>
            十二月
            </summary>
        </member>
        <member name="T:CommonDomain.PhoneOptions">
            <summary>
            電話選項
            </summary>
        </member>
        <member name="F:CommonDomain.PhoneOptions.None">
            <summary>
            無
            </summary>
        </member>
        <member name="F:CommonDomain.PhoneOptions.HomePhone">
            <summary>
            家用電話
            </summary>
        </member>
        <member name="F:CommonDomain.PhoneOptions.Mobile">
            <summary>
            行動電話
            </summary>
        </member>
        <member name="F:CommonDomain.PhoneOptions.CompanyPhone">
            <summary>
            公司總機
            </summary>
        </member>
        <member name="F:CommonDomain.PhoneOptions.OfficePhone">
            <summary>
            辦公司電話
            </summary>
        </member>
        <member name="F:CommonDomain.PhoneOptions.HomeFax">
            <summary>
            家用傳真
            </summary>
        </member>
        <member name="F:CommonDomain.PhoneOptions.OfficeFax">
            <summary>
            辦公司傳直
            </summary>
        </member>
        <member name="F:CommonDomain.PhoneOptions.CarPhone">
            <summary>
            車用電話
            </summary>
        </member>
        <member name="F:CommonDomain.PhoneOptions.AssistantPhone">
            <summary>
            助理電話
            </summary>
        </member>
        <member name="F:CommonDomain.PhoneOptions.WirelessPhone">
            <summary>
            無線電話
            </summary>
        </member>
        <member name="F:CommonDomain.PhoneOptions.Pagers">
            <summary>
            傳呼機
            </summary>
        </member>
        <member name="F:CommonDomain.PhoneOptions.Other">
            <summary>
            其它
            </summary>
        </member>
        <member name="T:CommonDomain.RiskLevel">
            <summary>
            危險等級
            </summary>
        </member>
        <member name="F:CommonDomain.RiskLevel.Low">
            <summary>
            低度
            </summary>
        </member>
        <member name="F:CommonDomain.RiskLevel.Middle">
            <summary>
            中度
            </summary>
        </member>
        <member name="F:CommonDomain.RiskLevel.High">
            <summary>
             高度
            </summary>
        </member>
        <member name="T:CommonDomain.UnitKind">
            <summary>
            單位性質
            </summary>
        </member>
        <member name="F:CommonDomain.UnitKind.Base">
            <summary>
            基礎單位
            </summary>
            <remarks>
            http://en.wikipedia.org/wiki/SI_base_unit
            </remarks>
        </member>
        <member name="F:CommonDomain.UnitKind.Derived">
            <summary>
            導出衍生單位
            </summary>
            <remarks>http://en.wikipedia.org/wiki/SI_derived_unit</remarks>
        </member>
        <member name="T:CommonDomain.UnitType">
            <summary>
            單位類別
            </summary>
        </member>
        <member name="F:CommonDomain.UnitType.None">
            <summary>
            無
            </summary>
        </member>
        <member name="F:CommonDomain.UnitType.Lenght">
            <summary>
            長度
            </summary>
        </member>
        <member name="F:CommonDomain.UnitType.Mass">
            <summary>
            質量
            </summary>
        </member>
        <member name="F:CommonDomain.UnitType.Time">
            <summary>
            時間
            </summary>
        </member>
        <member name="F:CommonDomain.UnitType.ThermodynamicTemperature">
            <summary>
            熱力與溫度
            </summary>
        </member>
        <member name="F:CommonDomain.UnitType.ElectricCurrent">
            <summary>
            電流
            </summary>
        </member>
        <member name="F:CommonDomain.UnitType.AmountOfSubstance">
            <summary>
            物質量
            </summary>
        </member>
        <member name="F:CommonDomain.UnitType.luminousintensity">
            <summary>
            光亮度
            </summary>
        </member>
        <member name="F:CommonDomain.UnitType.Hertz">
            <summary>
            頻率、赫茲
            </summary>
        </member>
        <member name="F:CommonDomain.UnitType.Radian">
            <summary>
            弧度，平面角度
            </summary>
        </member>
        <member name="F:CommonDomain.UnitType.Newton">
            <summary>
            力/重力
            </summary>
        </member>
        <member name="F:CommonDomain.UnitType.Pascal">
            <summary>
            壓力
            </summary>
        </member>
        <member name="F:CommonDomain.UnitType.SquareMetre">
            <summary>
            面積
            </summary>
        </member>
        <member name="F:CommonDomain.UnitType.CubicMetre">
            <summary>
            體積
            </summary>
        </member>
        <member name="F:CommonDomain.UnitType.MetrePerSecond">
            <summary>
            速度
            </summary>
        </member>
        <member name="T:CommonDomain.WeekDays">
            <summary>
            days of week.
            </summary>
        </member>
        <member name="F:CommonDomain.WeekDays.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:CommonDomain.WeekDays.Sunday">
            <summary>
            The sunday
            </summary>
        </member>
        <member name="F:CommonDomain.WeekDays.Monday">
            <summary>
            The monday
            </summary>
        </member>
        <member name="F:CommonDomain.WeekDays.Tuesday">
            <summary>
            The tuesday
            </summary>
        </member>
        <member name="F:CommonDomain.WeekDays.Wednesday">
            <summary>
            The wednesday
            </summary>
        </member>
        <member name="F:CommonDomain.WeekDays.Thursday">
            <summary>
            The thursday
            </summary>
        </member>
        <member name="F:CommonDomain.WeekDays.Friday">
            <summary>
            The friday
            </summary>
        </member>
        <member name="F:CommonDomain.WeekDays.Saturday">
            <summary>
            The saturday
            </summary>
        </member>
        <member name="T:CommonDomain.FiniteRange`1">
            <summary>
            有限區間物件, 用來表示一封閉(有限)的區間結構
            </summary>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="M:CommonDomain.FiniteRange`1.#ctor(`0,`0)">
            <summary>
            建構式.
            </summary>
            <param name="lower"></param>
            <param name="upper"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException">傳入參數為空參照(null)</exception>
        </member>
        <member name="M:CommonDomain.FiniteRange`1.HasOverlap(CommonDomain.FiniteRange{`0})">
            <summary>
            和目標物件是否有重疊
            </summary>
            <param name="target">目標物件</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.FiniteRange`1.HasInclude(`0)">
            <summary>
            是否包含目標物件
            </summary>
            <param name="target">目標物件</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.FiniteRange`1.HasInclude(CommonDomain.FiniteRange{`0})">
            <summary>
            是否包含另一區間物件
            </summary>
            <param name="target">區間物件</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.FiniteRange`1.HasMoreThen(`0)">
            <summary>
            判斷是否比傳入的參數大
            </summary>
            <param name="target"></param>
            <returns>If true the instance more than parameter, otherwise false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CommonDomain.FiniteRange`1.HasMoreThen(CommonDomain.FiniteRange{`0})">
            <summary>
            判斷是否比傳入的參數大
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.FiniteRange`1.HasLessThan(`0)">
            <summary>
            判斷是否比傳入的參數小
            </summary>
            <param name="target">傳入的參數</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.FiniteRange`1.HasLessThan(CommonDomain.FiniteRange{`0})">
            <summary>
            判斷是否比傳入的參數小
            </summary>
            <param name="target">傳入的Range參數</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.FiniteRange`1.CommonDomain#IRange{TType}#HasOverlap(CommonDomain.IRange{`0})">
            <summary>
            和目標物件是否有重疊
            </summary>
            <param name="target">目標物件</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The target is <c>null</c> or target.Upper or target.Lower is <c>null</c>.</exception>
        </member>
        <member name="M:CommonDomain.FiniteRange`1.Equals(CommonDomain.FiniteRange{`0})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.FiniteRange`1.CompareTo(CommonDomain.FiniteRange{`0})">
            <summary>
            Compares the current object with another object of the same type. 
            </summary>
            <param name="other"></param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            <list type="bullet">
            	<listheader>
            		<term>Return Value</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>Less than zero</term>
            		<description>The value of this instance is less than the value of target.</description>
            	</item>
            	<item>
            		<term>Zero</term>
            		<description>
                        The value of this instance is overlap to the value of target.(That could be not equal.)
                    </description>
            	</item>	
            	<item>
            		<term>Greater than zero</term>
            		<description>The value of this instance is greater than the value of target. -or-
            			target is a null reference 
            		</description>
            	</item>
            </list>
            </returns>
        </member>
        <member name="M:CommonDomain.FiniteRange`1.Equals(System.Object)">
            <summary>
            Determines whether two Object instances are equal. 
            </summary>
            <param name="obj">The Object to comparer with the current Object.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:CommonDomain.FiniteRange`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:CommonDomain.FiniteRange`1.op_Inequality(CommonDomain.FiniteRange{`0},CommonDomain.FiniteRange{`0})">
            <summary>
            判斷兩個區間是否不相等
            </summary>
            <param name="arg1">區間1</param>
            <param name="arg2">區間2</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.FiniteRange`1.op_Equality(CommonDomain.FiniteRange{`0},CommonDomain.FiniteRange{`0})">
            <summary>
            判斷兩個區間完全相等
            </summary>
            <param name="arg1">區間1</param>
            <param name="arg2">區間2</param>
            <returns>
            </returns>
        </member>
        <member name="M:CommonDomain.FiniteRange`1.op_LessThan(CommonDomain.FiniteRange{`0},CommonDomain.FiniteRange{`0})">
            <summary>
            比較區間是否小於另一個時間於間
            </summary>
            <param name="arg1">區間1</param>
            <param name="arg2">區間2</param>
            <returns>True 表示小於, 反之則大於</returns>
        </member>
        <member name="M:CommonDomain.FiniteRange`1.op_GreaterThan(CommonDomain.FiniteRange{`0},CommonDomain.FiniteRange{`0})">
            <summary>
            比較區間是否大於另一個時間於間
            </summary>
            <param name="arg1">區間1</param>
            <param name="arg2">區間2</param>
            <returns>True 表示大於, 反之則小於</returns>
        </member>
        <member name="M:CommonDomain.ForeignerPersonalIdentitySchema.IsCheckSumValid(System.String)">
            <summary>
            驗證檢查碼是否正確(本國人)
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            外國人與本國人的計算方式完全一樣，無論是轉換的字元數字或乘數因子(即specialNumber), 差異只有第2個字。本地是數字，外國是ABCD(同樣可代表男女)
            </remarks>
        </member>
        <member name="M:CommonDomain.ForeignerPersonalIdentitySchema.transferToIdMappingNumericString(System.Char)">
            <summary>
            轉換成Id英文字所對映的String型別數字
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.GeneralPersonalIdentity">
            <summary>
            身分證字號
            </summary>
        </member>
        <member name="M:CommonDomain.GeneralPersonalIdentity.#ctor(System.String)">
            <summary>
            construcotor
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:CommonDomain.GeneralPersonalIdentity.CreateInstance(System.String)">
            <summary>
            建立實例
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.GeneralPersonalIdentity.IsLocal">
            <summary>
            是否為本地人
            </summary>
        </member>
        <member name="M:CommonDomain.GeneralPersonalIdentity.IsAssertArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Check id and field when create PersonalIdentity
            </summary>
            <param name="value">id value</param>
            <param name="fieldName">field name </param>
        </member>
        <member name="M:CommonDomain.GeneralPersonalIdentity.IdentityFormatCheck(System.String)">
            <summary>
            id 格式檢查
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.GeneralPersonalIdentity.DetermineGenderFromIdentity(CommonDomain.IGeneralPersonalIdentity)">
            <summary>
            依身份證號判斷性別
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.GeneralPersonalIdentity.isLocalFormat(System.String)">
            <summary>
            本國人id格式
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.GeneralPersonalIdentity.isForeignerFormat(System.String)">
            <summary>
            外國人id格式
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.GeneralPersonalIdentity.Gender">
            <summary>
            由身份證號判斷性別
            </summary>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.GeneralPersonalIdentity.IsValid">
            <summary>
            是否為本地人
            </summary>
        </member>
        <member name="M:CommonDomain.GeneralPersonalIdentity.ToString">
            <summary>
            轉換為字串
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.GeneralPersonalIdentity.Equals(System.Object)">
            <summary>
            是否為同一個物件參考
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.GeneralPersonalIdentity.Equals(CommonDomain.GeneralPersonalIdentity)">
            <summary>
            是否相等於另一個身分證字號結構
            </summary>
            <param name="identity">身分證字號結構</param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.GeneralPersonalIdentityFormatError">
            <summary>
            身分證字號格式錯誤
            </summary>
        </member>
        <member name="M:CommonDomain.GeneralPersonalIdentityFormatError.Instance">
            <summary>
            取得實例
            </summary>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.GeneralPersonalIdentityFormatError.CommonDomain#IGeneralPersonalIdentity#IsValid">
            <summary>
            是否合法
            </summary>
        </member>
        <member name="P:CommonDomain.GeneralPersonalIdentityFormatError.IsLocal">
            <summary>
            是否為本地人
            </summary>
        </member>
        <member name="M:CommonDomain.GeneralPersonalIdentityFormatError.ToString">
            <summary>
            錯誤說明
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.GeneralPersonalIdentityParsingError">
            <summary>
            身分證字號剖析錯誤
            </summary>
        </member>
        <member name="M:CommonDomain.GeneralPersonalIdentityParsingError.Instance">
            <summary>
            取得實例
            </summary>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.GeneralPersonalIdentityParsingError.CommonDomain#IGeneralPersonalIdentity#IsValid">
            <summary>
            是否合法
            </summary>
        </member>
        <member name="P:CommonDomain.GeneralPersonalIdentityParsingError.IsLocal">
            <summary>
            是否為本地人
            </summary>
        </member>
        <member name="M:CommonDomain.GeneralPersonalIdentityParsingError.ToString">
            <summary>
            錯誤說明
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.History`1.FindBy(System.DateTime)">
            <summary>
            依照<paramref name="date"/>查詢該日期的<see cref="!:&lt;T&gt;"/>
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.History`1.Find(System.Predicate{CommonDomain.TimePeriod})">
            <summary>
            查詢符合<paramref name="match"/>的<see cref="T:CommonDomain.IHistory`1"/>
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.History`1.Find(System.Predicate{`0})">
            <summary>
            查詢符合<paramref name="match"/>的<see cref="T:CommonDomain.IHistory`1"/>
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.History`1.FindRecently(System.Int32)">
            <summary>
            查詢最近<paramref name="number"/>筆的<see cref="!:&lt;T&gt;"/>
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.History`1.Add(CommonDomain.TimePeriod,`0)">
            <summary>
            新增
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:CommonDomain.History`1.ContainsKey(CommonDomain.TimePeriod)">
            <summary>
            是否包含<paramref name="key"/>索引
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.History`1.Keys">
            <summary>
            取得所有的索引值
            </summary>
        </member>
        <member name="M:CommonDomain.History`1.Remove(CommonDomain.TimePeriod)">
            <summary>
            移除<paramref name="key"/>索引的值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.History`1.TryGetValue(CommonDomain.TimePeriod,`0@)">
            <summary>
            取得<paramref name="key"/>索引的值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.History`1.Values">
            <summary>
            取得所有Value
            </summary>
        </member>
        <member name="M:CommonDomain.History`1.Contains(System.Collections.Generic.KeyValuePair{CommonDomain.TimePeriod,`0})">
            <summary>
            包含<paramref name="item"/>時，則回傳True
            </summary>
            <param name="item"></param>
            <returns></returns>
            <remarks>須Key與Value皆要相同才會回傳True</remarks>
        </member>
        <member name="M:CommonDomain.History`1.validationKeyIsExist(CommonDomain.TimePeriod)">
            <summary>
            驗證<paramref name="key"/>是否已存在，或者與目前的Key值重疊
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.Identity">
            <summary>
            唯一識別物件擴充
            </summary>
        </member>
        <member name="M:CommonDomain.Identity.CreateInstance``1(``0[])">
            <summary>
            生成
            </summary>
            <typeparam name="TArg">做為識別物件的類型</typeparam>
            <param name="args">識別物件陣列</param>
            <returns>唯一識別物件</returns>
        </member>
        <member name="M:CommonDomain.Identity.CreateInstance``1(``0)">
            <summary>
            生成
            </summary>
            <typeparam name="TArg">做為識別物件的類型</typeparam>
            <param name="arg">識別物件</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Identity.IsNullObject``1(CommonDomain.Identity{``0})">
            <summary>
            是否為Null物件
            </summary>
            <typeparam name="TArg">做為識別物件的類型</typeparam>
            <param name="identity">識別物件</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Identity.Equals``1(CommonDomain.Identity{``0},CommonDomain.Identity{``0})">
            <summary>
            比較識別物件是否相等
            </summary>
            <typeparam name="T">做為識別物件的類型</typeparam>
            <param name="obj1">比較物件</param>
            <param name="obj2">被比較物件</param>
            <returns>0 為相等, 1表示obj1 大於 obj2, -1則表示 obj1 小於obj2</returns>
        </member>
        <member name="T:CommonDomain.Identity`1">
            <summary>
            識別物件, 可接受多值做為識別項目
            </summary>
            <typeparam name="T">做為識別物件的類型</typeparam>
            <remarks>
            本物件非常適用於關聯式資料庫中的Master及Detail中。
            可於Detail中使用一組以上的識別項目，其中包含Master的鍵值.
            </remarks>
        </member>
        <member name="M:CommonDomain.Identity`1.#ctor(`0)">
            <summary>
            建構式
            </summary>
            <param name="arg">識別物件值</param>
        </member>
        <member name="M:CommonDomain.Identity`1.#ctor(`0[])">
            <summary>
            建構式, 多載.
            </summary>
            <param name="args">識別物件值陣列</param>
        </member>
        <member name="M:CommonDomain.Identity`1.Value">
            <summary>
            取得識別物件值
            </summary>
            <returns>識別物件值</returns>
            <remarks>則傳回第一個(第0個位置)值</remarks>
            <exception cref="T:System.InvalidOperationException">若識別物件為多值情形時, 則拋例外</exception>
        </member>
        <member name="M:CommonDomain.Identity`1.Value(System.Int32)">
            <summary>
            依參數取得識別物件值, 取得方式以第0位置計算
            </summary>
            <param name="index">指定識別物件所存放的位置, 以0計算</param>
            <returns>識別物件值</returns>
        </member>
        <member name="P:CommonDomain.Identity`1.Item(System.Int32)">
            <summary>
            依參數取得識別物件值, 取得方式以第0位置計算
            </summary>
            <param name="index">指定識別物件所存放的位置, 以0計算</param>
            <returns>識別物件值</returns>
        </member>
        <member name="M:CommonDomain.Identity`1.ToArray">
            <summary>
            將識別物件多值轉換為陣列物件
            </summary>
            <returns><typeparamref name="T"/></returns>
        </member>
        <member name="P:CommonDomain.Identity`1.IsNullObject">
            <summary>
            是否為空物件
            </summary>
        </member>
        <member name="M:CommonDomain.Identity`1.ToString">
            <summary>
            將物件識別物件值轉為字串
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="P:CommonDomain.Identity`1.CommonUtilities#IIdentifier{T}#Id">
            <summary>
            取得識別物件值
            </summary>
            <exception cref="T:System.InvalidOperationException">若識別物件為多值情形時, 則拋例外</exception>
        </member>
        <member name="M:CommonDomain.Identity`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CommonDomain.Identity`1.Equals(System.Object)">
            <summary>
            Determines whether two Object instances are equal. 
            </summary>
            <param name="obj">被比較的物件</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:CommonDomain.Identity`1.Equals(CommonDomain.Identity{`0})">
            <summary>
            將逐一比較Identyty物件中的所有參數是否相同; 若皆相同, 則傳回true; 反之則false.
            </summary>
            <param name="otherIdentity"></param>
            <returns>
            true if the specified Identity<typeparamref name="T"/> is equal to the current Identity<typeparamref name="T"/> or ; otherwise, false.
            </returns>
        </member>
        <member name="M:CommonDomain.Identity`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:CommonDomain.Identity`1.op_Equality(CommonDomain.Identity{`0},CommonDomain.Identity{`0})">
            <summary>
            For predefined value types, the equality operator (==) returns true if the values of its operands are equal, false otherwise.
            </summary>
            <param name="domain1">比較識別1</param>
            <param name="domain2">比較識別2</param>
            <returns>Returns true if the values of its operands are equal, false otherwise.</returns>
        </member>
        <member name="M:CommonDomain.Identity`1.op_Inequality(CommonDomain.Identity{`0},CommonDomain.Identity{`0})">
            <summary>
            
            </summary>
            <param name="domain1"></param>
            <param name="domain2"></param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.Interest">
            <summary>
            利率
            </summary>
        </member>
        <member name="P:CommonDomain.Interest.ValueText">
            <summary>
            利率值
            </summary>       
        </member>
        <member name="P:CommonDomain.Interest.PercentageValue">
            <summary>
            利率以百分比呈現
            </summary>
        </member>
        <member name="T:CommonDomain.IAccount`2">
            <summary>
            Using Accounting or inventory pattern.
            </summary>
            <typeparam name="TAmount">amount</typeparam>
            <typeparam name="TUnit">Unit</typeparam>
        </member>
        <member name="M:CommonDomain.IAccount`2.Balance">
            <summary>
            The account total quantity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IAccount`2.Balance(CommonDomain.TimePeriod)">
            <summary>
            The account total quantity in a period.
            </summary>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IAccountabilities`1.Commissioners">
            <summary>
            取得委託方
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IAccountabilities`1.Responsibles">
            <summary>
            取得責任方
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IAccountabilities`1.FetchCommissioners(CommonDomain.AccountabilityType)">
            <summary>
            取得委託方
            </summary>
            <remarks>EX:取得主管,父母</remarks>
            <param name="parties"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IAccountabilities`1.FetchResponsibles(CommonDomain.AccountabilityType)">
            <summary>
            取得責任方
            </summary>
            <param name="parties">EX:取得部屬,子女</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.IAccountability`1">
            <summary>
            責任關係物件, 提供兩個<see cref="!:IParty"/>間的責任主從關係.
            </summary>
        </member>
        <member name="P:CommonDomain.IAccountability`1.Commissioner">
            <summary>
            委託方
            </summary>
        </member>
        <member name="P:CommonDomain.IAccountability`1.Responsible">
            <summary>
            責任方
            </summary>
        </member>
        <member name="P:CommonDomain.IAccountability`1.Type">
            <summary>
            責任類型
            </summary>
        </member>
        <member name="P:CommonDomain.IAccountability`1.Period">
            <summary>
            適用區間
            </summary>
        </member>
        <member name="T:CommonDomain.IAccountability`3">
            <summary>
            責任關係物件, 提供兩個<see cref="!:IParty"/>間的責任主從關係.
            </summary>
            <typeparam name="TCommissioner">委託方物件類別, 必須為<see cref="!:IParty(Of TId)"/>.</typeparam>
            <typeparam name="TResponsible">責任方物件類別, 必須為<see cref="!:IParty(Of TId)"/>.</typeparam>
            <typeparam name="TId">必須為</typeparam>
        </member>
        <member name="P:CommonDomain.IAccountability`3.Commissioner">
            <summary>
            委託方
            </summary>
        </member>
        <member name="P:CommonDomain.IAccountability`3.Responsible">
            <summary>
            責任方
            </summary>
        </member>
        <member name="T:CommonDomain.ICalculator`1">
            <summary>
            計算器
            </summary>
        </member>
        <member name="M:CommonDomain.ICalculator`1.Calculate">
            <summary>
            計算
            </summary>
            <returns>回傳值</returns>
        </member>
        <member name="T:CommonDomain.ICommissionersAccountabilities`1">
            <summary>
            責任關係之委託方的集合界面
            </summary>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="T:CommonDomain.IResponsiblesAccountabilities`1">
            <summary>
            責任關係之責任方的集合界面
            </summary>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="T:CommonDomain.IContact`1">
            <summary>
            連絡人資訊
            </summary>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="P:CommonDomain.IContact`1.Name">
            <summary>
            名稱, 姓名
            </summary>
        </member>
        <member name="P:CommonDomain.IContact`1.Addresses">
            <summary>
            住址集合
            </summary>
            <remarks>因考慮到未來可能相同的<see cref="T:CommonDomain.AddressOptions"/>會有可個<see cref="T:CommonDomain.Address"/>的需求, 故不使用<seealso cref="!:IDictionary(Of TKey, TValue)"/>界面.</remarks>
        </member>
        <member name="P:CommonDomain.IContact`1.Phones">
            <summary>
            電話集合
            </summary>
            <remarks>因考慮到未來可能相同的<see cref="T:CommonDomain.PhoneOptions"/>會有可個<see cref="T:CommonDomain.PhoneNumber"/>的需求, 故不使用<seealso cref="!:IDictionary(Of TKey, TValue)"/>界面.</remarks>
        </member>
        <member name="P:CommonDomain.IContact`1.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:CommonDomain.IContact`1.InstantMessagingAccounts">
            <summary>
            即時通訊帳號
            </summary>
        </member>
        <member name="P:CommonDomain.IContact`1.Activities">
            <summary>
            活動, 紀念日
            </summary>
        </member>
        <member name="P:CommonDomain.IContact`1.IPPhones">
            <summary>
            網路電話
            </summary>
        </member>
        <member name="P:CommonDomain.IContact`1.PersonalWebSite">
            <summary>
            個人網站
            </summary>
        </member>
        <member name="P:CommonDomain.IContact`1.Note">
            <summary>
            備註
            </summary>
        </member>
        <member name="P:CommonDomain.IDateEvent.DateTime">
            <summary>
            Gets the date time.
            </summary>
            <value>
            The date time.
            </value>
        </member>
        <member name="P:CommonDomain.IDateEvent.IsHoliday">
            <summary>
            Gets or sets a value indicating whether this instance is holiday.
            </summary>
            <value>
            <c>true</c> if this instance is holiday; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonDomain.IDateEvent.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:CommonDomain.IDateEvent.Note">
            <summary>
            Gets or sets the note.
            </summary>
            <value>
            The note.
            </value>
        </member>
        <member name="T:CommonDomain.IEntry`2">
            <summary>
            An allocation of sum of memory.
            </summary>
            <typeparam name="TAmount"></typeparam>
            <typeparam name="TUnit"></typeparam>
        </member>
        <member name="T:CommonDomain.IFinder`2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TId">The type of the identifier.</typeparam>
        </member>
        <member name="M:CommonDomain.IFinder`2.FindBy(`1)">
            <summary>
            Finds the by.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IFinder`2.FetchAll">
            <summary>
            Fetches all.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.IGeneralPersonalIdentity">
            <summary>
            提供身分證字號資訊
            </summary>
        </member>
        <member name="P:CommonDomain.IGeneralPersonalIdentity.IsValid">
            <summary>
            <see cref="!:True"/>表示合法Id, 反之則否
            </summary>
        </member>
        <member name="P:CommonDomain.IGeneralPersonalIdentity.IsLocal">
            <summary>
            <see cref="!:True"/>表示為本國人, 反之則為外國人
            </summary>
        </member>
        <member name="M:CommonDomain.IHistory`1.FindBy(System.DateTime)">
            <summary>
            依照<paramref name="date"/>查詢該日期的<see cref="T:CommonDomain.IHistory`1"/>
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IHistory`1.Find(System.Predicate{CommonDomain.TimePeriod})">
            <summary>
            查詢符合<paramref name="match"/>的<see cref="T:CommonDomain.IHistory`1"/>
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IHistory`1.Find(System.Predicate{`0})">
            <summary>
            查詢符合<paramref name="match"/>的<see cref="T:CommonDomain.IHistory`1"/>
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IHistory`1.FindRecently(System.Int32)">
            <summary>
            查詢最近<paramref name="number"/>筆的<see cref="T:CommonDomain.IHistory`1"/>
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.IInvalidReason`1">
            <summary>
            
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="P:CommonDomain.IInvalidReason`1.Message">
            <summary>
            Gets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:CommonDomain.IInvalidReason`1.Target">
            <summary>
            Gets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="P:CommonDomain.IInvalidReason`1.TypeOfValidator">
            <summary>
            Gets the type of validator.
            </summary>
            <value>
            The type of validator.
            </value>
        </member>
        <member name="P:CommonDomain.IInvalidReason`1.NestedIInvalidReasons">
            <summary>
            Gets the nested i invalid reasons.
            </summary>
            <value>
            The nested i invalid reasons.
            </value>
        </member>
        <member name="T:CommonDomain.IInvalidReason">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonDomain.ILocation">
            <summary>
            位置資訊
            </summary>
        </member>
        <member name="T:CommonDomain.ILocation`1">
            <summary>
            位置資訊
            </summary>
        </member>
        <member name="P:CommonDomain.ILocation`1.Address">
            <summary>
            住址
            </summary>
            <remarks>因考慮到未來可能相同的<see cref="T:CommonDomain.AddressOptions"/>會有可個<see cref="P:CommonDomain.ILocation`1.Address"/>的需求, 故不使用<seealso cref="!:IDictionary(Of TKey, TValue)"/>界面.</remarks>
        </member>
        <member name="P:CommonDomain.ILocation`1.Phone">
            <summary>
            電話
            </summary>
            <remarks>因考慮到未來可能相同的<see cref="T:CommonDomain.PhoneOptions"/>會有可個<see cref="T:CommonDomain.PhoneNumber"/>的需求, 故不使用<seealso cref="!:IDictionary(Of TKey, TValue)"/>界面.</remarks>
        </member>
        <member name="P:CommonDomain.ILocation`1.Period">
            <summary>
            存取資訊有效區間
            </summary>
        </member>
        <member name="T:CommonDomain.ILocationCollection`1">
            <summary>
            提供<seealso cref="!:ILocation(Of TId)"/>集合, 並有登記簽入及退出的機制.
            </summary>
            <remarks>
            不論任何時刻,當下僅能有一個<seealso cref="!:ILocation(Of TId)"/>為登記簽入的狀態.(即<seealso cref="!:ILocation(Of TId).Period.IsSomeDateAfter" />只有一個).
            另外, 所有的記錄不應該有重疊.(即<seealso cref="!:ILocation(Of TId).Period"/>不能OverLap). 但可以不連續.
            若須判斷多個<seealso cref="!:ILocation(Of TId)"/>彼此間須連續, 可繼承此物件擴充或改寫判斷式.
            </remarks>
        </member>
        <member name="M:CommonDomain.ILocationCollection`1.CheckOutCurrent(System.DateTime)">
            <summary>
            簽出目前的Location.
            </summary>
            <param name="checkOutDate"></param>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:CommonDomain.ILocationCollection`1.CurrentCheckInExist">
            <summary>
            目前是否有登記的<seealso cref="!:ILocation(Of TId)"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ILocationCollection`1.CheckInNew(CommonDomain.ILocation{`0})">
            <summary>
            簽入新的<seealso cref="!:ILocation(Of TId)"/>.
            </summary>
            <param name="newItem"></param>
            <remarks>
            當簽入新的Location前, 本物件會自動將當前的Lication簽出, 並以新的Location的簽入起始時間前一秒簽出. 
            若須以其它單位(如天)簽出, 請自行先呼叫<seealso cref="!:"/>, 再呼叫本方法.
            </remarks>
        </member>
        <member name="M:CommonDomain.ILocationCollection`1.CurrentCheckIn">
            <summary>
            取得目前登記的<seealso cref="!:ILocation(Of TId)"/>.
            </summary>
            <returns>若目前無登記的<seealso cref="!:ILocation(Of TId)"/>, 則將傳回<c>null</c>.</returns>
        </member>
        <member name="M:CommonDomain.ILocationCollection`1.LastCheckIn">
            <summary>
            最後登記的記錄
            </summary>
            <remarks>最後登記的<seealso cref="!:ILocation(Of TId)"/>的記錄並不表示目前已簽出.若須要目前已簽出的最後一個登記, 請呼叫<seealso cref="!:LocationCollection.PreviousCheckIn"/></remarks>
        </member>
        <member name="M:CommonDomain.ILocationCollection`1.PreviousCheckIn">
            <summary>
            上一次登記的<seealso cref="!:ILocation(Of TId)"/>.
            </summary>
            <returns>若無上一次登記的<seealso cref="!:ILocation(Of TId)"/>, 則回傳<c>null</c>.</returns>
        </member>
        <member name="T:CommonDomain.ILocationCollection`2">
            <summary>
            提供<seealso cref="!:ILocation(Of TId)"/>集合, 並有登記簽入及退出的機制.
            </summary>
            <typeparam name="TId">必須符合<seealso cref="!:IEquatable(Of TId)"/></typeparam>
            <typeparam name="TLocation">必須是一個<seealso cref="!:ILocation(Of TId)"/>型別</typeparam>
            <remarks>
            不論任何時刻,當下僅能有一個<seealso cref="!:ILocation(Of TId)"/>為登記簽入的狀態.(即<seealso cref="!:ILocation(Of TId).Period.IsSomeDateAfter" />只有一個).
            另外, 所有的記錄不應該有重疊.(即<seealso cref="!:ILocation(Of TId).Period"/>不能OverLap). 但可以不連續.
            若須判斷多個<seealso cref="!:ILocation(Of TId)"/>彼此間須連續, 可繼承此物件擴充或改寫判斷式.
            </remarks>
        </member>
        <member name="M:CommonDomain.ILocationCollection`2.CheckOutCurrent(System.DateTime)">
            <summary>
            簽出目前的Location.
            </summary>
            <param name="checkOutDate"></param>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:CommonDomain.ILocationCollection`2.CurrentCheckInExist">
            <summary>
            目前是否有登記的<seealso cref="!:ILocation(Of TId)"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ILocationCollection`2.CheckInNew(`0)">
            <summary>
            簽入新的<seealso cref="!:ILocation(Of TId)"/>.
            </summary>
            <param name="newItem"></param>
            <remarks>
            當簽入新的Location前, 本物件會自動將當前的Lication簽出, 並以新的Location的簽入起始時間前一秒簽出. 
            若須以其它單位(如天)簽出, 請自行先呼叫<seealso cref="!:"/>, 再呼叫本方法.
            </remarks>
        </member>
        <member name="M:CommonDomain.ILocationCollection`2.CurrentCheckIn">
            <summary>
            取得目前登記的<seealso cref="!:ILocation(Of TId)"/>.
            </summary>
            <returns>若目前無登記的<seealso cref="!:ILocation(Of TId)"/>, 則將傳回<c>null</c>.</returns>
        </member>
        <member name="M:CommonDomain.ILocationCollection`2.LastCheckIn">
            <summary>
            最後登記的記錄
            </summary>
            <remarks>最後登記的<seealso cref="!:ILocation(Of TId)"/>的記錄並不表示目前已簽出.若須要目前已簽出的最後一個登記, 請呼叫<seealso cref="!:LocationCollection.PreviousCheckIn"/></remarks>
        </member>
        <member name="M:CommonDomain.ILocationCollection`2.PreviousCheckIn">
            <summary>
            上一次登記的<seealso cref="!:ILocation(Of TId)"/>.
            </summary>
            <returns>若無上一次登記的<seealso cref="!:ILocation(Of TId)"/>, 則回傳<c>null</c>.</returns>
        </member>
        <member name="T:CommonDomain.IMoney">
            <summary>The common interface for simple Monies and MoneyBags.</summary>
        </member>
        <member name="M:CommonDomain.IMoney.Add(CommonDomain.IMoney)">
            <summary>Adds a money to this money.</summary>
        </member>
        <member name="P:CommonDomain.IMoney.IsZero">
            <value>True if this money is zero.</value>
        </member>
        <member name="M:CommonDomain.IMoney.Multiply(System.Int32)">
            <summary>Multiplies a money by the given factor.</summary>
        </member>
        <member name="M:CommonDomain.IMoney.Negate">
            <summary>Negates this money.</summary>
        </member>
        <member name="M:CommonDomain.IMoney.Subtract(CommonDomain.IMoney)">
            <summary>Subtracts a money from this money.</summary>
        </member>
        <member name="T:CommonDomain.IObservation">
            <summary>
            觀測介面
            </summary>
        </member>
        <member name="P:CommonDomain.IObservation.IsCritical">
            <summary>
            是否為必要條件
            </summary>
            <remarks>
            若為必要條件, 則高風險將不會通過(Fail).
            </remarks>
        </member>
        <member name="P:CommonDomain.IObservation.Content">
            <summary>
            內容
            </summary>
        </member>
        <member name="P:CommonDomain.IObservation.OptionType">
            <summary>
            選項類型
            </summary>
        </member>
        <member name="M:CommonDomain.IObservation.Options">
            <summary>
            選擇項目
            </summary>
        </member>
        <member name="M:CommonDomain.IObservation`1.Options">
            <summary>
            選擇項目
            </summary>
        </member>
        <member name="T:CommonDomain.IObservationFactory">
            <summary>
            Observation建立工廠介面
            </summary>
        </member>
        <member name="M:CommonDomain.IObservationFactory.CreateObservation">
            <summary>
            建立一個ObservationBase型別的Instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.ObservationForBooleanFactory">
            <summary>
            是非題建立工廠
            </summary>
        </member>
        <member name="M:CommonDomain.ObservationForBooleanFactory.CreateObservation">
            <summary>
            建立一個是非題
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.ObservationForRangeFactory">
            <summary>
            數值區間選項題建立工廠
            </summary>
        </member>
        <member name="M:CommonDomain.ObservationForRangeFactory.CreateObservation">
            <summary>
            建立一個數值區間選項題
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.ObservationFactory">
            <summary>
            文字選項題建立工廠
            </summary>
        </member>
        <member name="M:CommonDomain.ObservationFactory.CreateObservation">
            <summary>
            建立一個文字選項題
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.IObservationOption`1">
            <summary>
            選擇項目
            </summary>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="P:CommonDomain.IObservationOption`1.Value">
            <summary>
            選項內容
            </summary>
        </member>
        <member name="T:CommonDomain.IObservationOption">
            <summary>
            選擇項目
            </summary>
        </member>
        <member name="P:CommonDomain.IObservationOption.Selected">
            <summary>
            是否被選
            </summary>
        </member>
        <member name="P:CommonDomain.IObservationOption.Rank">
            <summary>
            等級
            </summary>
        </member>
        <member name="P:CommonDomain.IObservationOption.Value">
            <summary>
            選項內容
            </summary>
        </member>
        <member name="M:CommonDomain.IObservationOptionCollection`1.IndexOf(`0)">
            <summary>
            Returns the zero-based index of the first occurrence of a value in the IObservationOptionCollection{TType} or 
            in a portion of it. 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IObservationOptionCollection`1.Contains(`0)">
            <summary>
            Determines whether an element is in the IObservationOptionCollection{TType}.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IObservationOptionCollection`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the first occurrence within the entire IObservationOptionCollection{TType}. 
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.IObservationOptionCollection`1.SelectedIndex">
            <summary>
            取得或設定項目中選定的次序(由0計算)
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定的次序不在選項中</exception>
        </member>
        <member name="P:CommonDomain.IObservationOptionCollection`1.SelectedValue">
            <summary>
            取得或設定項目中選定的值
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定的值不在選項中</exception>
        </member>
        <member name="P:CommonDomain.IObservationOptionCollection`1.SelectedItem">
            <summary>
            取得所選的<see cref="!:IObservationOption&lt;TType&gt;>"/>.
            </summary>
        </member>
        <member name="M:CommonDomain.IObservationOptionCollection`1.ClearSelection">
            <summary>
            清空所有選項
            </summary>
        </member>
        <member name="T:CommonDomain.IParty`1">
            <summary>
            個體
            </summary>
            <remarks>客戶、員工、部門</remarks>
        </member>
        <member name="P:CommonDomain.IParty`1.Name">
            <summary>
            名稱
            </summary>
        </member>
        <member name="P:CommonDomain.IParty`1.Locations">
            <summary>
            位置資訊
            </summary>
        </member>
        <member name="P:CommonDomain.IParty`1.Commissioners">
            <summary>
            取得委託方
            </summary>
            <remarks>EX:取得主管,父母</remarks>
            <param name="parties"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.IParty`1.Responsiblies">
            <summary>
            取得責任方
            </summary>
            <param name="parties">EX:取得部屬,子女</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.IPerson`1">
            <summary>
            個人
            </summary>
        </member>
        <member name="P:CommonDomain.IPerson`1.PersonalId">
            <summary>
            存取身份證號屬性.
            </summary>
        </member>
        <member name="P:CommonDomain.IPerson`1.Gender">
            <summary>
            存取性別屬性.
            </summary>
        </member>
        <member name="P:CommonDomain.IPerson`1.Birthday">
            <summary>
            生日
            </summary>
        </member>
        <member name="P:CommonDomain.IPerson`1.Mail">
            <summary>
            電子郵件
            </summary>
        </member>
        <member name="M:CommonDomain.IPerson`1.GetAge">
            <summary>
            取得年齡
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IPerson`1.GetConstellation(CommonDomain.IConstellationStrategy)">
            <summary>
            取得星座
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.IPersonalIdentity">
            <summary>
            提供身分證字號資訊
            </summary>
        </member>
        <member name="T:CommonDomain.IRange`1">
            <summary>
            區間界面, 用來表示一區間結構
            </summary>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="M:CommonDomain.IRange`1.HasInclude(`0)">
            <summary>
            是否包含目標物件
            </summary>
            <param name="target">目標物件</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IRange`1.HasLessThan(`0)">
            <summary>
            判斷是否比傳入的參數小
            </summary>
            <param name="target">傳入的參數</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IRange`1.HasMoreThen(`0)">
            <summary>
            判斷是否比傳入的參數大
            </summary>
            <param name="target"></param>
            <returns>If true the instance more than parameter, otherwise false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CommonDomain.IRange`1.HasOverlap(CommonDomain.IRange{`0})">
            <summary>
            和目標物件是否有重疊
            </summary>
            <param name="target">目標物件</param>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.IRange`1.Lower">
            <summary>
            Lower value in range
            </summary>
        </member>
        <member name="P:CommonDomain.IRange`1.Upper">
            <summary>
            Upper value in range
            </summary>
        </member>
        <member name="P:CommonDomain.IUnit.UnitKind">
            <summary>
            單位性質<see cref="P:CommonDomain.IUnit.UnitKind"/>
            </summary>
            <remarks>Base, Derived</remarks>
        </member>
        <member name="P:CommonDomain.IUnit.UnitType">
            <summary>
            單位類別<see cref="P:CommonDomain.IUnit.UnitType"/>
            </summary>
        </member>
        <member name="T:CommonDomain.IValidationResult`1">
            <summary>
            驗證結果, 由<seealso cref="T:CommonDomain.IValidator`2"/>回傳.
            </summary>
            <typeparam name="TTarget">The type of the validate target.</typeparam>
        </member>
        <member name="P:CommonDomain.IValidationResult`1.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonDomain.IValidationResult`1.Count">
            <summary>
            Count of invalid reasons.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:CommonDomain.IValidationResult`1.Add(CommonDomain.IInvalidReason{`0})">
            <summary>
            Adds the specified reason.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:CommonDomain.IValidationResult`1.Add(System.Collections.Generic.IEnumerable{CommonDomain.IInvalidReason{`0}})">
            <summary>
            Adds the specified reasons.
            </summary>
            <param name="reasons">The reasons.</param>
        </member>
        <member name="P:CommonDomain.IValidationResult`1.InvalidReasons">
            <summary>
            Gets the invalid reasons.
            </summary>
            <value>
            The invalid reasons.
            </value>
        </member>
        <member name="T:CommonDomain.IValidator`2">
            <summary>
            驗證器界面
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TResult">The type of the validResult.</typeparam>
        </member>
        <member name="M:CommonDomain.IValidator`2.Validate(`0)">
            <summary>
            Validates the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.IWorkingCalendar`1">
            <summary>
            Working calendar interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:CommonDomain.IWorkingCalendar`1.DateTimeFormat">
            <summary>
            Gets the date time format.
            </summary>
            <value>
            The date time format.
            </value>
        </member>
        <member name="P:CommonDomain.IWorkingCalendar`1.HolidayOfWeek">
            <summary>
            Gets the default holiday of week.
            </summary>
            <value>
            The holiday of week.
            </value>
        </member>
        <member name="P:CommonDomain.IWorkingCalendar`1.DateEvents">
            <summary>
            Gets or sets the event of dates.
            </summary>
            <value>
            The event of dates.
            </value>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.AddDays(System.DateTime,System.Int32)">
            <summary>
            Adds the days.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="days">The days.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetWorkingdayOfMonth(System.DateTime)">
            <summary>
            Returns the day of the month in the specified DateTime.
            </summary>
            <param name="time"></param>
            <returns></returns>
            <remarks>取得指定日期中在該月份是第幾個工作日</remarks>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetWorkingdayOfWeek(System.DateTime)">
            <summary>
            Gets the day of week.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
            <remarks>取得指定日期中在該週是第幾個工作日</remarks>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetWorkingdayOfYear(System.DateTime)">
            <summary>
            Gets the day of year.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
            <remarks>取得指定日期中在該年是第幾個工作日</remarks>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetWorkingdaysIn(System.Int32,System.Int32)">
            <summary>
            Gets the days in month.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <returns></returns>
            <remarks>取得指定的年、月份中有多少工作日</remarks>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetWorkingdaysIn(System.Int32)">
            <summary>
            Gets the days in year.
            </summary>
            <param name="year">The year.</param>
            <returns></returns>
            <remarks>取得指定的年份中有多少工作日</remarks>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetWorkingdaysIn(CommonDomain.TimePeriod)">
            <summary>
            Gets the nonworkingdays.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
            <remarks>取得指定的<paramref name="period">期間</paramref>中, 有多少工作日</remarks>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetHolidaysIn(CommonDomain.TimePeriod)">
            <summary>
            Gets the holiday in.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
            <remarks>取得指定的<paramref name="period">期間</paramref>中, 有多少假日</remarks>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetHolidaysInYear(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the holidays in.
            </summary>
            <param name="year">The year.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetHolidaysInMonth(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the holidays in.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetFistWorkingdayInYear(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the fist workingday.
            </summary>
            <param name="year">The year.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetFistWorkingdayInMonth(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the fist workingday.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetLastWorkingdayInYear(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the last workingday.
            </summary>
            <param name="year">The year.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetLastWorkingdayInMonth(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the last workingday.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetFirstWorkingdayInWeek(System.DateTime)">
            <summary>
            Gets the first workingday in week.
            </summary>
            <param name="datetime">The datetime.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetLastWorkingdayInWeek(System.DateTime)">
            <summary>
            Gets the last workingday in week.
            </summary>
            <param name="datetime">The datetime.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetFirstHolidayInWeek(System.DateTime)">
            <summary>
            Gets the first holiday in week.
            </summary>
            <param name="datetime">The datetime.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetLastHolidayInWeek(System.DateTime)">
            <summary>
            Gets the last holiday in week.
            </summary>
            <param name="datetime">The datetime.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetFistHolidayInYear(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the fist holiday.
            </summary>
            <param name="year">The year.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetFistHolidayInMonth(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the fist holiday.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetLastHolidayInYear(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the last holiday.
            </summary>
            <param name="year">The year.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.GetLastHolidayInMonth(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the last holiday.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.NextWorkingday(System.DateTime)">
            <summary>
            Nexts the workingday.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>Not include specify <paramref name="value"/>.</remarks>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.PreviousWorkingday(System.DateTime)">
            <summary>
            Previouses the workingday.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>Not include specify <paramref name="value"/>.</remarks>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.NextHoliday(System.DateTime)">
            <summary>
            Nexts the holiday.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>Not include specify <paramref name="value"/>.</remarks>
        </member>
        <member name="M:CommonDomain.IWorkingCalendar`1.PreviousHoliday(System.DateTime)">
            <summary>
            Previouses the holiday.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>Not include specify <paramref name="value"/>.</remarks>
        </member>
        <member name="T:CommonDomain.Location`1">
            <summary>
            位置物件資訊
            </summary>
        </member>
        <member name="M:CommonDomain.Location`1.#ctor(`0,CommonDomain.Address,CommonDomain.PhoneNumber,CommonDomain.TimePeriod)">
            <summary>
            建構式
            </summary>
            <param name="id"></param>
            <param name="address"></param>
            <param name="phone"></param>
            <param name="period"></param>
        </member>
        <member name="P:CommonDomain.Location`1.Id">
            <summary>
            Identifier.
            </summary>
        </member>
        <member name="P:CommonDomain.Location`1.Address">
            <summary>
            區域位置所提供的<seealso cref="P:CommonDomain.Location`1.Address">住址</seealso>
            </summary>
        </member>
        <member name="P:CommonDomain.Location`1.Phone">
            <summary>
            區域位置所提供的<seealso cref="P:CommonDomain.Location`1.Phone">電話</seealso>
            </summary>
        </member>
        <member name="M:CommonDomain.Location`1.Equals(CommonDomain.Location{`0})">
            <summary>
            Determines whether the specified <see cref="!:Location"/> is equal to the current <see cref="!:Location"/>. 
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Location`1.System#IEquatable{CommonDomain#ILocation{TId}}#Equals(CommonDomain.ILocation{`0})">
            <summary>
            Determines whether the specified <see cref="!:Location"/> is equal to the current <see cref="!:Location"/>. 
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Location`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:CommonDomain.LocationCollection`2">
            <summary>
            提供<seealso cref="!:ILocation(Of TId)"/>集合, 並有登記簽入及退出的機制.
            </summary>
            <remarks>
            不論任何時刻,當下僅能有一個<seealso cref="!:ILocation(Of TId)"/>為登記簽入的狀態.(即<seealso cref="!:ILocation(Of TId).Period.IsSomeDateAfter" />只有一個).
            另外, 所有的記錄不應該有重疊.(即<seealso cref="!:ILocation(Of TId).Period"/>不能OverLap). 但可以不連續.
            若須判斷多個<seealso cref="!:ILocation(Of TId)"/>彼此間須連續, 可繼承此物件擴充或改寫判斷式.
            </remarks>
        </member>
        <member name="M:CommonDomain.LocationCollection`2.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="!:LocationCollection"/>.
            </summary>
            <param name="collection"></param>
            <exception cref="T:System.ArgumentNullException">collection is <c>null</c>.</exception>
        </member>
        <member name="M:CommonDomain.LocationCollection`2.CheckInNew(`0)">
            <summary>
            簽入新的<seealso cref="!:ILocation(Of TId)"/>.
            </summary>
            <param name="newItem"></param>
            <remarks>
            當簽入新的Location前, 本物件會自動將當前的Lication簽出, 並以新的Location的簽入起始時間前一秒簽出. 
            若須以其它單位(如天)簽出, 請自行先呼叫<see cref="M:CommonDomain.LocationCollection`2.CheckOutCurrent(System.DateTime)"/>, 再呼叫本方法.
            </remarks>
        </member>
        <member name="M:CommonDomain.LocationCollection`2.CurrentCheckIn">
            <summary>
            取得目前登記的<seealso cref="!:ILocation(Of TId)"/>.
            </summary>
            <returns>若目前無登記的<seealso cref="!:ILocation(Of TId)"/>, 則將傳回<c>null</c>.</returns>
        </member>
        <member name="M:CommonDomain.LocationCollection`2.CurrentCheckInExist">
            <summary>
            目前是否有登記的<seealso cref="!:ILocation(Of TId)"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.LocationCollection`2.LastCheckIn">
            <summary>
            最後登記的記錄
            </summary>
            <remarks>最後登記的<seealso cref="!:ILocation(Of TId)"/>的記錄並不表示目前已簽出.若須要目前已簽出的最後一個登記, 請呼叫<seealso cref="!:LocationCollection.PreviousCheckIn"/></remarks>
        </member>
        <member name="M:CommonDomain.LocationCollection`2.PreviousCheckIn">
            <summary>
            上一次登記的<seealso cref="!:ILocation(Of TId)"/>.
            </summary>
            <returns>若無上一次登記的<seealso cref="!:ILocation(Of TId)"/>, 則回傳<c>null</c>.</returns>
        </member>
        <member name="M:CommonDomain.LocationCollection`2.CheckOutCurrent(System.DateTime)">
            <summary>
            簽出目前的Location.
            </summary>
            <param name="checkOutDate"></param>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:CommonDomain.LocationCollection`2.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:CommonDomain.Money">
            <summary>
            Summary description for Money.
            Value object is data should be readonly or const. As the Money, amount can't change.
            If some client(e.g. Product) use this Money, and call Add method or Multiply, it sholud retrun new money
            not replace product's amount.
            </summary>
        </member>
        <member name="M:CommonDomain.Money.CreateInstance(System.Int64)">
            <summary>
            產生實體
            </summary>
            <param name="amount">金額</param>
            <returns>A money object.</returns>
        </member>
        <member name="M:CommonDomain.Money.CreateInstance(System.Int64,CommonDomain.Currency)">
            <summary>
            產生實體
            </summary>
            <param name="amount">金額</param>
            <param name="currency">幣別</param>
            <returns>A money object.</returns>
        </member>
        <member name="M:CommonDomain.Money.CreateInstance(System.Double)">
            <summary>
            產生實體
            </summary>
            <param name="amount">金額</param>
            <returns>A money object.</returns>
        </member>
        <member name="M:CommonDomain.Money.CreateInstance(System.Double,CommonDomain.Currency)">
            <summary>
            產生實體
            </summary>
            <param name="amount">金額</param>
            <param name="currency">幣別</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.CreateInstance(System.Decimal)">
            <summary>
            產生實體
            </summary>
            <param name="amount">金額</param>
            <returns>A money object.</returns>
        </member>
        <member name="M:CommonDomain.Money.CreateInstance(System.Decimal,CommonDomain.Currency)">
            <summary>
            產生實體
            </summary>
            <param name="amount">金額</param>
            <param name="currency">幣別</param>
            <returns>A money object.</returns>
        </member>
        <member name="M:CommonDomain.Money.CreateInstance(System.Decimal,System.String)">
            <summary>
            產生實體
            </summary>
            <param name="amount">金額</param>
            <param name="currencyIsoSymbol">幣別符號</param>
            <returns>A money object.</returns>
        </member>
        <member name="P:CommonDomain.Money.Currency">
            <summary>
            幣別
            </summary>
        </member>
        <member name="P:CommonDomain.Money.Amount">
            <summary>
            金額
            </summary>
        </member>
        <member name="M:CommonDomain.Money.ConvertTo(CommonDomain.Money)">
            <summary>
            The money convert to the other currency.
            </summary>
            <param name="money"></param>
            <returns>New money type. The money amount change are original currency to new currency.  </returns>
        </member>
        <member name="M:CommonDomain.Money.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object. 
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.Equals(CommonDomain.Money)">
            <summary>
            Determines whether the specified Money is equal to the current Money. 
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
            <remarks>不考慮外幣於該地的格式，僅依本地文化的幣別表示方式呈現</remarks>
        </member>
        <member name="P:CommonDomain.Money.CommonDomain#IQuantity{System#Decimal,CommonDomain#Currency}#Unit">
            <summary>
            實作<see cref="!:IQuantity"/>界面
            </summary>
        </member>
        <member name="M:CommonDomain.Money.CommonDomain#IMoney#Add(CommonDomain.IMoney)">
            <summary>
            提供Money相加
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.Money.IsZero">
            <summary>
            True為零元, 反之則否.
            </summary>
        </member>
        <member name="M:CommonDomain.Money.CommonDomain#IMoney#Multiply(System.Int32)">
            <summary>
            針對傳入的因子進行乘法運算
            </summary>
            <param name="factor">被乘因子</param>
            <returns>回傳計算完後新的Money物件</returns>
        </member>
        <member name="M:CommonDomain.Money.CommonDomain#IMoney#Divide(System.Int32)">
            <summary>
            針對傳入的數目進行除法(分配)的運算
            </summary>
            <param name="divisor"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.CommonDomain#IMoney#Subtract(CommonDomain.IMoney)">
            <summary>
            針對傳入的錢進行相減的方法
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.CommonDomain#IMoney#Negate">
            <summary>
            將目前的錢換成負值.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.CreateZenoMoney">
            <summary>
            產生一個0元的新實體，幣別以預設的文化為主
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns>Return zero mean is the instance are equal to obj, return less than zero mean is instance are less than obj, 
            return greater than zero mean is instance are greater than obj </returns>
            <exception cref="T:System.ArithmeticException">money currency math mismatch</exception>
        </member>
        <member name="M:CommonDomain.Money.Add(CommonDomain.Money)">
            <summary>
            提供Money相加
            </summary>
            <param name="money"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.Multiply(System.Int32)">
            <summary>
            針對傳入的因子進行乘法運算
            </summary>
            <param name="factor">被乘因子</param>
            <returns>回傳計算完後新的Money物件</returns>
        </member>
        <member name="M:CommonDomain.Money.Multiply(System.Decimal)">
            <summary>
            針對傳入的因子進行乘法運算
            </summary>
            <param name="factor">被乘因子</param>
            <returns>回傳計算完後新的Money物件</returns>
        </member>
        <member name="M:CommonDomain.Money.Multiply(System.Double)">
            <summary>
            針對傳入的因子進行乘法運算
            </summary>
            <param name="factor">被乘因子</param>
            <returns>回傳計算完後新的Money物件</returns>
        </member>
        <member name="M:CommonDomain.Money.Negate">
            <summary>
            將目前的錢換成負值.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.Allocate(System.Int32)">
            <summary>
            將錢的金額分成指定的等份, 取得至整數位.採依循分配方式
            </summary>
            <param name="part">傳入欲分配的等份</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.Allocate(System.Int32,System.Boolean)">
            <summary>
            將錢的金額分成指定的等份, 取得至整數位.採依循分配方式
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.Allocate(System.Int64[])">
            <summary>
            Allocate Money to many part.
            </summary>
            <example>If there have 500 dollars, and to part 3/5 and 2/5.
             The ratios can type [3,2] and get two money object.
             One is 300, the other is 200.
             </example>
            <param name="ratios">The Ratios determine the money allocate to how many part.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.Allocate(System.Int64[],System.Boolean)">
            <summary>
            Allocate Money to many part.
            </summary>
            <example>If there have 500 dollars, and to part 3/5 and 2/5.
             The ratios can type [3,2] and get two money object.
             One is 300, the other is 200.
             </example>
            <param name="ratios">The Ratios determine the money allocate to how many part.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.GreaterThan(CommonDomain.IMoney)">
            <summary>
            比較傳入金額，若大於所傳入金額則回傳True，反正則false.
            </summary>
            <param name="other"></param>
            <returns></returns>
            <exception cref="T:System.ArithmeticException">money currency math mismatch</exception>
        </member>
        <member name="M:CommonDomain.Money.LessThan(CommonDomain.IMoney)">
            <summary>
            比較傳入金額，若大於所傳入金額則回傳True，反正則false.
            </summary>
            <param name="other"></param>
            <returns></returns>
            <exception cref="T:System.ArithmeticException">money currency math mismatch</exception>
        </member>
        <member name="M:CommonDomain.Money.op_Addition(CommonDomain.Money,CommonDomain.Money)">
            <summary>
            覆寫運算元+的計算方式
            </summary>
            <param name="money1"></param>
            <param name="money2"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.op_Subtraction(CommonDomain.Money,CommonDomain.Money)">
            <summary>
            覆寫運算元-的計算方式
            </summary>
            <param name="money1"></param>
            <param name="money2"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.op_UnaryNegation(CommonDomain.Money)">
            <summary>
            覆寫運算元*的計算方式
            </summary>
            <param name="money"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.op_Multiply(CommonDomain.Money,System.Int32)">
            <summary>
            覆寫運算元*的計算方式
            </summary>
            <param name="money"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.op_Multiply(CommonDomain.Money,System.Double)">
            <summary>
            覆寫運算元*的計算方式
            </summary>
            <param name="money"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.op_Division(CommonDomain.Money,System.Int32)">
            <summary>
            覆寫運算元/的計算方式
            </summary>
            <param name="money"></param>
            <param name="allocatePart"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.op_Equality(CommonDomain.Money,CommonDomain.Money)">
            <summary>
            覆寫運算元==的計算方式
            </summary>
            <param name="money1"></param>
            <param name="money2"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.op_Inequality(CommonDomain.Money,CommonDomain.Money)">
            <summary>
            覆寫運算元!=的計算方式
            </summary>
            <param name="money1"></param>
            <param name="money2"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.op_LessThan(CommonDomain.Money,CommonDomain.Money)">
            <summary>
            覆寫運算元 的計算方式
            </summary>
            <param name="money1"></param>
            <param name="money2"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.op_LessThanOrEqual(CommonDomain.Money,CommonDomain.Money)">
            <summary>
            覆寫運算元 的計算方式
            </summary>
            <param name="money1"></param>
            <param name="money2"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.op_GreaterThan(CommonDomain.Money,CommonDomain.Money)">
            <summary>
            覆寫運算元 的計算方式
            </summary>
            <param name="money1"></param>
            <param name="money2"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.op_GreaterThanOrEqual(CommonDomain.Money,CommonDomain.Money)">
            <summary>
            覆寫運算元 的計算方式
            </summary>
            <param name="money1"></param>
            <param name="money2"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.assertSameCurrencyAs(CommonDomain.Money)">
            <summary>
            斷言幣別相同
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:CommonDomain.Money.decimalPointFactor(System.Boolean)">
            <summary>
            小數點
            </summary>
            <param name="isEnableDecimalPoint"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">
            The format to use. 
            -or- 
            A <c>null</c> reference to use the default format defined for the type of the IFormattable implementation. 
            </param>
            <param name="formatProvider">The provider to use to format the value.</param>
            <returns>
            The value of the current instance in the specified format.
            -or- 
            
            </returns>
            <remarks>不考慮外幣於該地的格式，僅依本地文化的幣別表示方式呈現</remarks>
        </member>
        <member name="M:CommonDomain.Money.ToString(System.Globalization.NumberFormatInfo)">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <param name="numberFormatInfo"></param>
            <returns></returns>
            <remarks>不考慮外幣於該地的格式，僅依指定的幣別表示方式呈現</remarks>
        </member>
        <member name="M:CommonDomain.Money.ToString(System.Boolean)">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <param name="numberFormatInfo"></param>
            <returns></returns>
            <remarks>考慮以貨幣的文化數字格式呈現, 若該貨幣有超過一個以上的文件時, 僅會依預設的第一個文化呈現, 若非預期, 則請改以指定數字格式方式呼叫.</remarks>
        </member>
        <member name="M:CommonDomain.Money.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CommonDomain.Money.System#IComparable{CommonDomain#IQuantity{System#Decimal,CommonDomain#Currency}}#CompareTo(CommonDomain.IQuantity{System.Decimal,CommonDomain.Currency})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Money.System#IEquatable{CommonDomain#IQuantity{System#Decimal,CommonDomain#Currency}}#Equals(CommonDomain.IQuantity{System.Decimal,CommonDomain.Currency})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.MoneyCurrencyConversion.CurrencyConversionRates">
            <summary>
            取得幣值轉換匯率
            </summary>
        </member>
        <member name="M:CommonDomain.MoneyCurrencyConversion.Conversion(CommonDomain.Money,CommonDomain.Currency)">
            <summary>
            將<paramref name="baseMoney"/>轉換為<paramref name="gargetCurrency"/>幣值的Money
            </summary>
            <param name="baseMoney">原本的Money</param>
            <param name="targetCurrency">轉換的目標幣值</param>
            <returns></returns>
            <remarks>轉換時，以無指定式的匯率類型與沒有折扣</remarks>
        </member>
        <member name="M:CommonDomain.MoneyCurrencyConversion.Conversion(CommonDomain.Money,CommonDomain.Currency,CommonDomain.ConversionRateType)">
            <summary>
            將<paramref name="baseMoney"/>轉換為<paramref name="gargetCurrency"/>幣值的Money
            </summary>
            <param name="baseMoney">原本的Money</param>
            <param name="targetCurrency">轉換的目標幣值</param>
            <param name="type">匯率類型</param>
            <remarks>轉換時，可指定匯率類型並預設沒有折扣</remarks>
        </member>
        <member name="M:CommonDomain.MoneyCurrencyConversion.Conversion(CommonDomain.Money,CommonDomain.Currency,CommonDomain.ConversionRateType,System.Boolean)">
             <summary>
             將<paramref name="baseMoney"/>轉換為<paramref name="gargetCurrency"/>幣值的Money
             </summary>
             <param name="baseMoney">原本的Money</param>
             <param name="targetCurrency">轉換的目標幣值</param>
             <param name="type">匯率類型</param>
             <param name="haveDiscount">是否有折扣</param>
             <returns></returns>
            <remarks>轉換時，可指定匯率類型與是否有折扣</remarks>
        </member>
        <member name="M:CommonDomain.MoneyCurrencyConversion.FindCurrencyConversion(CommonDomain.Currency,CommonDomain.Currency)">
            <summary>
            查詢幣別轉換
            </summary>
            <param name="baseCurrency">原貨幣</param>
            <param name="targetCurrency">轉換貨幣</param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.Name">
            <summary>
            Porvide first name, middle name and last name for human struct. The class provide comparer methods.
            </summary>
        </member>
        <member name="M:CommonDomain.Name.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            姓名
            </summary>
            <param name="firstName">名字</param>
            <param name="middleName">中間名</param>
            <param name="lastName">姓氐</param>
            <param name="alias">Alias or nickname.</param>
        </member>
        <member name="M:CommonDomain.Name.#ctor(System.String,System.String,System.String)">
            <summary>
            姓名
            </summary>
            <param name="firstName">名字</param>
            <param name="middleName">中間名</param>
            <param name="lastName">姓氐</param>
        </member>
        <member name="M:CommonDomain.Name.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="firstName">名字</param>
        </member>
        <member name="M:CommonDomain.Name.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="firstName">名字</param>
            <param name="lastName">姓氐</param>
        </member>
        <member name="P:CommonDomain.Name.FirstName">
            <summary>
            名字
            </summary>
        </member>
        <member name="P:CommonDomain.Name.MiddleName">
            <summary>
            中間名
            </summary>
        </member>
        <member name="P:CommonDomain.Name.LastName">
            <summary>
            姓氐, 家族名, Sumname
            </summary>
        </member>
        <member name="P:CommonDomain.Name.Alias">
            <summary>
            別名, 暱稱, 綽號
            </summary>
        </member>
        <member name="M:CommonDomain.Name.Equals(CommonDomain.Name)">
            <summary>
            比較兩個姓名物件是否一致.
            </summary>
            <param name="name"></param>
            <returns></returns>
            <remarks>Ignore case.</remarks>
        </member>
        <member name="P:CommonDomain.Name.GivenNames">
            <summary>
            Return first name and middle anme
            </summary>
            <remarks>
            非中文格式.
            </remarks>
        </member>
        <member name="M:CommonDomain.Name.Equals(CommonDomain.Name,System.StringComparison)">
            <summary>
            比較兩個姓名物件是否一致.
            </summary>
            <param name="other"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Name.CompareTo(System.Object)">
            <summary>
            Compares the current <see cref="T:CommonDomain.Name"/> with another <see cref="T:CommonDomain.Name"/> of the same type.
            </summary>
            <param name="obj"><see cref="T:CommonDomain.Name"/></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Name.CompareTo(CommonDomain.Name)">
            <summary>
            Compares the current <see cref="T:CommonDomain.Name"/> with another <see cref="T:CommonDomain.Name"/> of the same type.
            </summary>
            <param name="name">comparer target<see cref="T:CommonDomain.Name"/></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Name.ToString">
            <summary>
            產生一姓名(LastNameMiddleNameFirstName)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Name.ToChineseNameFormat">
            <summary>
            產生一姓名(LastNameMiddleNameFirstName)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Name.ToString(System.String)">
            <summary>
            依據<paramref name="format"/>傳回指定格式
            </summary>
            <param name="format"></param>
            <returns></returns>
            <exception cref="T:System.FormatException">Format string is not supported.</exception>
            <example>
            <c>Format String</c> include: <c> "F", "M", "L", "A", "G", " ", ",", "-", "."</c>
                <code>
                    Name name = new Name("Adam", "Tzeng", "Chang", "亞當哥");
                    Assert.AreEqual(name.ToString("G"), "Adam Tzeng Chang");
                    Assert.AreEqual(name.ToString("F"), "Adam");
                    Assert.AreEqual(name.ToString("M"), "Tzeng");
                    Assert.AreEqual(name.ToString("L"), "Chang");
                    Assert.AreEqual(name.ToString("A"), "亞當哥");
                    Assert.AreEqual(name.ToString("L, F-M"), "Chang, Adam-Tzeng");
            </code>
            You also can do it:
            <code>
                Name name = new Name("Amo", "Hung");
                phone.ToString("L, F", CultureInfo.CurrentCulture)); // return "Hung, Amo"
            </code>
            </example>
        </member>
        <member name="M:CommonDomain.Name.op_Inequality(CommonDomain.Name,CommonDomain.Name)">
            <summary>
            Determines whether two specified names have different values.
            </summary>
            <param name="name1"></param>
            <param name="name2"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Name.op_Equality(CommonDomain.Name,CommonDomain.Name)">
            <summary>
            Determines whether two specified names have the same value.
            </summary>
            <param name="name1"></param>
            <param name="name2"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Name.ToString(System.String,System.IFormatProvider)">
            <summary>
            依據<paramref name="format"/>傳回指定格式
            </summary>
            <param name="format">
            </param>
            <param name="formatProvider"></param>
            <returns></returns>
            <exception cref="T:System.FormatException">Format string is not supported.</exception>
            <example>
            <c>Format String</c> include: <c> "F", "M", "L", "A", "G", " ", ",", "-", "."</c>
                <code>
                    Name name = new Name("Adam", "Tzeng", "Chang", "亞當哥");
                    Assert.AreEqual(name.ToString("G"), "Adam Tzeng Chang");
                    Assert.AreEqual(name.ToString("F"), "Adam");
                    Assert.AreEqual(name.ToString("M"), "Tzeng");
                    Assert.AreEqual(name.ToString("L"), "Chang");
                    Assert.AreEqual(name.ToString("A"), "亞當哥");
                    Assert.AreEqual(name.ToString("L, F-M"), "Chang, Adam-Tzeng");
            </code>
            You also can do it:
            <code>
                Name name = new Name("Amo", "Hung");
                String.ToString("{0:L}, {0:F}", name)); // return "Hung, Amo"
            </code>
            </example>
        </member>
        <member name="T:CommonDomain.Observation">
            <summary>
            文字類評估
            </summary>
        </member>
        <member name="M:CommonDomain.Observation.#ctor">
            <summary>
            建構子
            </summary>
        </member>
        <member name="M:CommonDomain.Observation.Options">
            <summary>
            問題選項 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Observation.CreateInstace">
            <summary>
            建立物件實體
            </summary>
            <returns>ObservationBase</returns>
        </member>
        <member name="T:CommonDomain.ObservationCompareFactor">
            <summary>
            問題題目比較因子
            </summary>
        </member>
        <member name="M:CommonDomain.ObservationCompareFactor.Equals(CommonDomain.ObservationBase,CommonDomain.ObservationBase)">
            <summary>
            兩個問題題目是否相同
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ObservationCompareFactor.GetHashCode(CommonDomain.ObservationBase)">
            <summary>
            取得問題題目的Hash Code
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ObservationBase.#ctor">
            <summary>
            建構子
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationBase.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationBase.IsDeleted">
            <summary>
            是否刪除
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationBase.Created">
            <summary>
            建位時間
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationBase.Creator">
            <summary>
            建立者
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationBase.Modified">
            <summary>
            更新時間
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationBase.Modifier">
            <summary>
            更新者
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationBase.IsCritical">
            <summary>
            是否為必要條件
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationBase.Enabled">
            <summary>
            是否啟用
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationBase.Content">
            <summary>
            內容
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationBase.OptionType">
            <summary>
            問題類型
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationBase.MeasureClassName">
            <summary>
            對應到測量的Class名稱
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationBase.Category">
            <summary>
            分類
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationBase.ObserveConditions">
            <summary>
            限制條件
            </summary>
        </member>
        <member name="T:CommonDomain.ObservationForBoolean">
            <summary>
            是非題
            </summary>
        </member>
        <member name="M:CommonDomain.ObservationForBoolean.Options">
            <summary>
            取得選項
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ObservationForBoolean.CreateInstace">
            <summary>
            建立物件實體
            </summary>
            <returns>ObservationBase</returns>
        </member>
        <member name="T:CommonDomain.ObservationForRange">
            <summary>
            數值區間選項題
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationForRange.RangeUnit">
            <summary>
            臨界值的單位
            </summary>
        </member>
        <member name="M:CommonDomain.ObservationForRange.Options">
            <summary>
            取得題目選項
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ObservationForRange.CreateInstace">
            <summary>
            建立物件實體
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.ObservationOption">
            <summary>
            題目選項
            </summary>
        </member>
        <member name="T:CommonDomain.ObservationOption`1">
            <summary>
            泛型題目選項
            </summary>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="T:CommonDomain.ObservationOptionCollection`1">
            <summary>
            風險評估項目<see cref="T:CommonDomain.Observation"/>之選項<see cref="T:CommonDomain.ObservationOption"/>集合
            </summary>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="M:CommonDomain.ObservationOptionCollection`1.IndexOf(`0)">
            <summary>
            依條件值查詢其項目的次序. 若有兩個值相同, 則顯示第一個次序
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.ObservationOptionCollection`1.SelectedIndex">
            <summary>
            取得或設定項目中選定的次序(由0計算)
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定的次序不在選項中</exception>
            <remarks>若選項超過一個被選擇, 則以第一個被選項目次序回傳</remarks>
        </member>
        <member name="P:CommonDomain.ObservationOptionCollection`1.SelectedValue">
            <summary>
            取得或設定項目中選定的值
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定的值不在選項中</exception>
            <remarks>若選項超過一個被選擇, 則以第一個被選項目值回傳</remarks>
        </member>
        <member name="P:CommonDomain.ObservationOptionCollection`1.SelectedItem">
            <summary>
            取得所選的<see cref="!:IObservationOption&lt;TType&gt;>"/>.
            </summary>
            <remarks>若選項超過一個被選擇, 則以第一個被選項目回傳</remarks>
        </member>
        <member name="M:CommonDomain.ObservationOptionCollection`1.ClearSelection">
            <summary>
            清空所有選項
            </summary>
        </member>
        <member name="M:CommonDomain.ObservationOptionCollection`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the first occurrence within the entire IObservationOptionCollection{TType}. 
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ObservationOptionCollection`1.OnSelectedIndexChanged">
            <summary>
            Raises the SelectedIndexChanged event. This allows you to provide a custom handler for the event. 
            </summary>
        </member>
        <member name="T:CommonDomain.ObservationOptionCollectionWithRange`1">
            <summary>
            
            </summary>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="P:CommonDomain.ObservationOptionItem.Rank">
            <summary>
            風險值
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationOptionItem.RiskLevel">
            <summary>
            風險等級
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationOptionItem.Value">
            <summary>
            選項內容
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationOptionItem.Upper">
            <summary>
            範圍選項的區間最大值
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationOptionItem.Lower">
            <summary>
            範圍選項的區間最小值
            </summary>
        </member>
        <member name="P:CommonDomain.ObservationOptionItem.DisplayOrder">
            <summary>
            顯示順序
            </summary>
        </member>
        <member name="T:CommonDomain.ObservationOptionType">
            <summary>
            題目選項類型
            </summary>
        </member>
        <member name="F:CommonDomain.ObservationOptionType.None">
            <summary>
            無
            </summary>
        </member>
        <member name="F:CommonDomain.ObservationOptionType.Boolean">
            <summary>
            是非
            </summary>        
        </member>
        <member name="F:CommonDomain.ObservationOptionType.Range">
            <summary>
            臨界值
            </summary>        
        </member>
        <member name="F:CommonDomain.ObservationOptionType.Optional">
            <summary>
            自訂選項
            </summary>        
        </member>
        <member name="T:CommonDomain.ObserveCondition">
            <summary>
            適用條件
            </summary>
        </member>
        <member name="T:CommonDomain.Obsoletes.Address">
            <summary>
            提供位置、地址等表示物件
            </summary>
        </member>
        <member name="M:CommonDomain.Obsoletes.Address.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonDomain.Obsoletes.Address"/> class.
            </summary>
            <param name="country">The country.</param>
            <param name="state">The state.</param>
            <param name="city">The city.</param>
            <param name="town">The town.</param>
            <param name="street">The street.</param>
            <param name="houseNumbering">The house numbering.</param>
            <param name="postalCode">The postal code.</param>
        </member>
        <member name="M:CommonDomain.Obsoletes.Address.CreateInstance(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            建立一個<see cref="T:CommonDomain.Obsoletes.Address"/>的Instance
            </summary>
            <param name="country">國家、行政區</param>
            <param name="city">城市、縣市</param>
            <param name="town">鄉鎮市區</param>
            <param name="street">道路、街</param>
            <param name="houseNumbering">門牌號碼</param>
            <param name="postalCode">郵遞區號, ZipCode</param>
            <returns>回傳一個<see cref="T:CommonDomain.Obsoletes.Address"/>的Instance</returns>
            <remarks>若除了<c>postalCode</c>以外的參數皆為<c>null</c> or <c>empty</c>, 則傳回一個<see cref="T:CommonDomain.Obsoletes.AddressNull"/></remarks>
        </member>
        <member name="M:CommonDomain.Obsoletes.Address.CreateInstance(System.String,System.String,System.String,System.String)">
            <summary>
            建立一個<see cref="T:CommonDomain.Obsoletes.Address" />的Instance
            </summary>
            <param name="city">The city.</param>
            <param name="town">The town.</param>
            <param name="street">The street.</param>
            <param name="houseNumbering">The house numbering.</param>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.Obsoletes.Address.NullInstance">
            <summary>
            產生一個空的<see cref="T:CommonDomain.Address"/>物件.
            </summary>
        </member>
        <member name="P:CommonDomain.Obsoletes.Address.Country">
            <summary>
            國家名
            </summary>
        </member>
        <member name="P:CommonDomain.Obsoletes.Address.State">
            <summary>
            洲名
            </summary>
        </member>
        <member name="P:CommonDomain.Obsoletes.Address.PostalCode">
            <summary>
            郵遞區號 (Zip Code)
            </summary>
        </member>
        <member name="P:CommonDomain.Obsoletes.Address.City">
            <summary>
            城市名稱.
            </summary>
        </member>
        <member name="P:CommonDomain.Obsoletes.Address.Town">
            <summary>
            郡名稱存取
            </summary>
            <remarks>鄉、市、鎮、區</remarks>
        </member>
        <member name="P:CommonDomain.Obsoletes.Address.Street">
            <summary>
            路、街
            </summary>
            <remarks>
            <c>相容性議題</c>：
            為了與中華郵政系統相容，路或街以上的住址須依相對映的欄位填入, 其於則填入<see cref="P:CommonDomain.Obsoletes.Address.HouseNumbering">門牌號碼</see>.
            </remarks>
        </member>
        <member name="P:CommonDomain.Obsoletes.Address.HouseNumbering">
            <summary>
            門牌號碼
            </summary>
            <remarks>
            <c>相容性議題</c>：
            為了與中華郵政系統相容，路或街以上的住址須依相對映的欄位填入, 其於則填入<see cref="P:CommonDomain.Obsoletes.Address.HouseNumbering">門牌號碼</see>.
            </remarks>
        </member>
        <member name="P:CommonDomain.Obsoletes.Address.IsNull">
            <summary>
            傳回本物件是否為空物件
            </summary>
        </member>
        <member name="M:CommonDomain.Obsoletes.Address.ToString">
            <summary>
            Overrided. 傳回由門牌號碼(HouseNumbering), 街道(Street, 鄉市鎮(Town), 城市(City) 郵遞區號(PostalCode), 國家(Country)組成的字串.
            </summary>
            <returns></returns>
            <remarks>
            <c>傳回格式如下</c>：
            <c>HouseNumbering</c>, <c>Street</c>, <c>HouseNumbering</c>, <c>Town</c>, <c>City</c> <c>PostalCode</c>, <c>Country</c>.
            </remarks>
        </member>
        <member name="M:CommonDomain.Obsoletes.Address.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CommonDomain.Obsoletes.Address.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CommonDomain.Obsoletes.Address.ToStringWithoutCountry">
            <summary>
            傳回由城市(City)、鄉市鎮(Town)及路或街(Street)及門牌號碼(HouseHumbering)組成的字串
            </summary>
            <returns></returns>
            <remarks>中文格式, 縣市、鄉鎮市區、路或街以及門牌號碼和郵遞區號</remarks>
        </member>
        <member name="M:CommonDomain.Obsoletes.Address.Equals(CommonDomain.Obsoletes.Address)">
            <summary>
            Overloaded.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Obsoletes.Address.ToStringWithChineseFormat(System.Boolean,System.Boolean,System.String)">
            <summary>
            傳回由城市(City)、鄉市鎮(Town)及路或街(Street)及門牌號碼(HouseHumbering)組成的字串
            </summary>
            <param name="withPostalCode">是否加入郵遞區號</param>
            <param name="withCountry">是否加入國別</param>
            <returns></returns>
            <remarks>
            <c>傳回格式如下</c>：
            國家12345城市鄉市鎮路或街門牌號碼
            </remarks>
        </member>
        <member name="M:CommonDomain.Obsoletes.Address.build(System.Boolean,System.Boolean,System.String)">
            <summary>
            傳回由城市(City)、鄉市鎮(Town)及路或街(Street)及門牌號碼(HouseHumbering)組成的字串
            </summary>
            <param name="withPostalCode">是否加入郵遞區號</param>
            <param name="withCountry">是否加入國別</param>
            <returns></returns>
            <remarks>
            <c>傳回格式如下</c>：
            <c>HouseNumbering</c>, <c>Street</c>, <c>HouseNumbering</c>, <c>Town</c>, <c>City</c> <c>PostalCode</c>, <c>Country</c>.
            </remarks>
        </member>
        <member name="M:CommonDomain.Obsoletes.Address.ToString(System.String)">
            <summary>
            <c>Simple Format</c>:
            Co<c>U</c>ntry, St<c>A</c>te, <c>P</c>ostalCode, <c>C</c>ity, <c>T</c>own, <c>S</c>treet, <c>H</c>ouseNumbering.
            - Or -
            Chi<c>N</c>eseFormat, <c>G</c>eneral and <c>F</c>ull.
            </summary>
            <param name="format"></param>
            <returns></returns>
            <example>
            <c>Format String</c> include: "<c>U</c>", <c>A</c>","<c>P</c>", "<c>C</c>", "<c>T</c>", "<c>S</c>", "<c>H</c>", "<c>N</c>", "<c>G</c>",
            " ", "<c>,</c>", "<c>-</c>", "<c>.</c>", "<c>(</c>", "<c>)</c>", "<c>_</c>"
                <code>
                    Address address = Address.CreateInstance("台灣", String.Empty, "台北市", "士林區", "前港街", "10號1樓", "11170");
                    Assert.AreEqual("10號1樓, 前港街, 士林區, 台北市 11170", address.ToString("G"));
                    Assert.AreEqual("台灣", address.ToString("U"));
                    Assert.AreEqual(String.Empty, address.ToString("A"));
                    Assert.AreEqual("11170", address.ToString("P"));
                    Assert.AreEqual("台北市", address.ToString("C"));
                    Assert.AreEqual("士林區", address.ToString("T"));
                    Assert.AreEqual("前港街", address.ToString("S"));
                    Assert.AreEqual("10號1樓", address.ToString("H"));
                    Assert.AreEqual("台灣11170台北市士林區前港街10號1樓", address.ToString("N"));
                    Assert.AreEqual("10號1樓, 前港街, 士林區, 台北市 11170, 台灣", address.ToString("F"));
                    Assert.AreEqual("11170台北市 士林區 前港街 10號1樓", address.ToString("PC T S H"));
            </code>
            You also can do it:
            <code>
                    Assert.AreEqual("[11170]台北市 士林區前港街10號1樓", String.Format("[{0:P}]{0:C} {0:T}{0:S}{0:H}", address));
            </code>
            </example>
            <remarks>
            特別注意, <c>G</c>eneral與<see cref="M:CommonDomain.Obsoletes.Address.ToString"/>不同, General不會傳回國家別.
            </remarks>
        </member>
        <member name="M:CommonDomain.Obsoletes.Address.op_Equality(CommonDomain.Obsoletes.Address,CommonDomain.Obsoletes.Address)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="address1">The address1.</param>
            <param name="address2">The address2.</param>
            <returns>
            The validResult of the operator.
            </returns>
        </member>
        <member name="M:CommonDomain.Obsoletes.Address.op_Inequality(CommonDomain.Obsoletes.Address,CommonDomain.Obsoletes.Address)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="address1">The address1.</param>
            <param name="address2">The address2.</param>
            <returns>
            The validResult of the operator.
            </returns>
        </member>
        <member name="T:CommonDomain.Obsoletes.Address.FindLocation">
            <summary>
            Find location from locations.
            </summary>
        </member>
        <member name="T:CommonDomain.Obsoletes.AddressNull">
            <summary>
            代表Address空物件.
            </summary>
        </member>
        <member name="P:CommonDomain.Obsoletes.AddressNull.Instance">
            <summary>
            建構式, 獨生類別.
            </summary>
        </member>
        <member name="P:CommonDomain.Obsoletes.AddressNull.IsNull">
            <summary>
            Overrided. 該物件是否為空物件.True表是空物件, false則表是一般<see cref="T:CommonDomain.Obsoletes.Address"/>物件.
            </summary>
            <remarks>
            此處永遠回傳True.
            </remarks>
        </member>
        <member name="M:CommonDomain.Obsoletes.AddressNull.ToString">
            <summary>
            轉為字串.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.Organization`1">
            <summary>
            組織
            </summary>    
        </member>
        <member name="P:CommonDomain.Party`1.Id">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="P:CommonDomain.Party`1.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="F:CommonDomain.Party`1.name">
            <summary>
            姓名
            </summary>        
        </member>
        <member name="M:CommonDomain.Party`1.AddCommissioner(CommonDomain.IAccountability{`0})">
            <summary>
            增加一個委託方物件至責任關係中.
            </summary>
            <param name="commisioner"></param>
            <param name="type"></param>
            <remarks>若加入一個委託方物件, 則本物件實例為該關係的責任方</remarks>
        </member>
        <member name="M:CommonDomain.Party`1.AddResponsible(CommonDomain.IAccountability{`0})">
            <summary>
            增加一個責任方物件至責任關係中.
            </summary>
            <param name="commisioner"></param>
            <param name="type"></param>
            <remarks>若加入一個責任方物件, 則本物件實例為該關係的委託方</remarks>
        </member>
        <member name="M:CommonDomain.Party`1.RemoveCommissionerAccountability(CommonDomain.IAccountability{`0})">
            <summary>
            移除委託責任關係物件
            </summary>
            <param name="accountability"></param>
        </member>
        <member name="M:CommonDomain.Party`1.RemoveResponsibleAccountability(CommonDomain.IAccountability{`0})">
            <summary>
            移除責任方的責任關係物件
            </summary>
            <param name="accountability"></param>
        </member>
        <member name="M:CommonDomain.Party`1.ClearCommissionerAccountability">
            <summary>
            清除Accountability
            </summary>
        </member>
        <member name="M:CommonDomain.Party`1.ClearResponsibleAccountability">
            <summary>
            清除Accountability
            </summary>
        </member>
        <member name="T:CommonDomain.Person">
            <summary>
            
            </summary>
            <remarks>未來移出本專案</remarks>
        </member>
        <member name="M:CommonDomain.Person.#ctor(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:CommonDomain.Person`1">
            <summary>
            個人
            </summary>
        </member>
        <member name="P:CommonDomain.Person`1.PersonalId">
            <summary>
            身分證字號
            </summary>
        </member>
        <member name="P:CommonDomain.Person`1.personalIdentity">
            <summary>
            身分證字號
            </summary>
        </member>
        <member name="P:CommonDomain.Person`1.Gender">
            <summary>
            性別
            </summary>
        </member>
        <member name="P:CommonDomain.Person`1.Birthday">
            <summary>
            生日
            </summary>
        </member>
        <member name="P:CommonDomain.Person`1.Mail">
            <summary>
            電子郵件
            </summary>
            <remarks>E-Mail</remarks>
        </member>
        <member name="M:CommonDomain.Person`1.GetAge">
            <summary>
            取得年齡
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Person`1.GetConstellation(CommonDomain.IConstellationStrategy)">
            <summary>
            星座
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.PersonalIdentity">
            <summary>
            身分證字號
            </summary>
        </member>
        <member name="M:CommonDomain.PersonalIdentity.#ctor(System.String)">
            <summary>
            construcotor
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:CommonDomain.PersonalIdentity.ToString">
            <summary>
            轉換為字串
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.PersonalIdentity.Equals(System.Object)">
            <summary>
            是否為同一個物件參考
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.PersonalIdentity.Equals(CommonDomain.PersonalIdentity)">
            <summary>
            是否相等於另一個身分證字號結構
            </summary>
            <param name="identity">身分證字號結構</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.PersonalIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize suport.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CommonDomain.PersonalIdentitySchema.IsCheckSumValid(System.String)">
            <summary>
            驗證檢查碼是否正確(本國人)
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.PhoneNumber">
            <summary>
            提供電話號碼
            </summary>
        </member>
        <member name="P:CommonDomain.PhoneNumber.Area">
            <summary>
            存取電話區碼
            </summary>
        </member>
        <member name="P:CommonDomain.PhoneNumber.Phone">
            <summary>
            存取電話號碼, 不含區碼及分機
            </summary>
        </member>
        <member name="P:CommonDomain.PhoneNumber.Extension">
            <summary>
            存取電話分機碼
            </summary>
        </member>
        <member name="P:CommonDomain.PhoneNumber.RegionCode">
            <summary>
            國際/行政區碼
            </summary>
        </member>
        <member name="M:CommonDomain.PhoneNumber.Equals(CommonDomain.PhoneNumber)">
            <summary>
            Determines whether the specified <see cref="T:CommonDomain.PhoneNumber"/> is equal to the current <see cref="T:CommonDomain.PhoneNumber"/>. 
            </summary>
            <param name="otherNumber"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.PhoneNumber.ToString(System.String,System.IFormatProvider)">
            <summary>
            Return a string for format string. [R]egin, [A]rea, pho[N]e, [E]xtension or [G]eneral.
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns>When use General Format, the phone area code first zero will be trimed.</returns>
            <example>
            <c>Format String</c> include:
                <code>
                    PhoneNumber phone = new PhoneNumber("886", "02", "22223333", "444");
                    phone.ToString("G", CultureInfo.CurrentCulture)); //same phone.ToString(), return "+886(2)22223333P444"
                    phone.ToString("R", CultureInfo.CurrentCulture)); // return "886"
                    phone.ToString("A", CultureInfo.CurrentCulture)); // return "02"
                    phone.ToString("N", CultureInfo.CurrentCulture)); // return "22223333"
                    phone.ToString("E", CultureInfo.CurrentCulture)); // return "444"
            </code>
            You also can do it:
            <code>
                PhoneNumber phone = new PhoneNumber("886", "02", "22223333", "444");
                phone.ToString("+R(A)N-E", CultureInfo.CurrentCulture)); // but it will return "+886(02)22223333-444", this area code first char 'zero' will not be trim.
                String.Format("({0:A}){0:N}-{0:E}", target); // return "(02)22223333-444"
            </code>
            </example>
        </member>
        <member name="M:CommonDomain.PhoneNumber.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:CommonDomain.PhoneNumber"/> is equal to the current <see cref="T:CommonDomain.PhoneNumber"/>. 
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.PhoneNumber.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.PhoneNumber.ToString">
            <summary>
            Returns a string for general format. +R(A)P
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.PhoneNumber.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize suport.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CommonDomain.PhoneNumber.Parse(System.String)">
            <summary>
            Converts the string representation of a phone number to phone equivalent.
            </summary>
            <param name="s">A string containing a phone number to convert.</param>
            <returns>A PhoneNumber type.</returns>
            <exception cref="T:System.ArgumentNullException">When s is null.</exception>
            <exception cref="T:System.FormatException">When s is not in the correct format.</exception>
            <remarks>
            If argument include regin code, must have area code.
            </remarks>
        </member>
        <member name="T:CommonDomain.TelephoneNumber">
            <summary>
            提供電話號碼
            </summary>
            <remarks>該類別目前不支援國際電話格式, 同時不具備電話格式解析能力.</remarks>
        </member>
        <member name="M:CommonDomain.TelephoneNumber.#ctor">
            <summary>
            建構式. 初始化並產生一個PhoneNumber Class的實例.
            </summary>
        </member>
        <member name="M:CommonDomain.TelephoneNumber.CreateInstance(System.String,System.String,System.String)">
            <summary>
            多載. 建構式. 初始化並產生一個PhoneNumber Class的實例.
            </summary>
            <param name="areaCode">區碼</param>
            <param name="phone">號碼</param>
            <param name="extension">分機</param>
        </member>
        <member name="M:CommonDomain.TelephoneNumber.CreateInstance(System.String,System.String)">
            <summary>
            多載. 建構式. 初始化並產生一個PhoneNumber Class的實例. 
            </summary>
            <param name="areaCode">區碼</param>
            <param name="phone">號碼, 不須加分隔號(-)</param>
        </member>
        <member name="P:CommonDomain.TelephoneNumber.Area">
            <summary>
            存取電話區碼
            </summary>
        </member>
        <member name="P:CommonDomain.TelephoneNumber.Phone">
            <summary>
            存取電話號碼, 不含區碼及分機
            </summary>
        </member>
        <member name="P:CommonDomain.TelephoneNumber.Extension">
            <summary>
            存取電話分機碼
            </summary>
        </member>
        <member name="M:CommonDomain.TelephoneNumber.ToStringWithoutFormat">
            <summary>
            輸出成無格式的字串
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.TelephoneNumber.ToString">
            <summary>
            依(999) 99999999 - 9999格式顯示
            </summary>
            <returns>完整的電話號碼</returns>
        </member>
        <member name="P:CommonDomain.TelephoneNumber.NullInstance">
            <summary>
            產生一個空的<see cref="T:CommonDomain.TelephoneNumber"/>物件.
            </summary>
        </member>
        <member name="T:CommonDomain.TelephoneNumberNull">
            <summary>
            代表一個空的<see cref="T:CommonDomain.TelephoneNumber"/>物件.
            </summary>
        </member>
        <member name="P:CommonDomain.TelephoneNumberNull.Instance">
            <summary>
            Create instance for the type. (Singleton)
            </summary>
        </member>
        <member name="P:CommonDomain.TelephoneNumberNull.Area">
            <summary>
            回傳空字串表示地區碼沒有值
            </summary>
        </member>
        <member name="P:CommonDomain.TelephoneNumberNull.Phone">
            <summary>
            回傳空字串表示電話沒有值
            </summary>
        </member>
        <member name="P:CommonDomain.TelephoneNumberNull.Extension">
            <summary>
            回傳空字串表示分機沒有值
            </summary>
        </member>
        <member name="P:CommonDomain.TelephoneNumberNull.IsNull">
            <summary>
            Overrided. 該物件是否為空物件.True表是空物件, false則表是一般<see cref="T:CommonDomain.TelephoneNumber"/>物件.
            </summary>
            <remarks>
            此處永遠回傳True.
            </remarks>
        </member>
        <member name="T:CommonDomain.Quantity`2">
            <summary>
            數量結構. 提供一結構包含數量以及單位.
            </summary>
            <typeparam name="TAmount">數量的型別, 必須要為<seealso cref="!:struct"/>的ValueObject.</typeparam>
            <typeparam name="TUnit">單位的型別, 同時該型別限制必須實作<seealso cref="!:IEquatable(Of T)" />界面.</typeparam>
            <remarks>This object is immutable-like object.</remarks>
        </member>
        <member name="M:CommonDomain.Quantity`2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">
            The format to use. 
            -or- 
            A <c>null</c> reference to use the default format defined for the type of the IFormattable implementation. 
            </param>
            <param name="formatProvider">The provider to use to format the value.</param>
            <returns>The value of the current instance in the specified format.</returns>
        </member>
        <member name="M:CommonDomain.Quantity`2.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            將序列化這個目標物件的所需資料填入 (Populate) 於 SerializationInfo 物件
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CommonDomain.Quantity`2.ToString">
            <summary>
            Returns a string for general format. <c>A U</c>
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CommonDomain.Quantity`2.Equals(System.Object)" -->
        <member name="T:CommonDomain.Range`1">
            <summary>
            區間物件, 用來表示一區間結構. 該區間含無限概念.
            </summary>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="M:CommonDomain.Range`1.#ctor(`0,`0)">
            <summary>
            建構式
            </summary>
            <param name="lower">Lower value in range</param>
            <param name="upper">Upper value in range.</param>
        </member>
        <member name="P:CommonDomain.Range`1.Upper">
            <summary>
            Upper value in range
            </summary>
        </member>
        <member name="P:CommonDomain.Range`1.Lower">
            <summary>
            Lower value in range
            </summary>
        </member>
        <member name="P:CommonDomain.Range`1.IsFinite">
            <summary>
            有限(封閉)區間
            </summary>
            <remarks>
            即Upper及Lower皆為有值.
            </remarks>
        </member>
        <member name="P:CommonDomain.Range`1.IsInfinite">
            <summary>
            無限(開放)區間
            </summary>
            <remarks>
            即Upper及Lower皆為空.
            </remarks>
        </member>
        <member name="P:CommonDomain.Range`1.IsUnderSomeValue">
            <summary>
            小於某值以下的開放區間
            </summary>
            <remarks>
            即Upper值不為空. Lower值為空.
            </remarks>
        </member>
        <member name="P:CommonDomain.Range`1.IsOverSomeValue">
            <summary>
            大於某值以上的開放區間
            </summary>
            <remarks>
            即Upper值為空. Lower值不為空.
            </remarks>
        </member>
        <member name="M:CommonDomain.Range`1.HasOverlap(CommonDomain.Range{`0})">
            <summary>
            和目標物件是否有重疊
            </summary>
            <param name="target">目標物件</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Range`1.HasInclude(CommonDomain.Range{`0})">
            <summary>
            是否包含另一區間物件
            </summary>
            <param name="target">區間物件</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Range`1.HasMoreThen(CommonDomain.Range{`0})">
            <summary>
            判斷是否比傳入的參數大
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Range`1.HasLessThan(CommonDomain.Range{`0})">
            <summary>
            判斷是否比傳入的參數小
            </summary>
            <param name="target">傳入的Range參數</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Range`1.HasInclude(`0)">
            <summary>
            是否包含目標物件
            </summary>
            <param name="target">目標物件</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Range`1.HasMoreThen(`0)">
            <summary>
            判斷是否比傳入的參數大
            </summary>
            <param name="target"></param>
            <returns>If true the instance more than parameter, otherwise false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CommonDomain.Range`1.HasLessThan(`0)">
            <summary>
            判斷是否比傳入的參數小
            </summary>
            <param name="target">傳入的參數</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Range`1.Equals(System.Object)">
            <summary>
            Determines whether two Object instances are equal. 
            </summary>
            <param name="obj">The Object to comparer with the current Object.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:CommonDomain.Range`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:CommonDomain.Range`1.op_Inequality(CommonDomain.Range{`0},CommonDomain.Range{`0})">
            <summary>
            判斷兩個區間是否不相等
            </summary>
            <param name="arg1">區間1</param>
            <param name="arg2">區間2</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Range`1.op_Equality(CommonDomain.Range{`0},CommonDomain.Range{`0})">
            <summary>
            判斷兩個區間完全相等
            </summary>
            <param name="arg1">區間1</param>
            <param name="arg2">區間2</param>
            <returns>
            </returns>
        </member>
        <member name="M:CommonDomain.Range`1.op_LessThan(CommonDomain.Range{`0},CommonDomain.Range{`0})">
            <summary>
            比較區間是否小於另一個時間於間
            </summary>
            <param name="arg1">區間1</param>
            <param name="arg2">區間2</param>
            <returns>True 表示小於, 反之則大於</returns>
        </member>
        <member name="M:CommonDomain.Range`1.op_GreaterThan(CommonDomain.Range{`0},CommonDomain.Range{`0})">
            <summary>
            比較區間是否大於另一個時間於間
            </summary>
            <param name="arg1">區間1</param>
            <param name="arg2">區間2</param>
            <returns>True 表示大於, 反之則小於</returns>
        </member>
        <member name="M:CommonDomain.Range`1.Equals(CommonDomain.Range{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Range`1.CompareTo(CommonDomain.Range{`0})">
            <summary>
            Compares the current object with another object of the same type. 
            </summary>
            <param name="other"></param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            <list type="bullet">
            	<listheader>
            		<term>Return Value</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>Less than zero</term>
            		<description>The value of this instance is less than the value of target.</description>
            	</item>
            	<item>
            		<term>Zero</term>
            		<description>
                        The value of this instance is overlap to the value of target.(That could be not equal.)
                    </description>
            	</item>	
            	<item>
            		<term>Greater than zero</term>
            		<description>The value of this instance is greater than the value of target. -or-
            			target is a null reference 
            		</description>
            	</item>
            </list>
            </returns>
        </member>
        <member name="T:CommonDomain.Repositories.IDateEventRepository">
            <summary>
            工作日Repository Interface
            </summary>
        </member>
        <member name="M:CommonDomain.Repositories.IDateEventRepository.CreateAll(System.Collections.Generic.IEnumerable{CommonDomain.DateEvent})">
            <summary>
            Creates all.
            </summary>
            <param name="eventOfDates">The event of dates.</param>
        </member>
        <member name="M:CommonDomain.Repositories.IDateEventRepository.FetchByYear(System.Int32)">
            <summary>
            取得 <paramref name="year"/> 年度工作日
            </summary>
            <param name="year">年度</param>
            <returns>工作日資訊</returns>
        </member>
        <member name="M:CommonDomain.Repositories.IDateEventRepository.FetchAll(CommonDomain.TimePeriod)">
            <summary>
            取得所有工作日
            </summary>
            <param name="startIndex">起始Index</param>
            <param name="count">取得數量</param>
            <returns>工作日資訊</returns>
        </member>
        <member name="P:CommonDomain.Security.Permission`1.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:CommonDomain.Security.Permission`1.Name">
            <summary>
            許可名稱
            </summary>
        </member>
        <member name="P:CommonDomain.Security.Permission`1.Description">
            <summary>
            說明
            </summary>
        </member>
        <member name="M:CommonDomain.Security.Permission`1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.Security.Permission`1.Equals(System.Object)">
            <summary>
            Equals. Override by Object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ConstellationUtility.FetchConstellationBy(System.DateTime)">
            <summary>
            依照生日取得星座
            </summary>
            <param name="birthday"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ConstellationUtility.generateDateRangeOptionItems">
            <summary>
            根據生日年分產生日期選項集合
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.EnumerableExtension">
            <summary>
            Enumerable extension class.
            </summary>
        </member>
        <member name="M:CommonDomain.EnumerableExtension.ToCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a <see cref="!:Collection[T]"/> from an <see cref="!:IEnumerable[T]"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The <see cref="!:IEnumerable[T]"/>to create a <see cref="!:Collection[T]"/> from.</param>
            <returns>A <see cref="!:Collection[T]"/> that contains elements from the input sequence. </returns>
            <exception cref="T:System.ArgumentNullException">source is nullNothingnullptra null reference.</exception>
        </member>
        <member name="T:CommonDomain.EnumerationTranslate">
            <summary>
            負責翻譯列舉型別
            </summary>
        </member>
        <member name="M:CommonDomain.EnumerationTranslate.TranslateFromEnumeration(System.Enum)">
            <summary>
            使用文化資源檔翻譯列舉值
            </summary>
            <param name="enumeration">列舉值</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.EnumerationTranslate.ConvertTo(System.Type)">
            <summary>
            將列舉型別轉換為字典，字典的Key是列舉值，字典的Value是翻譯後的文字
            </summary>
            <param name="enumType">列舉型別</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.EnumerationTranslate.ConvertTo(System.Type,System.Resources.ResourceManager)">
            <summary>
            將列舉型別轉換為字典，字典的Key是列舉值，字典的Value是翻譯後的文字
            </summary>
            <param name="enumType">列舉型別</param>
            <param name="resourceManager">指定的文化資源檔</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.EnumerationTranslate.ConvertTo(System.Type,System.Resources.ResourceManager,System.Globalization.CultureInfo)">
            <summary>
            將列舉型別轉換為字典，字典的Key是列舉值，字典的Value是翻譯後的文字
            </summary>
            <param name="enumType">列舉型別</param>
            <param name="resourceManager">指定的文化資源檔</param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.EnumerationTranslate.Translate(System.Enum)">
            <summary>
            依照文化資源檔翻譯
            </summary>
            <param name="enumTarget">要翻譯的目標列舉值</param>
            <returns>翻譯後的文字</returns>
        </member>
        <member name="M:CommonDomain.EnumerationTranslate.Translate(System.Enum,System.Resources.ResourceManager)">
            <summary>
            依照指定的文化資源檔翻譯
            </summary>
            <param name="enumTarget">要翻譯的目標列舉值</param>
            <param name="resourceManager">文化資源檔案的<see cref="T:System.Resources.ResourceManager"/>.</param>
            <returns>翻譯後的文字</returns>
        </member>
        <member name="M:CommonDomain.EnumerationTranslate.Translate(System.Enum,System.Resources.ResourceManager,System.Globalization.CultureInfo)">
            <summary>
            依照指定的文化資源檔翻譯
            </summary>
            <param name="enumTarget">要翻譯的目標列舉值</param>
            <param name="resourceManager">文化資源檔案的<see cref="T:System.Resources.ResourceManager"/>.</param>
            <param name="culture"></param>
            <returns>翻譯後的文字</returns>
            <remarks>Resource 制定時，必須要以'{0}_{1}'格式, {0}為Enum的type，{1}為Enum的Element(即name，非value)</remarks>
        </member>
        <member name="T:CommonDomain.PhoneFormatProvider">
            <summary>
            Phone number format provider.
            </summary>
        </member>
        <member name="M:CommonDomain.PhoneFormatProvider.GetFormat(System.Type)">
            <summary>
            Returns an object that provides formatting services for the specified type.
            </summary>
            <param name="formatType">An object that specifies the type of format object to return.</param>
            <returns>
            An instance of the object specified by <paramref name="formatType" />, if the <see cref="T:System.IFormatProvider" /> implementation can supply that type of object; otherwise, null.
            </returns>
        </member>
        <member name="M:CommonDomain.PhoneFormatProvider.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.
            </summary>
            <param name="format">A format string containing formatting specifications.</param>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <returns>
            The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:CommonDomain.InvalidReason`1">
            <summary>
            
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="M:CommonDomain.InvalidReason`1.#ctor(System.String,`0,System.Type,System.Collections.Generic.IEnumerable{CommonDomain.InvalidReason{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:CommonDomain.InvalidReason`1" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="target">The target.</param>
            <param name="typeOfValidator">The type of validator.</param>
            <param name="nestedReasons">The nested reasons.</param>
        </member>
        <member name="P:CommonDomain.InvalidReason`1.Message">
            <summary>
            Gets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:CommonDomain.InvalidReason`1.Target">
            <summary>
            Gets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="P:CommonDomain.InvalidReason`1.TypeOfValidator">
            <summary>
            Gets the type of validator.
            </summary>
            <value>
            The type of validator.
            </value>
        </member>
        <member name="P:CommonDomain.InvalidReason`1.NestedIInvalidReasons">
            <summary>
            Gets the nested i invalid reasons.
            </summary>
            <value>
            The nested i invalid reasons.
            </value>
        </member>
        <member name="P:CommonDomain.InvalidReason`1.CommonDomain#IInvalidReason{TTarget}#NestedIInvalidReasons">
            <summary>
            Gets the nested i invalid reasons.
            </summary>
            <value>
            The nested i invalid reasons.
            </value>
        </member>
        <member name="M:CommonDomain.InvalidReason`1.MessageWithDescendant(System.String)">
            <summary>
            Messages the with descendant.
            </summary>
            <param name="separator">The separator. default is null.</param>
            <returns></returns>
            <remarks>where separator is null, default will separator by comma(', ').</remarks>
        </member>
        <member name="M:CommonDomain.InvalidReason`1.NavigateDescendant">
            <summary>
            Navigates the descendant.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.ValidationResult`1">
            <summary>
            
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="P:CommonDomain.ValidationResult`1.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonDomain.ValidationResult`1.Count">
            <summary>
            Count of invalid reasons.
            </summary>
            <value>
            The count.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CommonDomain.ValidationResult`1.Add(CommonDomain.InvalidReason{`0})">
            <summary>
            Adds the specified reason.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:CommonDomain.ValidationResult`1.Add(System.Collections.Generic.IEnumerable{CommonDomain.InvalidReason{`0}})">
            <summary>
            Adds the specified reasons.
            </summary>
            <param name="reasons">The reasons.</param>
        </member>
        <member name="P:CommonDomain.ValidationResult`1.InvalidReasons">
            <summary>
            Gets the invalid reasons.
            </summary>
            <value>
            The invalid reasons.
            </value>
        </member>
        <member name="M:CommonDomain.ValidationResult`1.ObtainMessage(System.String,System.String)">
            <summary>
            Obtains the message.
            </summary>
            <param name="separatorForEachReason">The separator for each reason. Default is new line.</param>
            <param name="separatorForEachReasonDescendant">The separator for each reason descendant. default is comma (', ').</param>
            <returns></returns>
            <remarks>When separator is null, system will seting new line as default separator.</remarks>
        </member>
        <member name="M:CommonDomain.ValidationResult`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CommonDomain.ValidationResult`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:CommonDomain.ValidatorBase`1">
            <summary>
            基本驗證器
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="P:CommonDomain.ValidatorBase`1.MessageTemplate">
            <summary>
            Gets or sets the message template.
            </summary>
            <value>
            The message template.
            </value>
        </member>
        <member name="M:CommonDomain.ValidatorBase`1.ObtainMessage">
            <summary>
            Obtains the message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ValidatorBase`1.ObtainMessage(System.Predicate{System.Type})">
            <summary>
            Obtains the message.
            </summary>
            <param name="matchValidatorType">Type of the match validator.</param>
            <returns></returns>
        </member>
        <member name="P:CommonDomain.ValidatorBase`1.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
            <value>
            The default message template.
            </value>
        </member>
        <member name="M:CommonDomain.ValidatorBase`1.Validate(`0)">
            <summary>
            Validates the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CommonDomain.ValidatorBase`1.Validate(`0,CommonDomain.ValidationResult{`0})">
            <summary>
            Validates the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="validResult">The validResult.</param>
        </member>
        <member name="M:CommonDomain.ValidatorBase`1.PerformValidate(`0,CommonDomain.ValidationResult{`0})">
            <summary>
            Performs the validate.
            </summary>
            <param name="target">The target.</param>
            <param name="validResult">The validResult.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:CommonDomain.ValidatorBase`1.LogInvalidReason(System.String,`0,CommonDomain.ValidationResult{`0},System.Collections.Generic.IEnumerable{CommonDomain.InvalidReason{`0}})">
            <summary>
            Logs the invalid reason.
            </summary>
            <param name="message">The message.</param>
            <param name="target">The target.</param>
            <param name="validationResult">The validation validResult.</param>
            <param name="nestedReasons">The nested reasons.</param>
        </member>
        <member name="T:CommonDomain.ValueRange`1">
            <summary>
            區間物件, 用來表示一區間結構. 該區間含無限概念.
            </summary>
            <typeparam name="TType"></typeparam>
            <remarks>與Range物件功能相彷，但ValueRange為Struct，且僅能接受Struct的型別物件. <see cref="!:Range(OF T)"/>與<see cref="!:FiniteRange(OF T)"/>則無此限制</remarks>
        </member>
        <member name="M:CommonDomain.ValueRange`1.#ctor(System.Nullable{`0},System.Nullable{`0})">
            <summary>
            建構式
            </summary>
            <param name="lower">Lower value in range</param>
            <param name="upper">Upper value in range.</param>
        </member>
        <member name="P:CommonDomain.ValueRange`1.Upper">
            <summary>
            最大值
            </summary>
        </member>
        <member name="P:CommonDomain.ValueRange`1.Lower">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:CommonDomain.ValueRange`1.IsFinite">
            <summary>
            有限(封閉)區間
            </summary>
            <remarks>
            即Upper及Lower皆為有值.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:CommonDomain.ValueRange`1.IsInfinite" -->
        <member name="P:CommonDomain.ValueRange`1.IsEmptyRange">
            <summary>
            無限(開放)區間
            </summary>
            <remarks>
            即Upper或Lower皆為空. (是Infinite的一種)
            </remarks>
        </member>
        <member name="P:CommonDomain.ValueRange`1.IsUnderSomeValue">
            <summary>
            小於某值以下的開放區間
            </summary>
            <remarks>
            即Upper值不為空. Lower值為空. (是Infinite的一種)
            </remarks>
        </member>
        <member name="P:CommonDomain.ValueRange`1.IsOverSomeValue">
            <summary>
            大於某值以上的開放區間
            </summary>
            <remarks>
            即Upper值為空. Lower值不為空. (是Infinite的一種)
            </remarks>
        </member>
        <member name="M:CommonDomain.ValueRange`1.HasOverlap(CommonDomain.ValueRange{`0})">
            <summary>
            和目標物件是否有重疊
            </summary>
            <param name="target">目標物件</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ValueRange`1.HasInclude(CommonDomain.ValueRange{`0})">
            <summary>
            是否包含另一區間物件
            </summary>
            <param name="target">區間物件</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ValueRange`1.HasMoreThen(CommonDomain.ValueRange{`0})">
            <summary>
            判斷是否比傳入的參數大
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ValueRange`1.HasLessThan(CommonDomain.ValueRange{`0})">
            <summary>
            判斷是否比傳入的參數小
            </summary>
            <param name="target">傳入的RangeValue參數</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ValueRange`1.HasInclude(`0)">
            <summary>
            是否包含目標物件
            </summary>
            <param name="target">目標物件</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ValueRange`1.HasMoreThen(`0)">
            <summary>
            判斷是否比傳入的參數大
            </summary>
            <param name="target"></param>
            <returns>If true the instance more than parameter, otherwise false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:CommonDomain.ValueRange`1.HasLessThan(`0)">
            <summary>
            判斷是否比傳入的參數小
            </summary>
            <param name="target">傳入的參數</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ValueRange`1.Equals(System.Object)">
            <summary>
            Determines whether two Object instances are equal. 
            </summary>
            <param name="obj">The Object to comparer with the current Object.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:CommonDomain.ValueRange`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:CommonDomain.ValueRange`1.op_Inequality(CommonDomain.ValueRange{`0},CommonDomain.ValueRange{`0})">
            <summary>
            判斷兩個區間是否不相等
            </summary>
            <param name="arg1">區間1</param>
            <param name="arg2">區間2</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ValueRange`1.op_Equality(CommonDomain.ValueRange{`0},CommonDomain.ValueRange{`0})">
            <summary>
            判斷兩個區間完全相等
            </summary>
            <param name="arg1">區間1</param>
            <param name="arg2">區間2</param>
            <returns>
            </returns>
        </member>
        <member name="M:CommonDomain.ValueRange`1.op_LessThan(CommonDomain.ValueRange{`0},CommonDomain.ValueRange{`0})">
            <summary>
            比較區間是否小於另一個時間於間
            </summary>
            <param name="arg1">區間1</param>
            <param name="arg2">區間2</param>
            <returns>True 表示小於, 反之則大於</returns>
        </member>
        <member name="M:CommonDomain.ValueRange`1.op_GreaterThan(CommonDomain.ValueRange{`0},CommonDomain.ValueRange{`0})">
            <summary>
            比較區間是否大於另一個時間於間
            </summary>
            <param name="arg1">區間1</param>
            <param name="arg2">區間2</param>
            <returns>True 表示大於, 反之則小於</returns>
        </member>
        <member name="M:CommonDomain.ValueRange`1.Equals(CommonDomain.ValueRange{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.ValueRange`1.CompareTo(CommonDomain.ValueRange{`0})">
            <summary>
            Compares the current object with another object of the same type. 
            </summary>
            <param name="other"></param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            <list type="bullet">
            	<listheader>
            		<term>Return Value</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>Less than zero</term>
            		<description>The value of this instance is less than the value of target.</description>
            	</item>
            	<item>
            		<term>Zero</term>
            		<description>
                        The value of this instance is overlap to the value of target.(That could be not equal.)
                    </description>
            	</item>	
            	<item>
            		<term>Greater than zero</term>
            		<description>The value of this instance is greater than the value of target. -or-
            			target is a null reference 
            		</description>
            	</item>
            </list>
            </returns>
        </member>
        <member name="T:CommonDomain.WorkingCalendar">
            <summary>
            工作日曆
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonDomain.WorkingCalendar"/> class.
            </summary>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.#ctor(System.Collections.Generic.IEnumerable{System.DayOfWeek},System.Collections.Generic.IEnumerable{CommonDomain.IDateEvent})">
            <summary>
            Constructor
            </summary>
            <param name="eventOfDates">The event of dates.</param>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.#ctor(System.Collections.Generic.IEnumerable{System.DayOfWeek},System.Collections.Generic.IEnumerable{CommonDomain.IDateEvent},System.Globalization.DateTimeFormatInfo)">
            <summary>
            Constructor
            </summary>
            <param name="holidayOfWeek">The holiday of week.</param>
            <param name="eventOfDates">The event of dates.</param>
        </member>
        <member name="P:CommonDomain.WorkingCalendar.HolidayOfWeek">
            <summary>
            Gets the default holiday of week.
            </summary>
            <value>
            The holiday of week.
            </value>
        </member>
        <member name="P:CommonDomain.WorkingCalendar.DateEvents">
            <summary>
            Gets or sets the event of dates.
            </summary>
            <value>
            The event of dates.
            </value>
        </member>
        <member name="P:CommonDomain.WorkingCalendar.CalendarBase">
            <summary>
            日曆
            </summary>
        </member>
        <member name="P:CommonDomain.WorkingCalendar.DateTimeFormat">
            <summary>
            Gets the date time format.
            </summary>
            <value>
            The date time format.
            </value>
        </member>
        <member name="P:CommonDomain.WorkingCalendar.MaxSupportedDateTime">
            <summary>
            取得受 WorkingCalendar 物件所支援的最晚日期和時間
            </summary>
        </member>
        <member name="P:CommonDomain.WorkingCalendar.MinSupportedDateTime">
            <summary>
            取得受 WorkingCalendar 物件所支援的最早日期和時間
            </summary>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.AddDays(System.DateTime,System.Int32)">
            <summary>
            回傳增/減幾日後的工作日
            增：若增加 <paramref name="days"/> 天的日期非工作日，會往後推算工作日
            減：若減少 <paramref name="day"/> 天的日期非工作日，會住前推算工作日
            </summary>
            <param name="time">計算時間基準點</param>
            <param name="days">工作日, 0 則回傳原來<paramref name="time"/>, 不論該日是否為工作日期</param>
            <returns>工作日期</returns>
            <remarks>若指定工作</remarks>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.AddWeeks(System.DateTime,System.Int32)">
            <summary>
            Returns a System.DateTime that is the specified number of 'calendar weeks'(not working calendar) away from the specified System.DateTime. 
            </summary>
            <param name="time">計算時間基準點</param>
            <param name="weeks">calendar weeks</param>
            <returns>working date</returns>
            <remarks>One week in this method inequal 5 workingdays, just only equal 5 calendar day. If you need to calculate one week equal 5 workingday, you just using 
            <seealso cref="M:CommonDomain.WorkingCalendar.AddDays(System.DateTime,System.Int32)"/> square 5 how many weeks do you need.</remarks>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.AddMonths(System.DateTime,System.Int32)">
            <summary>
            計算加工作月後的工作日期
            <paramref name="months"/>大於0, 則計算<paramref name="time"/>往後的工作月的工作日期.
            反之, 小於0 則計算<paramref name="months"/> 往前的工作月的工作日期
            若計算的結果為非工作日, 則會持續的找到下一個工作日期.
            </summary>
            <param name="time">計算時間基準點</param>
            <param name="months">增/減幾日</param>
            <returns>工作日期</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.AddYears(System.DateTime,System.Int32)">
            <summary>
            計算加工作年後的工作日期
            <paramref name="years"/>大於0, 則計算<paramref name="time"/>往後的工作年的工作日期.
            反之, 小於0 則計算<paramref name="years"/> 往前的工作年的工作日期
            若計算的結果為非工作日, 則會持續的找到下一個工作日期.        /// </summary>
            <param name="time">計算時間基準點</param>
            <param name="years">增/減幾年</param>
            <returns>工作日期</returns>
        </member>
        <member name="P:CommonDomain.WorkingCalendar.Eras">
            <summary>
            取得目前曆法中的紀元清單
            </summary>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetEra(System.DateTime)">
            <summary>
            傳回指定 <paramref name="time"/> 中的紀元
            </summary>
            <param name="time">指定時間</param>
            <returns>紀元</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetDayOfMonth(System.DateTime)">
            <summary>
            傳回指定 <paramref name="time"/> 中月份第幾個工作天
            </summary>
            <param name="time">指定查詢的時間</param>
            <returns><paramref name="time"/>月份中第幾個工作天</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetDayOfWeek(System.DateTime)">
            <summary>
            傳回指定 <paramref name="time"/> 中的星期
            </summary>
            <param name="time">指定時間</param>
            <returns>日期</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetDayOfYear(System.DateTime)">
            <summary>
            傳回指定 <paramref name="time"/> 中年份的日期
            </summary>
            <param name="time">指定時間</param>
            <returns>日期</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetDaysInMonth(System.Int32,System.Int32)">
            <summary>
            傳回目前紀元之指定月份和年份中的工作天數
            </summary>
            <param name="year">年份</param>
            <param name="month">天數</param>
            <returns>工作天數</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
            <summary>
            傳回指定月份、年份和紀元中的工作天數
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <param name="era">紀元</param>
            <returns>工作天數</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetDaysInYear(System.Int32)">
            <summary>
            傳回目前紀元之指定年份中的工作天數
            </summary>
            <param name="year">年份</param>
            <returns>工作天數</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CommonDomain.WorkingCalendar.GetDaysInYear(System.Int32,System.Int32)" -->
        <member name="M:CommonDomain.WorkingCalendar.GetMonth(System.DateTime)">
            <summary>
            傳回指定 <paramref name="time"/> 中的月份
            </summary>
            <param name="time">指定時間</param>
            <returns>月份</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetMonthsInYear(System.Int32,System.Int32)">
            <summary>
            傳回指定紀元的指定年份中月數
            </summary>
            <param name="year">年份</param>
            <param name="era">紀元</param>
            <returns>月數</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetYear(System.DateTime)">
            <summary>
            傳回指定 <paramref name="time"/> 中的年份
            </summary>
            <param name="time">指定時間</param>
            <returns>年份</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32)">
            <summary>
            判斷目前紀元中指定日期是否為閏日
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <param name="day">日期</param>
            <returns>是否為閏日</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            判斷指定紀元中的指定日期是否為閏日
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <param name="day">日期</param>
            <param name="era">紀元</param>
            <returns>是否為閏日</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.IsLeapMonth(System.Int32,System.Int32)">
            <summary>
            判斷目前紀元的指定年份中指定的月份是否為閏月
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <returns>是否為閏月</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
            <summary>
            判斷指定紀元的指定年份中指定的月份是否為閏月
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <param name="era">紀元</param>
            <returns>是否為閏月</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.IsLeapYear(System.Int32)">
            <summary>
            判斷目前紀元中指定的年份是否為閏年
            </summary>
            <param name="year">年份</param>
            <returns>是否為閏年</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.IsLeapYear(System.Int32,System.Int32)">
            <summary>
            判斷指定紀元中指定的年份是否為閏年
            </summary>
            <param name="year">年份</param>
            <param name="era">紀元</param>
            <returns>是否為閏年</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            傳回設定為目前紀元中指定日期和時間的 DateTime
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <param name="day">日期</param>
            <param name="hour">小時</param>
            <param name="minute">分鐘</param>
            <param name="second">秒鐘</param>
            <param name="millisecond">毫秒</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            傳回設定為指定紀元中指定的日期和時間的 DateTime
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <param name="day">日期</param>
            <param name="hour">小時</param>
            <param name="minute">分鐘</param>
            <param name="second">秒鐘</param>
            <param name="millisecond">毫秒</param>
            <param name="era">紀元</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.IsWorkingDate(System.DateTime)">
            <summary>
            判斷 <paramref name="time"/> 是否為工作日
            </summary>
            <param name="time">指定日期時間</param>
            <returns>是否為工作日</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetHolidaysInYear(System.Int32,System.Nullable{System.Int32})">
            <summary>
            取得指定 <paramref name="year"/> 的非工作日天數
            </summary>
            <param name="year">年份</param>
            <param name="era">紀元</param>
            <returns>非工作日天數</returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetHolidaysInMonth(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            取得指定年月份的非工作日天數
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <param name="era">紀元</param>
            <returns>
            非工作日天數
            </returns>
            <remarks>
            計算時，以日為基準
            </remarks>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetFistWorkingdayInYear(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the fist workingday.
            </summary>
            <param name="year">The year.</param>
            <param name="era">The era.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetFistWorkingdayInMonth(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the fist workingday.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="era">The era.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetLastWorkingdayInYear(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the last workingday.
            </summary>
            <param name="year">The year.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetLastWorkingdayInMonth(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the last workingday.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="era">The era.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetFistHolidayInYear(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the fist holiday.
            </summary>
            <param name="year">The year.</param>
            <param name="era">The era.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetFistHolidayInMonth(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the fist holiday.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="era">The era.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetLastHolidayInYear(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the last holiday.
            </summary>
            <param name="year">The year.</param>
            <param name="era">The era.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetLastHolidayInMonth(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets the last holiday.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="era">The era.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetFirstWorkingdayInWeek(System.DateTime)">
            <summary>
            Gets the first workingday in week.
            </summary>
            <param name="datetime">The datetime.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetLastWorkingdayInWeek(System.DateTime)">
            <summary>
            Gets the last workingday in week.
            </summary>
            <param name="datetime">The datetime.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetFirstHolidayInWeek(System.DateTime)">
            <summary>
            Gets the first holiday in week.
            </summary>
            <param name="datetime">The datetime.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetLastHolidayInWeek(System.DateTime)">
            <summary>
            Gets the last holiday in week.
            </summary>
            <param name="datetime">The datetime.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetWorkingdayOfWeek(System.DateTime)">
            <summary>
            傳回指定的日期為該週第幾個工作天
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetWorkingdaysIn(CommonDomain.TimePeriod)">
            <summary>
            Gets the workingdays in.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.GetHolidaysIn(CommonDomain.TimePeriod)">
            <summary>
            Gets the holidays in.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.NextWorkingday(System.DateTime)">
            <summary>
            Nexts the workingday.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.PreviousWorkingday(System.DateTime)">
            <summary>
            Previouses the workingday.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.NextHoliday(System.DateTime)">
            <summary>
            Nexts the holiday.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.PreviousHoliday(System.DateTime)">
            <summary>
            Previouses the holiday.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonDomain.WorkingCalendar.CommonDomain#IWorkingCalendar{CommonDomain#IDateEvent}#GetWorkingdayOfMonth(System.DateTime)">
            <summary>
            Gets the workingday of month.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="T:CommonDomain.WorkingDay">
            <summary>
            工作日
            </summary>
        </member>
        <member name="P:CommonDomain.WorkingDay.Day">
            <summary>
            日期
            </summary>
        </member>
        <member name="P:CommonDomain.WorkingDay.IsWorkingDay">
            <summary>
            是否為工作日
            </summary>
        </member>
        <member name="M:CommonDomain.WorkingDay.CreateInstance(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates the instance.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <returns></returns>
        </member>
        <member name="M:CommonLog.IDiagnosticsContext.Set(System.String,System.String)">
            <summary>
            Sets the current thread mappered diagnostics context item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:CommonLog.IDiagnosticsContext.Get(System.String)">
            <summary>
            Gets the current thread mappered diagnostics context named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The item value of string.Empty if the value is not present.</returns>
        </member>
        <member name="M:CommonLog.IDiagnosticsContext.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in current thread mappered diagnostics context.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified item exists in current thread mappered diagnostics context.</returns>
        </member>
        <member name="M:CommonLog.IDiagnosticsContext.Remove(System.String)">
            <summary>
            Removes the specified item from current thread mappered diagnostics context.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:CommonLog.IDiagnosticsContext.Clear">
            <summary>
            Clears the content of current thread mappered diagnostics context.
            </summary>
        </member>
        <member name="M:CommonLog.IDiagnosticsContext.GetNames">
            <summary>
            Return all item names
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonLog.IDiagnosticsContext.GetObject(System.String)">
            <summary>
            Get current name item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLog.ILogFactory.Flush">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
        </member>
        <member name="M:CommonLog.ILogFactory.Flush(System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:CommonLog.ILogFactory.Flush(System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:CommonLog.ILogFactory.GetCurrentClassLogger">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:CommonLog.ILogFactory.GetCurrentClassLogger(System.Type)">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <param name="loggerType">The type of the logger to create. The type must inherit from NLog.Logger.</param>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:CommonLog.ILogFactory.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:CommonLog.ILogFactory.GetLogger(System.String,System.Type)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <param name="loggerType">The type of the logger to create. The type must inherit from NLog.Logger.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the 
            same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:CommonLog.ILogFactory.IsLoggingEnabled">
            <summary>
            Returns <see langword="true" /> if logging is currently enabled.
            </summary>
            <returns>A value of <see langword="true" /> if logging is currently enabled, 
            <see langword="false"/> otherwise.</returns>
            <remarks>Logging is enabled if the number of <see cref="!:EnableLogging"/> calls is greater 
            than or equal to <see cref="!:DisableLogging"/> calls.</remarks>
        </member>
        <member name="P:CommonLog.ILogFactory.ThrowExceptions">
            <summary>
            Gets or sets a value indicating whether exceptions should be thrown.
            </summary>
            <value>A value of <c>true</c> if exceptiosn should be thrown; otherwise, <c>false</c>.</value>
            <remarks>By default exceptions
            are not thrown under any circumstances.
            </remarks>
        </member>
        <member name="T:CommonLog.ILogger">
            <summary>
            Provides logging interface and utility functions.
            </summary>
        </member>
        <member name="M:CommonLog.ILogger.Debug(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            And writes pre-event context properties.
            </summary>
            <param name="properties">The properties you can use to render layout.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Debug(System.Collections.Generic.IDictionary{System.String,System.String},System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters and formatting them with the supplied format provider.
            And writes pre-event context properties.
            </summary>
            <param name="properties">The properties you can use to render layout.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:CommonLog.ILogger.Debug(CommonLog.LogMessageLazy)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:CommonLog.ILogger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Debug``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:CommonLog.ILogger.Debug``1(``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
            <overloads>
            Writes the diagnostic message at the <c>Debug</c> level using the specified format provider and format parameters.
            </overloads>
        </member>
        <member name="M:CommonLog.ILogger.Debug``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">The message.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:CommonLog.ILogger.Debug``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Debug``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Debug``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Debugs the specified format provider.
            </summary>
            <typeparam name="TArgument1">The type of the argument1.</typeparam>
            <typeparam name="TArgument2">The type of the argument2.</typeparam>
            <param name="formatProvider">The format provider.</param>
            <param name="message">The message.</param>
            <param name="argument1">The argument1.</param>
            <param name="argument2">The argument2.</param>
        </member>
        <member name="M:CommonLog.ILogger.Debug``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.DebugException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:CommonLog.ILogger.Error(CommonLog.LogMessageLazy)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:CommonLog.ILogger.Error(System.Collections.Generic.IDictionary{System.String,System.String},System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters and formatting them with the supplied format provider.
            And writes pre-event context properties.
            </summary>
            <param name="properties">The properties you can use to render layout.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Error(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            And writes pre-event context properties.
            </summary>
            <param name="properties">The properties you can use to render layout.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Error(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Error``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:CommonLog.ILogger.Error``1(``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
            <overloads>
            Writes the diagnostic message at the <c>Error</c> level using the specified format provider and format parameters.
            </overloads>
        </member>
        <member name="M:CommonLog.ILogger.Error``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">The message.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:CommonLog.ILogger.Error``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Error``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Error``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Error``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.ErrorException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:CommonLog.ILogger.Fatal(CommonLog.LogMessageLazy)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:CommonLog.ILogger.Fatal(System.Collections.Generic.IDictionary{System.String,System.String},System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters and formatting them with the supplied format provider.
            And writes pre-event context properties.
            </summary>
            <param name="properties">The properties you can use to render layout.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Fatal(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters. And writes pre-event context properties.
            </summary>
            <param name="properties">The properties you can use to render layout.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Fatal``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:CommonLog.ILogger.Fatal``1(``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
            <overloads>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified format provider and format parameters.
            </overloads>
        </member>
        <member name="M:CommonLog.ILogger.Fatal``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">The message.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:CommonLog.ILogger.Fatal``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Fatal``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Fatal``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Fatal``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.FatalException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:CommonLog.ILogger.Info(CommonLog.LogMessageLazy)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:CommonLog.ILogger.Info(System.Collections.Generic.IDictionary{System.String,System.String},System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters and formatting them with the supplied format provider.
            And writes pre-event context properties.
            </summary>
            <param name="properties">The properties you can use to render layout.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Info(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            And writes pre-event context properties.
            </summary>
            <param name="properties">The properties you can use to render layout.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Info(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Info``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:CommonLog.ILogger.Info``1(``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
            <overloads>
            Writes the diagnostic message at the <c>Info</c> level using the specified format provider and format parameters.
            </overloads>
        </member>
        <member name="M:CommonLog.ILogger.Info``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">The message.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:CommonLog.ILogger.Info``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Info``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Info``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Info``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.InfoException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="P:CommonLog.ILogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Debug</c> level.
            </summary>
            <value>
            <c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonLog.ILogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Error</c> level.
            </summary>
            <value>
            <c>true</c> if this instance is error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonLog.ILogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Fatal</c> level.
            </summary>
            <value>
            <c>true</c> if this instance is fatal enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonLog.ILogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Info</c> level.
            </summary>
            <value>
            <c>true</c> if this instance is information enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonLog.ILogger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Trace</c> level.
            </summary>
            <value>
            <c>true</c> if this instance is trace enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonLog.ILogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Warn</c> level.
            </summary>
            <value>
            <c>true</c> if this instance is warn enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:CommonLog.ILogger.LoggerReconfigured">
            <summary>
            Occurs when logger configuration changes.
            </summary>
        </member>
        <member name="P:CommonLog.ILogger.Name">
            <summary>
            Gets the name of the logger.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:CommonLog.ILogger.Trace(CommonLog.LogMessageLazy)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:CommonLog.ILogger.Trace(System.Collections.Generic.IDictionary{System.String,System.String},System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters and formatting them with the supplied format provider.
            And writes pre-event context properties.
            </summary>
            <param name="properties">The properties you can use to render layout.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Trace(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            And writes pre-event context properties.
            </summary>
            <param name="properties">The properties you can use to render layout.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Trace(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Trace(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Trace``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:CommonLog.ILogger.Trace``1(``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
            <overloads>
            Writes the diagnostic message at the <c>Trace</c> level using the specified format provider and format parameters.
            </overloads>
        </member>
        <member name="M:CommonLog.ILogger.Trace``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">The message.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:CommonLog.ILogger.Trace``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Trace``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Trace``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Trace``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.TraceException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:CommonLog.ILogger.Warn(CommonLog.LogMessageLazy)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:CommonLog.ILogger.Warn(System.Collections.Generic.IDictionary{System.String,System.String},System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters and formatting them with the supplied format provider.
            And writes pre-event context properties.
            </summary>
            <param name="properties">The properties you can use to render layout.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Warn(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            And writes pre-event context properties.
            </summary>
            <param name="properties">The properties you can use to render layout.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Warn(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Warn``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:CommonLog.ILogger.Warn``1(``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
            <overloads>
            Writes the diagnostic message at the <c>Warn</c> level using the specified format provider and format parameters.
            </overloads>
        </member>
        <member name="M:CommonLog.ILogger.Warn``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">The message.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:CommonLog.ILogger.Warn``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Warn``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Warn``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.Warn``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.ILogger.WarnException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:CommonLog.LogFactory.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:CommonLog.LogFactory.GetLogger(System.String,System.Type)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <param name="loggerType">The type of the logger to create. The type must inherit from NLog.Logger.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the 
            same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="T:CommonLog.LogManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonLog.LogManager.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:CommonLog.LogManager.GetLogger(System.String,System.Type)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <param name="loggerType">The type of the logger to create. The type must inherit from NLog.Logger.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the 
            same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="P:CommonLog.LogManager.MappedDiagnosticsContext">
            <summary>
            a thread-local structure that keeps a dictionary
            of strings and provides methods to output them in layouts. 
            </summary>
        </member>
        <member name="P:CommonLog.LogManager.MappedDiagnosticsLogicalContext">
            <summary>
            Async version of Mapped Diagnostics Context - a logical context structure that keeps a dictionary of strings and provides methods to output them in layouts. 
            Allows for maintaining state across asynchronous tasks and call contexts.
            </summary>
            <remarks>
            Ideally, these changes should be incorporated as a new version of the MappedDiagnosticsContext
            class in the original NLog library so that state can be maintained for multiple
            threads in asynchronous situations.
            </remarks>
        </member>
        <member name="P:CommonLog.LogManager.GlobalDiagnosticsContext">
            <summary>
            Global Diagnostics Context - a dictionary structure to hold per-application-instance values.
            </summary>
        </member>
        <member name="M:CommonLog.LogManager.GetCurrentClassLogger">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:CommonLog.LogManager.GetCurrentClassLogger(System.Type)">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <param name="loggerType">The logger class. The class must inherit from <see cref="!:Logger" />.</param>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="T:CommonLog.LogMessageLazy">
            <summary>
            回傳一個Log Message. 使用於需延遲產生Log訊息的情況.
            </summary>
            <returns>Log message.</returns>
        </member>
        <member name="T:CommonLog.NullLogger">
            <summary>
            empty logger.
            </summary>
        </member>
        <member name="F:CommonLog.NullLogger.soleInstance">
            <summary>
            The sole instance
            </summary>
        </member>
        <member name="P:CommonLog.NullLogger.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:CommonLog.NullLogger.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:CommonLog.NullLogger"/> class from being created.
            </summary>
        </member>
        <member name="M:CommonLog.NullLogger.Debug(CommonLog.LogMessageLazy)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Debug(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Debug``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Debug``1(``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
            <overloads>
            Writes the diagnostic message at the <c>Debug</c> level using the specified format provider and format parameters.
            </overloads>
        </member>
        <member name="M:CommonLog.NullLogger.Debug``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="TArgument"></typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message"></param>
            <param name="argument"></param>
        </member>
        <member name="M:CommonLog.NullLogger.Debug``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Debug``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Debug``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Debugs the specified format provider.
            </summary>
            <typeparam name="TArgument1">The type of the argument1.</typeparam>
            <typeparam name="TArgument2">The type of the argument2.</typeparam>
            <param name="formatProvider">The format provider.</param>
            <param name="message">The message.</param>
            <param name="argument1">The argument1.</param>
            <param name="argument2">The argument2.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Debug``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.DebugException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Error(CommonLog.LogMessageLazy)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Error(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Error``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Error``1(``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
            <overloads>
            Writes the diagnostic message at the <c>Error</c> level using the specified format provider and format parameters.
            </overloads>
        </member>
        <member name="M:CommonLog.NullLogger.Error``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="TArgument"></typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message"></param>
            <param name="argument"></param>
        </member>
        <member name="M:CommonLog.NullLogger.Error``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Error``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Error``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Error``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.ErrorException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Fatal(CommonLog.LogMessageLazy)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Fatal(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Fatal``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Fatal``1(``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
            <overloads>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified format provider and format parameters.
            </overloads>
        </member>
        <member name="M:CommonLog.NullLogger.Fatal``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="TArgument"></typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message"></param>
            <param name="argument"></param>
        </member>
        <member name="M:CommonLog.NullLogger.Fatal``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Fatal``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Fatal``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Fatal``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.FatalException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Info(CommonLog.LogMessageLazy)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Info(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Info``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Info``1(``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
            <overloads>
            Writes the diagnostic message at the <c>Info</c> level using the specified format provider and format parameters.
            </overloads>
        </member>
        <member name="M:CommonLog.NullLogger.Info``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="TArgument"></typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message"></param>
            <param name="argument"></param>
        </member>
        <member name="M:CommonLog.NullLogger.Info``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Info``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Info``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Info``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.InfoException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="P:CommonLog.NullLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Debug</c> level.
            </summary>
        </member>
        <member name="P:CommonLog.NullLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Error</c> level.
            </summary>
        </member>
        <member name="P:CommonLog.NullLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Fatal</c> level.
            </summary>
        </member>
        <member name="P:CommonLog.NullLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Info</c> level.
            </summary>
        </member>
        <member name="P:CommonLog.NullLogger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Trace</c> level.
            </summary>
        </member>
        <member name="P:CommonLog.NullLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Warn</c> level.
            </summary>
        </member>
        <member name="E:CommonLog.NullLogger.LoggerReconfigured">
            <summary>
            Occurs when logger configuration changes.
            </summary>
        </member>
        <member name="P:CommonLog.NullLogger.Name">
            <summary>
            Gets the name of the logger.
            </summary>
        </member>
        <member name="M:CommonLog.NullLogger.Trace(CommonLog.LogMessageLazy)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Trace(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Trace(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Trace``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Trace``1(``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
            <overloads>
            Writes the diagnostic message at the <c>Trace</c> level using the specified format provider and format parameters.
            </overloads>
        </member>
        <member name="M:CommonLog.NullLogger.Trace``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="TArgument"></typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message"></param>
            <param name="argument"></param>
        </member>
        <member name="M:CommonLog.NullLogger.Trace``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Trace``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Trace``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Trace``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.TraceException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Warn(CommonLog.LogMessageLazy)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Warn(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Warn``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Warn``1(``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
            <overloads>
            Writes the diagnostic message at the <c>Warn</c> level using the specified format provider and format parameters.
            </overloads>
        </member>
        <member name="M:CommonLog.NullLogger.Warn``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="TArgument"></typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message"></param>
            <param name="argument"></param>
        </member>
        <member name="M:CommonLog.NullLogger.Warn``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Warn``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Warn``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Warn``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:CommonLog.NullLogger.WarnException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:CommonLog.NullLogger.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CommonLog.NullDiagnosticsContext.Set(System.String,System.String)">
            <summary>
            Sets the current thread MDC item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:CommonLog.NullDiagnosticsContext.Get(System.String)">
            <summary>
            Gets the current thread MDC named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The item value of string.Empty if the value is not present.</returns>
        </member>
        <member name="M:CommonLog.NullDiagnosticsContext.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in current thread MDC.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified item exists in current thread MDC.</returns>
        </member>
        <member name="M:CommonLog.NullDiagnosticsContext.Remove(System.String)">
            <summary>
            Removes the specified item from current thread MDC.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:CommonLog.NullDiagnosticsContext.Clear">
            <summary>
            Clears the content of current thread MDC.
            </summary>
        </member>
        <member name="T:CommonIoC.ContainerProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonIoC.InstanceContainerBase">
            <summary>
            This class is a helper that provides a default implementation
            for most of the methods of <see cref="T:CommonIoC.IInstanceContainer" />.
            </summary>
            <summary>
            This class is a helper that provides a default implementation
            for most of the methods of <see cref="T:CommonIoC.IInstanceContainer" />.
            </summary>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.FormatInstanceResolveExceptionMessage(System.Exception,System.Type,System.String)">
            <summary>
            Format the exception message for use in an <see cref="!:ActivationException" />
            that occurs while resolving a single service.
            </summary>
            <param name="actualException">The actual exception thrown by the implementation.</param>
            <param name="serviceType">Type of service requested.</param>
            <param name="key">Name requested.</param>
            <returns>
            The formatted exception message string.
            </returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.FormatInstanceResolveAllExceptionMessage(System.Exception,System.Type)">
            <summary>
            Format the exception message for use in an <see cref="!:ActivationException" />
            that occurs while resolving multiple service instances.
            </summary>
            <param name="actualException">The actual exception thrown by the implementation.</param>
            <param name="serviceType">Type of service requested.</param>
            <returns>
            The formatted exception message string.
            </returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.Resolve(System.Type)">
            <summary>
            Get an instance of the given <paramref name="serviceType" />.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <returns>
            The requested service instance.
            </returns>
            <exception cref="T:CommonIoC.InstanceResolveException"></exception>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.Resolve(System.Type,System.Object)">
            <summary>
            Resolves the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns>
            The requested service instance.
            </returns>
            <exception cref="T:CommonIoC.InstanceResolveException"></exception>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.Resolve(System.Type,System.Collections.IDictionary)">
            <summary>
            Resolves the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="arguments">The arguments.</param>
            <returns>
            The requested service instance.
            </returns>
            <exception cref="T:CommonIoC.InstanceResolveException"></exception>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.Resolve(System.String,System.Type)">
            <summary>
            Get an instance of the given named <paramref name="serviceType" />.
            </summary>
            <param name="key">Name the object was registered with.</param>
            <param name="serviceType">Type of object requested.</param>
            <returns>
            The requested service instance.
            </returns>
            <exception cref="T:CommonIoC.InstanceResolveException"></exception>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.Resolve(System.String,System.Type,System.Object)">
            <summary>
            Resolves the instance.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns></returns>
            <exception cref="T:CommonIoC.InstanceResolveException"></exception>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.Resolve(System.String,System.Type,System.Collections.IDictionary)">
            <summary>
            Resolves the instance.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
            <exception cref="T:CommonIoC.InstanceResolveException"></exception>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.ResolveAll(System.Type)">
            <summary>
            Get all instances of the given <paramref name="serviceType" /> currently
            registered in the container.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <returns>
            A sequence of instances of the requested <paramref name="serviceType" />.
            </returns>
            <exception cref="T:CommonIoC.InstanceResolveException"></exception>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.ResolveAll(System.Type,System.Object)">
            <summary>
            Resolves all instances.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns></returns>
            <exception cref="T:CommonIoC.InstanceResolveException"></exception>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.ResolveAll(System.Type,System.Collections.IDictionary)">
            <summary>
            Resolves all instances.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
            <exception cref="T:CommonIoC.InstanceResolveException"></exception>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.Resolve``1">
            <summary>
            Get an instance of the given <typeparamref name="TService" />.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <returns>
            The requested service instance.
            </returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.Resolve``1(System.Object)">
            <summary>
            Resolves the instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.Resolve``1(System.String,System.Object)">
            <summary>
            Resolves the instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="key">The key.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.Resolve``1(System.Collections.IDictionary)">
            <summary>
            Resolves the instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.Resolve``1(System.String,System.Collections.IDictionary)">
            <summary>
            Resolves the instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="key">The key.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.Resolve``1(System.String)">
            <summary>
            Get an instance of the given named <typeparamref name="TService" />.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="key">Name the object was registered with.</param>
            <returns>
            The requested service instance.
            </returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.ResolveAll``1">
            <summary>
            Get all instances of the given <typeparamref name="TService" /> currently
            registered in the container.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <returns>
            A sequence of instances of the requested <typeparamref name="TService" />.
            </returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.ResolveAll``1(System.Collections.IDictionary)">
            <summary>
            Resolves all instances.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.ResolveAll``1(System.Object)">
            <summary>
            Resolves all instances.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.Install(CommonIoC.IInstaller[])">
            <summary>
            Installs the specified installers.
            </summary>
            <param name="installers">The installers.</param>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.Register(CommonIoC.IRegistration[])">
            <summary>
            Register the component with the <see cref="T:CommonIoC.IInstanceContainer" />.
            </summary>
            <typeparam name="TRegister">The type of the register.</typeparam>
            <param name="registration">The registration.</param>
            <returns>
            The IInstanceContainer object that this method was
            called on (this in C#, Me in Visual Basic).
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>
            Instance registration is much like setting a type as a singleton, except
            that instead of the container creating the instance the first time it is
            requested, the user creates the instance ahead of type and adds that instance
            to the container.
            Fluent codeing style. 
            </remarks>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.PerformResolveInstance(System.Type,System.Object)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.PerformResolveInstance(System.String,System.Type,System.Object)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.PerformResolveInstance(System.String,System.Type,System.Collections.IDictionary)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="arguments">The arguments.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.PerformResolveInstance(System.Type,System.Collections.IDictionary)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="arguments">The arguments.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.PerformResolveInstance(System.String,System.Type)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of resolving
            the requested service instance.
            </summary>
            <param name="key">Name of registered service you want. May be null.</param>
            <param name="serviceType">Type of instance requested.</param>
            <returns>
            The requested service instance.
            </returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.PerformResolveInstance(System.Type)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of resolving
            the requested service instance.
            </summary>
            <param name="serviceType">Type of instance requested.</param>
            <returns>
            The requested service instance.
            </returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.PerformResolveAllInstances(System.Type)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.PerformResolveAllInstances(System.Type,System.Object)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.PerformResolveAllInstances(System.Type,System.Collections.IDictionary)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <param name="arguments">The arguments.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.PerformRegister(System.Collections.Generic.IEnumerable{CommonIoC.IRegistration})">
            <summary>
            Performs the register.
            </summary>
            <param name="registrations">The registrations.</param>
            <returns>
            The IInstanceContainer object that this method was
            called on (this in C#, Me in Visual Basic).
            </returns>
            <remarks>
            Instance registration is much like setting a type as a singleton, except
            that instead of the container creating the instance the first time it is
            requested, the user creates the instance ahead of type and adds that instance
            to the container.
            </remarks>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.GetService(System.Type)">
            <summary>
            Implementation of <see cref="M:System.IServiceProvider.GetService(System.Type)" />.
            </summary>
            <param name="serviceType">The requested service.</param>
            <returns>
            The requested object.
            </returns>
            <exception cref="!:ActivationException">if there is an error in resolving the service instance.</exception>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.ResolveInstance(System.Type)">
            <summary>
            Get an instance of the given <paramref name="serviceType" />.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <returns>
            The requested service instance.
            </returns>
            <exception cref="!:ActivationException">if there is an error resolving
            the service instance.</exception>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.ResolveInstance(System.Type,System.String)">
            <summary>
            Get an instance of the given named <paramref name="serviceType" />.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <param name="key">Name the object was registered with.</param>
            <returns>
            The requested service instance.
            </returns>
            <exception cref="T:CommonIoC.InstanceResolveException"></exception>
            <exception cref="!:ActivationException">if there is an error resolving
            the service instance.</exception>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.ResolveAllInstances(System.Type)">
            <summary>
            Get all instances of the given <paramref name="serviceType" /> currently
            registered in the container.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <returns>
            A sequence of instances of the requested <paramref name="serviceType" />.
            </returns>
            <exception cref="T:CommonIoC.InstanceResolveException"></exception>
            <exception cref="!:ActivationException">if there is are errors resolving
            the service instance.</exception>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.ResolveInstance``1">
            <summary>
            Get an instance of the given <typeparamref name="TService" />.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <returns>
            The requested service instance.
            </returns>
            <exception cref="!:ActivationException">if there is are errors resolving
            the service instance.</exception>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.ResolveInstance``1(System.String)">
            <summary>
            Get an instance of the given named <typeparamref name="TService" />.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="key">Name the object was registered with.</param>
            <returns>
            The requested service instance.
            </returns>
            <exception cref="!:ActivationException">if there is are errors resolving
            the service instance.</exception>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.ResolveAllInstances``1">
            <summary>
            Get all instances of the given <typeparamref name="TService" /> currently
            registered in the container.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <returns>
            A sequence of instances of the requested <typeparamref name="TService" />.
            </returns>
            <exception cref="!:ActivationException">if there is are errors resolving
            the service instance.</exception>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.RegisterInstance``1(``0,System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            </summary>
            <typeparam name="T">Type of instance to register</typeparam>
            <param name="key">Name for registration.</param>
            <param name="instance">Object to returned.</param>
            <returns>
            The Microsoft.Practices.Unity.UnityContainer object that this method was
            called on (this in C#, Me in Visual Basic).
            </returns>
            <remarks>
            Instance registration is much like setting a type as a singleton, except
            that instead of the container creating the instance the first time it is
            requested, the user creates the instance ahead of type and adds that instance
            to the container.
            </remarks>
        </member>
        <member name="M:CommonIoC.InstanceContainerBase.RegisterType``2(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register a type mapping with the container, where the created instances will
            use the given Microsoft.Practices.Unity.LifetimeManager.
            </summary>
            <typeparam name="TType"></typeparam>
            <typeparam name="AssignFromTType"></typeparam>
            <param name="key"></param>
            <returns>
            The Microsoft.Practices.Unity.UnityContainer object that this method was called on (this in C#, Me in Visual Basic).
            </returns>
        </member>
        <member name="T:CommonIoC.IInstanceContainer">
            <summary>
            
            </summary>
            <summary>
            提供欲進行反轉控制(Inversion Of Control)的一般化的實例容器(instance container)界面. 界面提供依型別及名稱做為實例(Instance)識別. 
            </summary>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.Resolve(System.Type)">
            <summary>
            Get an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="T:CommonIoC.InstanceResolveException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.Resolve(System.Type,System.Object)">
            <summary>
            Resolves the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <exception cref="T:CommonIoC.InstanceResolveException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.Resolve(System.Type,System.Collections.IDictionary)">
            <summary>
            Resolves the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="arguments">The arguments.</param>
            <exception cref="T:CommonIoC.InstanceResolveException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.Resolve(System.String,System.Type)">
            <summary>
            Get an instance of the given named <paramref name="serviceType"/>.
            </summary>
            <param name="key">Name the object was registered with.</param>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="T:CommonIoC.InstanceResolveException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.Resolve(System.String,System.Type,System.Object)">
            <summary>
            Resolves the instance.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.Resolve(System.String,System.Type,System.Collections.IDictionary)">
            <summary>
            Resolves the instance.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.ResolveAll(System.Type)">
            <summary>
            Get all instances of the given <paramref name="serviceType"/> currently
            registered in the container.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="T:CommonIoC.InstanceResolveException">if there is are errors resolving
            the service instance.</exception>
            <returns>A sequence of instances of the requested <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.ResolveAll(System.Type,System.Object)">
            <summary>
            Resolves all instances.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <exception cref="T:CommonIoC.InstanceResolveException">if there is are errors resolving
            the service instance.</exception>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.ResolveAll(System.Type,System.Collections.IDictionary)">
            <summary>
            Resolves all instances.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="arguments">The arguments.</param>
            <exception cref="T:CommonIoC.InstanceResolveException">if there is are errors resolving
            the service instance.</exception>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.Resolve``1">
            <summary>
            Get an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <exception cref="T:CommonIoC.InstanceResolveException">if there is are errors resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.Resolve``1(System.Object)">
            <summary>
            Resolves the instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <exception cref="T:CommonIoC.InstanceResolveException">if there is are errors resolving
            the service instance.</exception>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.Resolve``1(System.String,System.Object)">
            <summary>
            Resolves the instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="key">The key.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <exception cref="T:CommonIoC.InstanceResolveException">if there is are errors resolving
            the service instance.</exception>        
            <returns></returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.Resolve``1(System.Collections.IDictionary)">
            <summary>
            Resolves the instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="arguments">The arguments.</param>
            <exception cref="T:CommonIoC.InstanceResolveException">if there is are errors resolving
            the service instance.</exception>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.Resolve``1(System.String,System.Collections.IDictionary)">
            <summary>
            Resolves the instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="key">The key.</param>
            <param name="arguments">The arguments.</param>
            <exception cref="T:CommonIoC.InstanceResolveException">if there is are errors resolving
            the service instance.</exception>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.Resolve``1(System.String)">
            <summary>
            Get an instance of the given named <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="key">Name the object was registered with.</param>
            <exception cref="T:CommonIoC.InstanceResolveException">if there is are errors resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.ResolveAll``1">
            <summary>
            Get all instances of the given <typeparamref name="TService"/> currently
            registered in the container.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <exception cref="T:CommonIoC.InstanceResolveException">if there is are errors resolving
            the service instance.</exception>
            <returns>A sequence of instances of the requested <typeparamref name="TService"/>.</returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.ResolveAll``1(System.Collections.IDictionary)">
            <summary>
            Resolves all instances.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="arguments">The arguments.</param>
            <exception cref="T:CommonIoC.InstanceResolveException">if there is are errors resolving
            the service instance.</exception>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.ResolveAll``1(System.Object)">
            <summary>
            Resolves all instances.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <exception cref="T:CommonIoC.InstanceResolveException">if there is are errors resolving
            the service instance.</exception>        
            <returns></returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.Register(CommonIoC.IRegistration[])">
            <summary>
            Registers the specified registration.
            <seealso cref="!:RegistrationCreator" /> could help to create <see cref="T:CommonIoC.IRegistration" /> instance.
            </summary>
            <param name="registration">The registration.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.Install(CommonIoC.IInstaller[])">
            <summary>
            Installs the specified installers.
            </summary>
            <param name="installers">The installers.</param>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.ResolveInstance(System.Type)">
            <summary>
            Get an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="!:ActivationException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.ResolveInstance(System.Type,System.String)">
            <summary>
            Get an instance of the given named <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <param name="key">Name the object was registered with.</param>
            <exception cref="!:ActivationException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.ResolveAllInstances(System.Type)">
            <summary>
            Get all instances of the given <paramref name="serviceType"/> currently
            registered in the container.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="!:ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>A sequence of instances of the requested <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.ResolveInstance``1">
            <summary>
            Get an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <exception cref="!:ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.ResolveInstance``1(System.String)">
            <summary>
            Get an instance of the given named <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="key">Name the object was registered with.</param>
            <exception cref="!:ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.ResolveAllInstances``1">
            <summary>
            Get all instances of the given <typeparamref name="TService"/> currently
            registered in the container.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <exception cref="!:ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>A sequence of instances of the requested <typeparamref name="TService"/>.</returns>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.RegisterInstance``1(``0,System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register the component with the <see cref="T:CommonIoC.IInstanceContainer" />.
            </summary>
            <typeparam name="T">Type of instance to register</typeparam>
            <param name="instance">Object to returned.</param>
            <param name="key">Name for registration.</param>
            <param name="forwardTypes">The forward types.</param>
            <returns>
            The IInstanceContainer object that this method was
            called on (this in C#, Me in Visual Basic).
            </returns>
            <remarks>
            Instance registration is much like setting a type as a singleton, except
            that instead of the container creating the instance the first time it is
            requested, the user creates the instance ahead of type and adds that instance
            to the container.
            </remarks>
        </member>
        <member name="M:CommonIoC.IInstanceContainer.RegisterType``2(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Registers the type.
            </summary>
            <typeparam name="TType">The type to be registed.</typeparam>
            <typeparam name="AssignFromTType">The type of the ssign from t type.</typeparam>
            <param name="key">The key.</param>
            <param name="forwardType">Type of the forward.</param>
            <returns>
            The Microsoft.Practices.Unity.UnityContainer object that this method was called on (this in C#, Me in Visual Basic).
            </returns>
        </member>
        <member name="T:CommonIoC.InstanceContainerContract">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.Resolve(System.Type)">
            <summary>
            Resolves the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.Resolve(System.Type,System.Object)">
            <summary>
            Resolves the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.Resolve(System.Type,System.Collections.IDictionary)">
            <summary>
            Resolves the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.Resolve(System.String,System.Type)">
            <summary>
            Resolves the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.Resolve(System.String,System.Type,System.Object)">
            <summary>
            Resolves the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.Resolve(System.String,System.Type,System.Collections.IDictionary)">
            <summary>
            Resolves the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.ResolveAll(System.Type)">
            <summary>
            Resolves all.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.ResolveAll(System.Type,System.Object)">
            <summary>
            Resolves all.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.ResolveAll(System.Type,System.Collections.IDictionary)">
            <summary>
            Resolves all.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.Resolve``1">
            <summary>
            Resolves this instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.Resolve``1(System.Object)">
            <summary>
            Resolves the specified arguments as anonymous type.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.Resolve``1(System.String,System.Object)">
            <summary>
            Resolves the specified key.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="key">The key.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.Resolve``1(System.Collections.IDictionary)">
            <summary>
            Resolves the specified arguments.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.Resolve``1(System.String,System.Collections.IDictionary)">
            <summary>
            Resolves the specified key.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="key">The key.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.Resolve``1(System.String)">
            <summary>
            Resolves the specified key.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.ResolveAll``1">
            <summary>
            Resolves all.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.ResolveAll``1(System.Collections.IDictionary)">
            <summary>
            Resolves all.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.ResolveAll``1(System.Object)">
            <summary>
            Resolves all.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.Register(CommonIoC.IRegistration[])">
            <summary>
            Registers the specified registration.
            </summary>
            <param name="registration">The registration.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.Install(CommonIoC.IInstaller[])">
            <summary>
            Installs the specified installers.
            </summary>
            <param name="installers">The installers.</param>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.ResolveInstance(System.Type)">
            <summary>
            Resolves the instance.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.ResolveInstance(System.Type,System.String)">
            <summary>
            Resolves the instance.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.ResolveAllInstances(System.Type)">
            <summary>
            Resolves all instances.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.ResolveInstance``1">
            <summary>
            Resolves the instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.ResolveInstance``1(System.String)">
            <summary>
            Resolves the instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.ResolveAllInstances``1">
            <summary>
            Resolves all instances.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.RegisterInstance``1(``0,System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Registers the instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
            <param name="forwardTypes">The forward types.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.RegisterType``2(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Registers the type.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <typeparam name="AssignFromTType">The type of the ssign from t type.</typeparam>
            <param name="key">The key.</param>
            <param name="forwardTypes">The forward types.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:CommonIoC.InstanceContainerContract.GetService(System.Type)">
            <summary>
            Gets the service.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="T:CommonIoC.AssemblyInstaller">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonIoC.AssemblyInstaller.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonIoC.AssemblyInstaller"/> class.
            </summary>
            <param name="assembly">The assembly.</param>
            <exception cref="T:System.ArgumentNullException">assembly</exception>
        </member>
        <member name="M:CommonIoC.AssemblyInstaller.Install(CommonIoC.IInstanceContainer)">
            <summary>
            Installs the specified container.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="T:CommonIoC.CompositeInstaller">
            <summary>
            Installer of composite
            </summary>
        </member>
        <member name="M:CommonIoC.CompositeInstaller.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonIoC.CompositeInstaller"/> class.
            </summary>
        </member>
        <member name="M:CommonIoC.CompositeInstaller.#ctor(System.Collections.Generic.IEnumerable{CommonIoC.IInstaller})">
            <summary>
            Initializes a new instance of the <see cref="T:CommonIoC.CompositeInstaller"/> class.
            </summary>
            <param name="installers">The installers.</param>
            <exception cref="T:System.ArgumentNullException">installers</exception>
        </member>
        <member name="M:CommonIoC.CompositeInstaller.Install(CommonIoC.IInstanceContainer)">
            <summary>
            Installs the specified container.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:CommonIoC.CompositeInstaller.Add(CommonIoC.IInstaller)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:CommonIoC.CompositeInstaller.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:CommonIoC.CompositeInstaller.Contains(CommonIoC.IInstaller)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:CommonIoC.CompositeInstaller.CopyTo(CommonIoC.IInstaller[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:CommonIoC.CompositeInstaller.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:CommonIoC.CompositeInstaller.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:CommonIoC.CompositeInstaller.Remove(CommonIoC.IInstaller)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:CommonIoC.CompositeInstaller.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CommonIoC.CompositeInstaller.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:CommonIoC.EmptyInstaller">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonIoC.EmptyInstaller.Install(CommonIoC.IInstanceContainer)">
            <summary>
            Installs the specified container.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="T:CommonIoC.InstallerResource">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonIoC.InstallerResource.FromXmlFile(System.String)">
            <summary>
            Froms the XML file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The file name cannot be null or empty.;fileName</exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:CommonIoC.InstallerResource.FromXmlDirectory(System.String,System.Collections.Generic.IEnumerable{System.String},System.Predicate{System.String})">
            <summary>
            Froms the XML directory.
            </summary>
            <param name="path">The path.</param>
            <param name="extensionNames">The extension names. Default is .xml</param>
            <param name="filter">The filter will return file name then client return true or false that want used.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The path cannot be null or empty.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="M:CommonIoC.InstallerResource.FromAssemblyDirectory(System.String,System.Predicate{System.String})">
            <summary>
            Froms the assembly.
            </summary>
            <param name="path">The path. Default is current application path.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specify path is not exist.</exception>
        </member>
        <member name="M:CommonIoC.InstallerResource.FromCurrentAssembly">
            <summary>
            Froms the current assembly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.InstallerResource.FromAssembly(System.Reflection.Assembly)">
            <summary>
            Froms the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">assembly</exception>
        </member>
        <member name="M:CommonIoC.InstallerResource.FromAssemblyName(System.String)">
            <summary>
            Froms the name of the assembly.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">assembly name cannot be null or empty</exception>
        </member>
        <member name="T:CommonIoC.InstanceContainerManager">
            <summary>
            此類別提供使用者取得/設定 目前使用的實例容器(instance container).
            </summary>
        </member>
        <member name="M:CommonIoC.InstanceContainerManager.CreateInstance">
            <summary>
            Creates the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CommonIoC.InstanceContainerManager.Default">
            <summary>
            Gets the default.
            </summary>
            <value>
            The default.
            </value>
        </member>
        <member name="M:CommonIoC.InstanceContainerManager.SetContainerProvider(CommonIoC.ContainerProvider,System.Func{System.String,CommonIoC.IInstaller})">
            <summary>
            Sets the container provider.
            </summary>
            <param name="containerCreator">The caontainer creator delegate.</param>
            <param name="xmlInstallerSource">The XML installer source.</param>
            <exception cref="T:System.ArgumentNullException">containerCreator</exception>
        </member>
        <member name="M:CommonIoC.InstanceContainerManager.XMLInstallerGenerator(System.String)">
            <summary>
            XMLs the installer generator.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="P:CommonIoC.InstanceContainerManager.Current">
            <summary>
            The current ambient container.
            </summary>
        </member>
        <member name="M:CommonIoC.InstanceContainerManager.SetLocatorProvider(CommonIoC.ContainerProvider)">
            <summary>
            Set the delegate that is used to retrieve the current container.
            </summary>
            <param name="newProvider">Delegate that, when called, will return
            the current ambient container.</param>
        </member>
        <member name="T:CommonIoC.IRegistration">
            <summary>
            The interface Registration for non-GenericType version.
            </summary>
        </member>
        <member name="P:CommonIoC.IRegistration.Key">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:CommonIoC.IRegistration.IsInstanceRegistration">
            <summary>
            Gets a value indicating whether this instance is instance registration.
            </summary>
            <value>
            <c>true</c> if this instance is instance registration; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonIoC.IRegistration.ObtainRegisterTypes">
            <summary>
            Gets the obtain register types.
            </summary>
            <value>
            The obtain register types.
            </value>
        </member>
        <member name="P:CommonIoC.IRegistration.ObtainRealizeType">
            <summary>
            Gets the type of the obtain realize.
            </summary>
            <value>
            The type of the obtain realize.
            </value>
        </member>
        <member name="P:CommonIoC.IRegistration.ObtainInstance">
            <summary>
            Gets the obtain instance.
            </summary>
            <value>
            The obtain instance.
            </value>
        </member>
        <member name="P:CommonIoC.IRegistration.LifeStyle">
            <summary>
            Gets the life style.
            </summary>
            <value>
            The life style.
            </value>
        </member>
        <member name="P:CommonIoC.IRegistration.Injectors">
            <summary>
            Gets the injectors.
            </summary>
            <value>
            The injectors.
            </value>
        </member>
        <member name="P:CommonIoC.IRegistration.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="T:CommonIoC.IInjector`2">
            <summary>
            
            </summary>
            <typeparam name="TName">The type of the name.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:CommonIoC.IInjector`2.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:CommonIoC.IInjector`2.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:CommonIoC.Injector">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonIoC.Injector.OnAppSettings(System.String)">
            <summary>
            Called when [application settings].
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:CommonIoC.Injector.OnAppSettings(System.String,System.String)">
            <summary>
            Called when [application settings].
            </summary>
            <param name="nameToInject">Name of the inject.</param>
            <param name="settingName">Name of the setting.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">injectName</exception>
        </member>
        <member name="M:CommonIoC.Injector.OnValue(System.String,System.Object)">
            <summary>
            Called when [value].
            </summary>
            <param name="nameToInject">Name of the inject.</param>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">injectName</exception>
        </member>
        <member name="M:CommonIoC.Injector.OnValue(System.Type,System.Object)">
            <summary>
            Called when [value].
            </summary>
            <param name="typeToInject">Type of the property.</param>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyType
            or
            value</exception>
        </member>
        <member name="M:CommonIoC.Injector.OnValue``1(System.Object)">
            <summary>
            Called when [value].
            </summary>
            <typeparam name="TInject">The type of the type.</typeparam>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:CommonIoC.Injector.OnResource``1(System.String,System.String)">
            <summary>
            Called when [resource].
            </summary>
            <typeparam name="TResources">The type of the resources.</typeparam>
            <param name="nameToInject">The name to inject.</param>
            <param name="resourceName">Name of the resource.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">dependencyName
            or
            resourceName</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:CommonIoC.Injector.OnResource``1(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Called when [resource].
            </summary>
            <typeparam name="TResources">The type of the resources.</typeparam>
            <param name="nameToInject">The name to inject.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">dependencyName
            or
            resourceName
            or
            culture</exception>
        </member>
        <member name="M:CommonIoC.Injector.OnResource(System.String,System.Resources.ResourceManager,System.String)">
            <summary>
            Called when [resource].
            </summary>
            <param name="nameToInject">Name of the inject.</param>
            <param name="resourceManager">The resource manager.</param>
            <param name="resourceName">Name of the resource.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">injectName
            or
            resourceManager</exception>
        </member>
        <member name="M:CommonIoC.Injector.OnResource(System.String,System.Resources.ResourceManager,System.String,System.Globalization.CultureInfo)">
            <summary>
            Called when [resource].
            </summary>
            <param name="nameToInject">Name of the inject.</param>
            <param name="resourceManager">The resource manager.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">injectName
            or
            resourceManager
            or
            culture
            or
            resourceName</exception>
        </member>
        <member name="M:CommonIoC.Injector.OnAnotherInjection(System.String,System.Type)">
            <summary>
            Called when another register type.
            </summary>
            <param name="nameToInject">Name of the inject.</param>
            <param name="another">A realize type on another injection.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            injectName
            or
            another
            </exception>
        </member>
        <member name="M:CommonIoC.Injector.OnAnotherInjection(System.String,System.String)">
            <summary>
            Called when [another injection].
            </summary>
            <param name="nameToInject">Name of the inject.</param>
            <param name="registerName">Name of the register.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">injectName
            or
            registerName</exception>
        </member>
        <member name="M:CommonIoC.Injector.OnAnotherInjection(System.Type,System.String)">
            <summary>
            Called when [another injection].
            </summary>
            <param name="typeToInject">Type of the inject.</param>
            <param name="registerName">Name of the register.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">injectType
            or
            registerName</exception>
        </member>
        <member name="M:CommonIoC.Injector.OnAnotherInjection(System.Type,System.Type)">
            <summary>
            Called when register type..
            </summary>
            <param name="typeToInject">Type of the inject.</param>
            <param name="another">A realize type on another injection.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">injectType
            or
            another</exception>
        </member>
        <member name="M:CommonIoC.Injector.OnAnotherInjection``2">
            <summary>
            Called when register type..
            </summary>
            <typeparam name="TInject">The type of the inject.</typeparam>
            <typeparam name="TAnotherRealize">The realize type of another register.</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.Injector.OnAnotherInjection``1(System.Type)">
            <summary>
            Called when [another].
            </summary>
            <typeparam name="TInject">The type of the inject.</typeparam>
            <param name="another">Another.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">another</exception>
        </member>
        <member name="M:CommonIoC.Injector.OnAnotherInjection``1(System.String)">
            <summary>
            Called when [another injection].
            </summary>
            <typeparam name="TInject">The type of the inject.</typeparam>
            <param name="registerName">Name of the register.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">registerName</exception>
        </member>
        <member name="M:CommonIoC.Injector.OnCollectionInjection(System.String,System.Type[])">
            <summary>
            Called when [collection].
            </summary>
            <param name="collectionInjectName">Name of the collection inject.</param>
            <param name="others">The others.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            collectionInjectName
            or
            anothers
            </exception>
        </member>
        <member name="M:CommonIoC.Injector.OnCollectionInjection(System.Type,System.Type[])">
            <summary>
            Called when [collection].
            </summary>
            <param name="collectionInjectType">Type of the collection inject.</param>
            <param name="others">The others.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            collectionInjectType
            or
            anothers
            </exception>
        </member>
        <member name="M:CommonIoC.Injector.OnCollectionInjection``1(System.Type[])">
            <summary>
            Called when [collection].
            </summary>
            <typeparam name="TInject">The type of the inject.</typeparam>
            <param name="others">The realize type from others registers.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">anothers</exception>
        </member>
        <member name="T:CommonIoC.Injector`2">
            <summary>
            
            </summary>
            <typeparam name="TName">The type of the name.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:CommonIoC.Injector`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonIoC.Injector`2"/> class.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:CommonIoC.Injector`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonIoC.Injector`2"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="P:CommonIoC.Injector`2.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:CommonIoC.Injector`2.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:CommonIoC.IParameterSetting`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CommonIoC.IParameterSetting`1.Eq(System.String)">
            <summary>
            Eqs the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:CommonIoC.IPropertySetting`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CommonIoC.IPropertySetting`1.Eq(System.Object)">
            <summary>
            Eqs the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:CommonIoC.ParameterSetting">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonIoC.ParameterSetting.For(System.String)">
            <summary>
            Fors the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:CommonIoC.PropertySetting.For(System.Object)">
            <summary>
            Fors the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:CommonIoC.PropertySetting.For(System.Type)">
            <summary>
            Fors the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:CommonIoC.PropertySetting.For``1">
            <summary>
            Fors this instance.
            </summary>
            <typeparam name="TName">The type of the name.</typeparam>
            <returns></returns>
        </member>
        <member name="T:CommonIoC.Registration">
            <summary>
            Registration type, instance and realize teyp to container. 
            Create instance by static methods. Like InstanceFor, RealizeFor...etc. 
            </summary>
        </member>
        <member name="M:CommonIoC.Registration.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:CommonIoC.Registration"/> class.
            </summary>
            <param name="typeToRegister">The type to register.</param>
        </member>
        <member name="M:CommonIoC.Registration.InstanceFor(System.Object,System.Type)">
            <summary>
            Registers the instance.
            </summary>
            <param name="instance">The instance to be resolve.</param>
            <param name="registerType">Type of the register.</param>
            <returns></returns>
            <remarks>注意!GenericType的順序與主流(Windsor, Unity)不同, 目的是為了讓生成對象 - instance與其它所有注冊類別區分.</remarks>
        </member>
        <member name="M:CommonIoC.Registration.InstanceFor(System.Object,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Registers the instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="registerTypes">The register types.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            instance
            or
            registerTypes
            </exception>
            <remarks>注意!GenericType的順序與主流(Windsor, Unity)不同, 目的是為了讓生成對象 - instance與其它所有注冊類別區分.</remarks>
        </member>
        <member name="M:CommonIoC.Registration.InstanceFor``1(``0,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Registers the instance.
            </summary>
            <typeparam name="TRegister">The type of the register.</typeparam>
            <param name="instance">The instance.</param>
            <param name="registerTypes">The type to register.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            instance
            or
            typeToRegister
            </exception>
            <remarks>注意!GenericType的順序與主流(Windsor, Unity)不同, 目的是為了讓生成對象 - instance與其它所有注冊類別區分.</remarks>
        </member>
        <member name="M:CommonIoC.Registration.InstanceFor``1(``0)">
            <summary>
            Registers the instance.
            </summary>
            <typeparam name="TRegister">The type of the register.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">instance</exception>
            <remarks>注意!GenericType的順序與主流(Windsor, Unity)不同, 目的是為了讓生成對象 - instance與其它所有注冊類別區分.</remarks>
        </member>
        <member name="M:CommonIoC.Registration.InstanceFor``2(``0)">
            <summary>
            Registers the instance.
            </summary>
            <typeparam name="TRegister">The type of the register.</typeparam>
            <typeparam name="TRegister2">The type of the register2.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
            <remarks>注意!GenericType的順序與主流(Windsor, Unity)不同, 目的是為了讓生成對象 - instance與其它所有注冊類別區分.</remarks>
        </member>
        <member name="M:CommonIoC.Registration.InstanceFor``3(``0)">
            <summary>
            Registers the instance.
            </summary>
            <typeparam name="TRegister">The type of the register.</typeparam>
            <typeparam name="TRegister2">The type of the register2.</typeparam>
            <typeparam name="TRegister3">The type of the register3.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
            <remarks>注意!GenericType的順序與主流(Windsor, Unity)不同, 目的是為了讓生成對象 - instance與其它所有注冊類別區分.</remarks>
        </member>
        <member name="M:CommonIoC.Registration.RealizeFor(System.Type,System.Type)">
            <summary>
            Registers the realize.
            </summary>
            <param name="toRealizeType">Type of to realize.</param>
            <param name="registerType">Type of to register.</param>
            <returns></returns>
            <remarks>注意!GenericType的順序與主流(Windsor, Unity)不同, 目的是為了讓生成對象 - toRealizeType與其它所有注冊類別區分.</remarks>
        </member>
        <member name="M:CommonIoC.Registration.RealizeFor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Registers the realize.
            </summary>
            <param name="toRealizeType">Type of to realize.</param>
            <param name="registerTypes">To register types.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            toRealizeType
            or
            toRegisterTypes
            </exception>
            <remarks>注意!GenericType的順序與主流(Windsor, Unity)不同, 目的是為了讓生成對象 - toRealizeType與其它所有注冊類別區分.</remarks>
        </member>
        <member name="M:CommonIoC.Registration.RealizeFor``2(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Registers the realize.
            </summary>
            <typeparam name="TRealize">The type of the realize.</typeparam>
            <typeparam name="TRegister">The type of the register.</typeparam>
            <param name="registerType">The type to register.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">typeToRegister</exception>
            <remarks>注意!GenericType的順序與主流(Windsor, Unity)不同, 目的是為了讓生成對象 - toRealizeType與其它所有注冊類別區分.</remarks>
        </member>
        <member name="M:CommonIoC.Registration.RealizeFor``2">
            <summary>
            Registers the realize.
            </summary>
            <typeparam name="TRealize">The type of the realize.</typeparam>
            <typeparam name="TRegister">The type of the register.</typeparam>
            <returns></returns>
            <remarks>注意!GenericType的順序與主流(Windsor, Unity)不同, 目的是為了讓生成對象 - toRealizeType與其它所有注冊類別區分.</remarks>
        </member>
        <member name="M:CommonIoC.Registration.RealizeFor``3">
            <summary>
            Registers the realize.
            </summary>
            <typeparam name="TRealize">The type of the realize.</typeparam>
            <typeparam name="TRegister">The type of the register.</typeparam>
            <typeparam name="TRegister2">The type of the register2.</typeparam>
            <returns></returns>
            <remarks>注意!GenericType的順序與主流(Windsor, Unity)不同, 目的是為了讓生成對象 - toRealizeType與其它所有注冊類別區分.</remarks>
        </member>
        <member name="M:CommonIoC.Registration.RealizeFor``4">
            <summary>
            Registers the realize.
            </summary>
            <typeparam name="TRealize">The type of the realize.</typeparam>
            <typeparam name="TRegister">The type of the register.</typeparam>
            <typeparam name="TRegister2">The type of the register2.</typeparam>
            <typeparam name="TRegister3">The type of the register3.</typeparam>
            <returns></returns>
            <remarks>注意!GenericType的順序與主流(Windsor, Unity)不同, 目的是為了讓生成對象 - toRealizeType與其它所有注冊類別區分.</remarks>
        </member>
        <member name="M:CommonIoC.Registration.RealizeFor``5">
            <summary>
            Registers the realize.
            </summary>
            <typeparam name="TRealize">The type of the realize.</typeparam>
            <typeparam name="TRegister">The type of the register.</typeparam>
            <typeparam name="TRegister2">The type of the register2.</typeparam>
            <typeparam name="TRegister3">The type of the register3.</typeparam>
            <typeparam name="TRegister4">The type of the register4.</typeparam>
            <returns></returns>
            <remarks>注意!GenericType的順序與主流(Windsor, Unity)不同, 目的是為了讓生成對象 - toRealizeType與其它所有注冊類別區分.</remarks>
        </member>
        <member name="T:CommonIoC.Registration`1">
            <summary>
            Registration type, instance and realize teyp to container.
            </summary>
            <typeparam name="TRegister">The type of the regist.</typeparam>
        </member>
        <member name="F:CommonIoC.Registration`1.typeRegister">
            <summary>
            The type register
            </summary>
        </member>
        <member name="M:CommonIoC.Registration`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonIoC.Registration`1"/> class.
            </summary>
        </member>
        <member name="M:CommonIoC.Registration`1.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:CommonIoC.Registration`1"/> class.
            </summary>
            <param name="typeToRegister">The type to register.</param>
            <exception cref="T:System.ArgumentNullException">typeToRegister</exception>
        </member>
        <member name="P:CommonIoC.Registration`1.Key">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:CommonIoC.Registration`1.IsInstanceRegistration">
            <summary>
            Gets a value indicating whether this instance is instance registration.
            </summary>
            <value>
            <c>true</c> if this instance is instance registration; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonIoC.Registration`1.LifeStyle">
            <summary>
            Gets the life style.
            </summary>
            <value>
            The life style.
            </value>
        </member>
        <member name="M:CommonIoC.Registration`1.Name(System.String)">
            <summary>
            Names the specified name.
            </summary>
            <param name="value">The name.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.Registration`1.Forward``1">
            <summary>
            Forwards this instance.
            </summary>
            <typeparam name="TRegisterOther">The type of the register other.</typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.Registration`1.Forward(System.Type)">
            <summary>
            Forwards the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="M:CommonIoC.Registration`1.Forward(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Forwards the specified type.
            </summary>
            <param name="types"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">types</exception>
        </member>
        <member name="M:CommonIoC.Registration`1.LiftStyleSingleton">
            <summary>
            Lifts the style singleton.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.Registration`1.LiftStyleTransient">
            <summary>
            Lifts the style transient.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.Registration`1.LiftStylePerWebRequest">
            <summary>
            Lifts the style per web request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.Registration`1.LiftStylePerThread">
            <summary>
            Lifts the style per thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.Registration`1.Inject``2(CommonIoC.Injector{``0,``1})">
            <summary>
            Injects the specified injector.
            </summary>
            <param name="injector">The injector.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">injector</exception>
        </member>
        <member name="M:CommonIoC.Registration`1.Inject(CommonIoC.Injector[])">
            <summary>
            Injects the specified injectors.
            </summary>
            <param name="injectors">The injectors.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">injectors</exception>
        </member>
        <member name="M:CommonIoC.Registration`1.Instance(`0)">
            <summary>
            Instances the specified instance.
            </summary>
            <param name="value">The instance.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">instance</exception>
        </member>
        <member name="M:CommonIoC.Registration`1.Realize``1">
            <summary>
            Realizes the specified type of realize.
            </summary>
            <typeparam name="TRealize"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.Registration`1.Realize(System.Type)">
            <summary>
            Realizes the specified type of realize.
            </summary>
            <param name="typeOfRealize">The type of realize.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">instance</exception>
        </member>
        <member name="P:CommonIoC.Registration`1.CommonIoC#IRegistration#Injectors">
            <summary>
            Gets the injectors.
            </summary>
            <value>
            The injectors.
            </value>
        </member>
        <member name="T:CommonIoC.ITypeSetting`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:CommonIoC.ITypeSetting`1.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:CommonIoC.ITypeSetting`1.Eq(System.String)">
            <summary>
            Eqs the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.ITypeSetting`1.Eq(System.Type)">
            <summary>
            Eqs the specified register type.
            </summary>
            <param name="registerType">Type of the register.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.ITypeSetting`1.Eq(System.String[])">
            <summary>
            Eqs the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.ITypeSetting`1.Eq``1(System.String[])">
            <summary>
            Eqs the specified values.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.ITypeSetting`1.Eq(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Eqs the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.ITypeSetting`1.Eq``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Eqs the specified values.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.ITypeSetting`1.Eq(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Eqs the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonIoC.ITypeSetting`1.Eq``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Eqs the specified values.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="T:CommonIoC.TypeSetting">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonIoC.TypeSetting.For(System.Type)">
            <summary>
            Fors the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:CommonIoC.TypeSetting.For(System.String)">
            <summary>
            Fors the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:CommonIoC.TypeSetting.For``1">
            <summary>
            Fors this instance.
            </summary>
            <typeparam name="TInject">The type of the t.</typeparam>
            <returns></returns>
        </member>
        <member name="P:CommonIoC.TypeSetting.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:CommonIoC.TypeSetting.CommonIoC#ITypeSetting{CommonIoC#TypeSetting}#Eq(System.String)">
            <summary>
            Eqs the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:CommonIoC.TypeSetting.CommonIoC#ITypeSetting{CommonIoC#TypeSetting}#Eq(System.Type)">
            <summary>
            Eqs the specified value.
            </summary>
            <param name="registerType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:CommonIoC.TypeSetting.CommonIoC#ITypeSetting{CommonIoC#TypeSetting}#Eq(System.String[])">
            <summary>
            Eqs the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">values</exception>
        </member>
        <member name="M:CommonIoC.TypeSetting.CommonIoC#ITypeSetting{CommonIoC#TypeSetting}#Eq``1(System.String[])">
            <summary>
            Eqs the specified values.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="values">The values.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">values</exception>
        </member>
        <member name="M:CommonIoC.TypeSetting.CommonIoC#ITypeSetting{CommonIoC#TypeSetting}#Eq(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Eqs the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">values</exception>
        </member>
        <member name="M:CommonIoC.TypeSetting.CommonIoC#ITypeSetting{CommonIoC#TypeSetting}#Eq``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Eqs the specified values.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="values">The values.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">values</exception>
        </member>
        <member name="M:CommonIoC.TypeSetting.CommonIoC#ITypeSetting{CommonIoC#TypeSetting}#Eq(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Eqs the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">values</exception>
        </member>
        <member name="M:CommonIoC.TypeSetting.CommonIoC#ITypeSetting{CommonIoC#TypeSetting}#Eq``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Eqs the specified values.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="values">The values.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">values</exception>
        </member>
        <member name="T:CommonIoC.EmptyProvider">
            <summary>
            Empty instance container for default.
            </summary>
        </member>
        <member name="P:CommonIoC.EmptyProvider.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:CommonIoC.EmptyProvider.PerformResolveInstance(System.String,System.Type)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of resolving
            the requested service instance.
            </summary>
            <param name="key">Name of registered service you want. May be null.</param>
            <param name="serviceType">Type of instance requested.</param>
            <returns>
            The requested service instance.
            </returns>
        </member>
        <member name="M:CommonIoC.EmptyProvider.PerformResolveInstance(System.Type,System.Object)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="M:CommonIoC.EmptyProvider.PerformResolveInstance(System.String,System.Type,System.Object)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="M:CommonIoC.EmptyProvider.PerformResolveInstance(System.String,System.Type,System.Collections.IDictionary)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="arguments">The arguments.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="M:CommonIoC.EmptyProvider.PerformResolveInstance(System.Type,System.Collections.IDictionary)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="arguments">The arguments.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="M:CommonIoC.EmptyProvider.PerformResolveInstance(System.Type)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of resolving
            the requested service instance.
            </summary>
            <param name="serviceType">Type of instance requested.</param>
            <returns>
            The requested service instance.
            </returns>
        </member>
        <member name="M:CommonIoC.EmptyProvider.PerformResolveAllInstances(System.Type,System.Object)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <param name="argumentsAsAnonymousType">Type of the arguments as anonymous.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="M:CommonIoC.EmptyProvider.PerformResolveAllInstances(System.Type,System.Collections.IDictionary)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <param name="arguments">The arguments.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="M:CommonIoC.EmptyProvider.PerformResolveAllInstances(System.Type)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="M:CommonIoC.EmptyProvider.PerformRegister(System.Collections.Generic.IEnumerable{CommonIoC.IRegistration})">
            <summary>
            Performs the register.
            </summary>
            <param name="registrations">The registrations.</param>
            <returns>
            The IInstanceContainer object that this method was
            called on (this in C#, Me in Visual Basic).
            </returns>
            <remarks>
            Instance registration is much like setting a type as a singleton, except
            that instead of the container creating the instance the first time it is
            requested, the user creates the instance ahead of type and adds that instance
            to the container.
            </remarks>
        </member>
        <member name="T:CommonIoC.InstanceResolveException">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonIoC.InstanceResolveException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class.
            </summary>
        </member>
        <member name="M:CommonIoC.InstanceResolveException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error. 
             </param>
        </member>
        <member name="M:CommonIoC.InstanceResolveException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception. 
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. 
            </param>
        </member>
        <member name="M:CommonIoC.InstanceResolveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. 
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null. 
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). 
            </exception>
        </member>
        <member name="T:CommonIoC.LifestyleType">
            <summary>
            Component life time style.
            </summary>
        </member>
        <member name="F:CommonIoC.LifestyleType.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:CommonIoC.LifestyleType.Singleton">
            <summary>
            The singleton instance per each container.
            </summary>
        </member>
        <member name="F:CommonIoC.LifestyleType.Transient">
            <summary>
            Transient components are created on demand.
            </summary>
        </member>
        <member name="F:CommonIoC.LifestyleType.PerWebRequest">
            <summary>
            PerWebRequest components are created once per Http Request. (Current version only for Windsor)
            </summary>
        </member>
        <member name="F:CommonIoC.LifestyleType.PerThread">
            <summary>
            The per thread in each container.
            </summary>
        </member>
        <member name="F:CommonIoC.LifestyleType.BoundTo">
            <summary>
            The bound to (暫不支援)
            </summary>
        </member>
        <member name="F:CommonIoC.LifestyleType.Custom">
            <summary>
            The custom  (暫不支援)
            </summary>
        </member>
        <member name="T:CommonIoC.NLogAdapter.NamespaceDoc">
            <summary>
            Common Utilities
            </summary>
        </member>
    </members>
</doc>
